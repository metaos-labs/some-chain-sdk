{"version":3,"file":"some-chain-sdk.cjs.production.min.js","sources":["../src/constants/fee.ts","../src/api/APIRequester.ts","../src/api/BaseAPI.ts","../src/api/BankAPI.ts","../src/api/AuthAPI.ts","../src/api/SwapAPI.ts","../src/api/TxAPI.ts","../src/constants/tokenlist.default.ts","../src/types/ICommon.ts","../src/constants/network.ts","../src/constants/precision.ts","../src/constants/tick.ts","../src/utils/formatCurrencyAmount.ts","../src/utils/isNumberic.ts","../src/utils/sort.ts","../src/utils/formatMoment.ts","../src/core/LiquidityMath.ts","../src/core/TickMath.ts","../src/msgs/BaseMsg.ts","../src/proto/swap/tx.ts","../src/msgs/SwapMsg.ts","../src/proto/google/protobuf/any.ts","../src/proto/cosmos/crypto/secp256k1/keys.ts","../src/proto/cosmos/crypto/multisig/v1beta1/multisig.ts","../src/proto/cosmos/tx/signing/v1beta1/signing.ts","../src/proto/cosmos/base/v1beta1/coin.ts","../src/proto/cosmos/tx/v1beta1/tx.ts","../src/clients/TxClient.ts","../src/clients/APIClient.ts","../src/constants/date.ts","../src/core/TransactionLooper.ts","../src/constants/number.ts","../src/utils/parseToMap.ts","../src/utils/decimalNumber.ts","../src/utils/deepCopy.ts","../src/utils/mathUtil.ts","../src/utils/encrypt.ts","../src/utils/findToken.ts","../src/utils/getToPercent.ts","../src/utils/getPoolAddress.ts","../src/types/IWallet.ts","../src/utils/toPercent.ts","../src/utils/crypto.ts","../src/utils/formatPrice.ts"],"sourcesContent":["export enum Fee_Amount {\n  LOW = 500,\n  MEDIUM = 3000,\n  HIGH = 10000,\n}\n\nexport const FEE_AMOUNT_DETAIL: Record<\n  Fee_Amount,\n  { label: string; value: Fee_Amount; description: string }\n> = {\n  [Fee_Amount.LOW]: {\n    label: \"0.05\",\n    value: Fee_Amount.LOW,\n    description: \"Best for stable pairs.\",\n  },\n  [Fee_Amount.MEDIUM]: {\n    label: \"0.3\",\n    value: Fee_Amount.MEDIUM,\n    description: \"Best for most pairs.\",\n  },\n  [Fee_Amount.HIGH]: {\n    label: \"1\",\n    value: Fee_Amount.HIGH,\n    description: \"Best for exotic pairs.\",\n  },\n};\n","import Axios, { AxiosInstance } from \"axios\";\nimport { OrderBy } from \"../proto/cosmos/tx/v1beta1/service\";\n\nexport type APIParams = Record<string, string | number | null | undefined>;\n\nexport interface PaginationOptions {\n  \"pagination.limit\": string;\n  \"pagination.offset\": string;\n  \"pagination.key\": string;\n  \"pagination.count_total\": \"true\" | \"false\";\n  \"pagination.reverse\": \"true\" | \"false\";\n  order_by: keyof typeof OrderBy;\n}\n\nexport interface Pagination {\n  next_key: string | null;\n  total: number;\n}\n\nexport class APIRequester {\n  private axios: AxiosInstance;\n\n  constructor(baseURL: string) {\n    this.axios = Axios.create({\n      baseURL,\n      headers: {\n        Accept: \"application/json\",\n      },\n      timeout: 60000,\n    });\n  }\n\n  public async get<T>(\n    endpoint: string,\n    params: URLSearchParams | APIParams = {}\n  ): Promise<T> {\n    return this.axios.get(endpoint, { params }).then((d) => d.data);\n  }\n\n  public async post<T>(endpoint: string, data?: APIParams): Promise<T> {\n    return this.axios.post(endpoint, data).then((d) => d.data);\n  }\n}\n","import { APIRequester } from \"./APIRequester\";\n\nexport abstract class BaseAPI {\n  constructor(protected request: APIRequester) {}\n}\n","import { BaseAPI } from \"./BaseAPI\";\nimport { IToken } from \"../types\";\n\nexport interface IResBalances {\n  balance: {\n    denom: string;\n    amount: string;\n  };\n}\n\nexport class BankAPI extends BaseAPI {\n  public async apiTokenBalance(\n    token: IToken,\n    accountAddress: string\n  ): Promise<IResBalances> {\n    return this.request.get<IResBalances>(\n      `/cosmos/bank/v1beta1/balances/${accountAddress}/by_denom`,\n      {\n        denom: token.denom,\n      }\n    );\n  }\n\n  public async apiAccountBalance(\n    accountAddress: string\n  ): Promise<IResBalances> {\n    return this.request.get<IResBalances>(\n      `/cosmos/bank/v1beta1/balances/${accountAddress}`\n    );\n  }\n}\n","import { BaseAPI } from \"./BaseAPI\";\n\nexport interface IResAccountInfo {\n  account: {\n    \"@type\": string;\n    base_account: {\n      address: string;\n      pub_key: {\n        \"@type\": string;\n        key: string;\n      };\n      account_number: string;\n      sequence: string;\n    };\n    code_hash: string;\n  };\n}\n\nexport class AuthAPI extends BaseAPI {\n  public async apiAccountInfo(\n    accountAddress: string\n  ): Promise<IResAccountInfo> {\n    return this.request.get<IResAccountInfo>(\n      `/cosmos/auth/v1beta1/accounts/${accountAddress}`\n    );\n  }\n}\n","import { BaseAPI } from \"./BaseAPI\";\nimport { ILiquidityPosition, IPool, IPoolPrice } from \"../types\";\n\nexport interface IResPoolInfo {\n  pool: IPool;\n  pool_slot0: IPoolPrice;\n}\n\nexport interface IResPoolMetadataNew {\n  [pool: string]: IPool;\n}\n\nexport interface IFarmV3 {\n  address: string;\n}\n\nexport interface IResFarmList {\n  activatingPool: Array<IFarmV3>;\n  pagination: {\n    next_key: null | string;\n    total: string;\n  };\n}\n\nexport interface IResLiquidityPositionList {\n  liquidity_positions: Array<ILiquidityPosition>;\n}\n\nexport class SwapAPI extends BaseAPI {\n  /**\n   * find pool list by address array\n   * @param addresses\n   */\n  public async apiPoolListByAddresses(\n    addresses: Array<string>\n  ): Promise<{ pool_slot0_aggregations: Array<IResPoolInfo> }> {\n    return this.request.get<{ pool_slot0_aggregations: Array<IResPoolInfo> }>(\n      `/sophon-labs/sophon/swap/pool_slot0_aggregations?${addresses.join(\"&\")}`\n    );\n  }\n\n  public async apiPoolMetadataByAddress(\n    address: string\n  ): Promise<IResPoolMetadataNew> {\n    return this.request.get<IResPoolMetadataNew>(\n      `/sophon-labs/sophon/swap/pools/${address}`\n    );\n  }\n\n  public async apiPoolMetadataPriceByAddress(\n    address: string\n  ): Promise<{ pool_slot0: IPoolPrice }> {\n    return this.request.get<{ pool_slot0: IPoolPrice }>(\n      `/sophon-labs/sophon/swap/pools/${address}/slot0`\n    );\n  }\n\n  public async apiLiquidityPositionById(\n    tokenId: string\n  ): Promise<{ liquidity_position: ILiquidityPosition }> {\n    return this.request.get<{ liquidity_position: ILiquidityPosition }>(\n      `/sophon-labs/sophon/swap/liquidity_positions/${tokenId}`\n    );\n  }\n\n  public async apiLiquidityRewardsByIds(\n    tokenIds: Array<string>\n  ): Promise<{ liquidity_positions: Array<ILiquidityPosition> }> {\n    return this.request.get<{ liquidity_positions: Array<ILiquidityPosition> }>(\n      `/sophon-labs/sophon/swap/liquidity_position_by_ids?${tokenIds.join(\"&\")}`\n    );\n  }\n\n  public async apiTickImagePath(tokenId: string): Promise<{ uri: string }> {\n    return this.request.get<{ uri: string }>(\n      `/sophon-labs/sophon/swap/liquidity_positions/${tokenId}/token_uri`\n    );\n  }\n\n  public async apiActiveFarmList(): Promise<IResFarmList> {\n    return this.request.get<IResFarmList>(\n      `/sophon-labs/sophon/swap/activating_pools`\n    );\n  }\n\n  public async apiLiquidityPositionList(\n    accountAddress: string\n  ): Promise<IResLiquidityPositionList> {\n    return this.request.get<IResLiquidityPositionList>(\n      `/sophon-labs/sophon/swap/liquidity_positions_owner/${accountAddress}`\n    );\n  }\n}\n","import { BaseAPI } from \"./BaseAPI\";\nimport { TxResponse } from \"../proto/cosmos/base/abci/v1beta1/abci\";\nimport {\n  BroadcastMode,\n  BroadcastTxRequest,\n  BroadcastTxResponse,\n} from \"../proto/cosmos/tx/v1beta1/service\";\n\nexport class TxAPI extends BaseAPI {\n  public async txInfo(txHash: string): Promise<TxResponse> {\n    return this.request.get<TxResponse>(`/cosmos/tx/v1beta1/txs/${txHash}`);\n  }\n\n  private async _broadcast<T>(\n    tx: BroadcastTxRequest,\n    mode: keyof typeof BroadcastMode\n  ): Promise<T> {\n    return this.request.post<any>(`/cosmos/tx/v1beta1/txs`);\n  }\n\n  public async broadcast(tx: BroadcastTxRequest): Promise<BroadcastTxResponse> {\n    return this._broadcast<BroadcastTxResponse>(tx, \"BROADCAST_MODE_BLOCK\");\n  }\n}\n","export default [\n  {\n    denom: \"usop\",\n    creator: \"\",\n    name: \"Sophon\",\n    symbol: \"SOP\",\n    totalSupply: \"2000000000000000000000000000\",\n    decimal: 18,\n    logoURI: \"https://s2.coinmarketcap.com/static/img/coins/64x64/2025.png\",\n  },\n  {\n    denom: \"useth\",\n    creator: \"sop17gxqqequrm2rmehknpataddssugl4ef6auunuc\",\n    name: \"Ethereum\",\n    symbol: \"ETH\",\n    totalSupply: \"2000000000000000000000000\",\n    decimal: 18,\n    logoURI: \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n  },\n  {\n    denom: \"ustake\",\n    creator: \"sop17gxqqequrm2rmehknpataddssugl4ef6auunuc\",\n    name: \"STAKE\",\n    symbol: \"STAKE\",\n    totalSupply: \"200000000000000000000000000\",\n    decimal: 8,\n    logoURI: \"https://s2.coinmarketcap.com/static/img/coins/64x64/5601.png\",\n  },\n  {\n    denom: \"ususdc\",\n    creator: \"sop17gxqqequrm2rmehknpataddssugl4ef6auunuc\",\n    name: \"USDC\",\n    symbol: \"USDC\",\n    totalSupply: \"200000000000000000000000000\",\n    decimal: 6,\n    logoURI: \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n  },\n  {\n    denom: \"token/token1/3\",\n    creator: \"sop17gxqqequrm2rmehknpataddssugl4ef6auunuc\",\n    name: \"token1\",\n    symbol: \"token1\",\n    totalSupply: \"200000000000000000000000000\",\n    decimal: 18,\n    logoURI: \"https://s2.coinmarketcap.com/static/img/coins/64x64/4195.png\",\n  },\n  {\n    denom: \"token/token2/4\",\n    creator: \"sop17gxqqequrm2rmehknpataddssugl4ef6auunuc\",\n    name: \"token2\",\n    symbol: \"token2\",\n    totalSupply: \"200000000000000000000000000\",\n    decimal: 8,\n    logoURI: \"https://s2.coinmarketcap.com/static/img/coins/64x64/2280.png\",\n  },\n];\n","import { IToken } from \"./IToken\";\nimport { Fee_Amount } from \"../constants\";\n\nexport interface ITickProcessed {\n  tick: number;\n  liquidityActive: string;\n  liquidityNet: string;\n  price0: string;\n}\n\nexport interface ITickData {\n  tick_idx: number;\n  liquidity_gross: string;\n  liquidity_net: string;\n  price0: string;\n  price1: string;\n}\n\ntype Pick<T, K extends keyof T> = {\n  [P in K]: T[P];\n};\n\nexport enum Bound {\n  LOWER = \"LOWER\",\n  UPPER = \"UPPER\",\n}\n\nexport interface IFeeItem {\n  label: string;\n  value: Fee_Amount;\n  description: string;\n}\n\nexport enum Tip_Level {\n  Info = \"info\",\n  Warning = \"warning\",\n  Error = \"error\",\n}\n\nexport enum Swap_Direction {\n  In = \"exactIn\",\n  Out = \"exactOut\",\n}\n\nexport enum Transaction_Status {\n  Wallet = \"wallet\",\n  Pending = \"pending\",\n  Complete = \"complete\",\n  Success = \"success\",\n  Error = \"error\",\n  Reject = \"reject\",\n}\n\nexport interface ILiquidityPosition {\n  token_id: string;\n  address: string;\n  liquidity: string;\n  fee_growth_inside0_last: string;\n  fee_growth_inside1_last: string;\n  tokens_owed0: string;\n  tokens_owed1: string;\n  tick_lower: number;\n  tick_upper: number;\n  reward_growth_inside_lasts: Array<string>;\n  reward_oweds: Array<string>;\n}\n\nexport interface IPool {\n  address: string;\n  denom0: string;\n  denom1: string;\n  decimal0: number;\n  decimal1: number;\n  fee: number;\n  tick_spacing: number;\n  max_liquidity_per_tick: string;\n}\n\nexport interface IV3RewardConfig {\n  denom: string;\n  mintable: boolean;\n  operator: string;\n  reward_growth_global: string;\n  reward_per_second: string;\n  vault: string;\n  token?: IToken;\n  reward_per_day?: string;\n}\n\nexport interface IV3Reward extends IV3RewardConfig {\n  amount: string;\n  token?: IToken;\n}\n\nexport interface IPoolPrice {\n  address: string;\n  tick: number;\n  sqrt_price: string;\n  liquidity: string;\n  fee_growth_global0: string;\n  fee_growth_global1: string;\n  fee_protocol_owed0: string;\n  fee_protocol_owed1: string;\n  observation_index: number;\n  observation_cardinality: number;\n  observation_cardinality_next: number;\n  reward_configs: Array<IV3RewardConfig>;\n  reward_update_time_last: string;\n}\n\nexport interface IPoolMetaData extends IPool, IPoolPrice {}\n","export const ETH = \"eth\";\nexport const BSC = \"bsc\";\nexport const OEC = \"oec\";\nexport const HOO = \"hoo\";\nexport const XDAI = \"xdai\";\nexport const HECO = \"heco\";\nexport const POLYGON = \"polygon\";\nexport const FANTOM = \"fantom\";\nexport const KCC = \"kcc\";\nexport const AVALANCHE = \"avalanche\";\nexport const SOPHON = \"sop\";\n\nexport const ETH_CHAIN_NAME = \"Ethereum\";\nexport const BSC_CHAIN_NAME = \"Binance Smart Chain\";\nexport const OEC_CHAIN_NAME = \"OKEx Chain\";\nexport const HOO_CHAIN_NAME = \"Hoo Smart Chain\";\nexport const XDAI_CHAIN_NAME = \"xDAI\";\nexport const HECO_CHAIN_NAME = \"Huobi ECO Chain\";\nexport const POLYGON_CHAIN_NAME = \"Polygon\";\nexport const FANTOM_CHAIN_NAME = \"Fantom\";\nexport const KCC_CHAIN_NAME = \"KCC\";\nexport const AVALANCHE_CHAIN_NAME = \"Avalanche\";\nexport const SOPHON_TEST_CHAIN_NAME = \"Sophon Dev\";\n\nexport const ETH_NETWORK_ID = \"1\";\nexport const BSC_NETWORK_ID = \"56\";\nexport const BSC_NETWORK_TEST_ID = \"97\";\nexport const OEC_NETWORK_ID = \"66\";\nexport const HOO_NETWORK_ID = \"70\";\nexport const XDAI_NETWORK_ID = \"100\";\nexport const HECO_NETWORK_ID = \"128\";\nexport const POLYGON_NETWORK_ID = \"137\";\nexport const FANTOM_NETWORK_ID = \"250\";\nexport const KCC_NETWORK_ID = \"321\";\nexport const AVALANCHE_NETWORK_ID = \"43114\";\nexport const ETH_TEST_NETWORK_ID = \"2117\";\nexport const SOPHON_TEST_NETWORK_ID = \"118\";\n\nexport const ETH_CHAIN_ID = \"0x1\";\nexport const BSC_CHAIN_ID = \"0x38\";\nexport const BSC_CHAIN_ID_TEST = \"0x61\";\nexport const OEC_CHAIN_ID = \"0x42\";\nexport const HOO_CHAIN_ID = \"0x46\";\nexport const XDAI_CHAIN_ID = \"0x64\";\nexport const HECO_CHAIN_ID = \"0x80\";\nexport const POLYGON_CHAIN_ID = \"0x89\";\nexport const FANTOM_CHAIN_ID = \"0xfa\";\nexport const KCC_CHAIN_ID = \"0x141\";\nexport const AVALANCHE_CHAIN_ID = \"0xa86a\";\nexport const SOPHON_TEST_CHAIN_ID = \"sophond_9000-1\";\n\nexport const ETH_SYMBOL = \"ETH\";\nexport const BNB_SYMBOL = \"BNB\";\nexport const OKT_SYMBOL = \"OKT\";\nexport const HOO_SYMBOL = \"HOO\";\nexport const XDAI_SYMBOL = \"XDAI\";\nexport const HT_SYMBOL = \"HT\";\nexport const POLYGON_SYMBOL = \"MATIC\";\nexport const FANTOM_SYMBOL = \"FTM\";\nexport const KCC_SYMBOL = \"KCS\";\nexport const AVALANCHE_SYMBOL = \"AVAX\";\nexport const SOPHON_SYMBOL = \"SOP\";\n\nexport const SUPPORTED_CHAIN_IDS = [ETH_NETWORK_ID, SOPHON_TEST_NETWORK_ID];\n\nexport const NETWORK_MAP = {\n  [ETH_NETWORK_ID]: {\n    networkId: ETH_NETWORK_ID,\n    chainId: ETH_CHAIN_ID,\n    chainName: ETH_CHAIN_NAME,\n    providerType: ETH,\n    ticker: ETH_SYMBOL,\n  },\n  [BSC_NETWORK_ID]: {\n    networkId: BSC_NETWORK_ID,\n    chainId: BSC_CHAIN_ID,\n    chainName: BSC_CHAIN_NAME,\n    providerType: BSC,\n    ticker: BNB_SYMBOL,\n  },\n  [BSC_NETWORK_TEST_ID]: {\n    networkId: BSC_NETWORK_TEST_ID,\n    chainId: BSC_CHAIN_ID_TEST,\n    chainName: BSC_CHAIN_NAME,\n    providerType: BSC,\n    ticker: BNB_SYMBOL,\n  },\n  [OEC_NETWORK_ID]: {\n    networkId: OEC_NETWORK_ID,\n    chainId: OEC_CHAIN_ID,\n    chainName: OEC_CHAIN_NAME,\n    providerType: OEC,\n    ticker: OKT_SYMBOL,\n  },\n  [HOO_NETWORK_ID]: {\n    networkId: HOO_NETWORK_ID,\n    chainId: HOO_CHAIN_ID,\n    chainName: HOO_CHAIN_NAME,\n    providerType: HOO,\n    ticker: HOO_SYMBOL,\n  },\n  [XDAI_NETWORK_ID]: {\n    networkId: XDAI_NETWORK_ID,\n    chainId: XDAI_CHAIN_ID,\n    chainName: XDAI_CHAIN_NAME,\n    providerType: XDAI,\n    ticker: XDAI_SYMBOL,\n  },\n  [HECO_NETWORK_ID]: {\n    networkId: HECO_NETWORK_ID,\n    chainId: HECO_CHAIN_ID,\n    chainName: HECO_CHAIN_NAME,\n    providerType: HECO,\n    ticker: HT_SYMBOL,\n  },\n  [POLYGON_NETWORK_ID]: {\n    networkId: POLYGON_NETWORK_ID,\n    chainId: POLYGON_CHAIN_ID,\n    chainName: POLYGON_CHAIN_NAME,\n    providerType: POLYGON,\n    ticker: POLYGON_SYMBOL,\n  },\n  [FANTOM_NETWORK_ID]: {\n    networkId: FANTOM_NETWORK_ID,\n    chainId: FANTOM_CHAIN_ID,\n    chainName: FANTOM_CHAIN_NAME,\n    providerType: FANTOM,\n    ticker: FANTOM_SYMBOL,\n  },\n  [KCC_NETWORK_ID]: {\n    networkId: KCC_NETWORK_ID,\n    chainId: KCC_CHAIN_ID,\n    chainName: KCC_CHAIN_NAME,\n    providerType: KCC,\n    ticker: KCC_SYMBOL,\n  },\n  [AVALANCHE_NETWORK_ID]: {\n    networkId: AVALANCHE_NETWORK_ID,\n    chainId: AVALANCHE_CHAIN_ID,\n    chainName: AVALANCHE_CHAIN_NAME,\n    providerType: AVALANCHE,\n    ticker: AVALANCHE_SYMBOL,\n  },\n  [SOPHON_TEST_NETWORK_ID]: {\n    networkId: SOPHON_TEST_NETWORK_ID,\n    chainId: SOPHON_TEST_CHAIN_ID,\n    chainName: SOPHON_TEST_CHAIN_NAME,\n    providerType: SOPHON,\n    ticker: SOPHON_SYMBOL,\n  },\n};\n\nexport const CONFIG_CHAIN_SOPHON = {\n  RPC_URL: \"\",\n  REST_URL: \"\",\n  EXPLORER_URL: \"https://explorer.evmos.org\",\n  NETWORK_NAME: \"Sophon TestNet\",\n  NETWORK_TYPE: \"testnet\",\n  CHAIN_ID: \"sophond_9000-1\",\n  CHAIN_NAME: \"Sophon Dev\",\n  COIN_DENOM: \"usop\",\n  COIN_MINIMAL_DENOM: \"SOP\",\n  COIN_DECIMALS: 18,\n  PREFIX: \"sophon\",\n  COIN_TYPE: 118,\n  COINGECKO_ID: \"sophon\",\n  DEFAULT_GAS: 1000000000,\n  GAS_PRICE_STEP_LOW: 0.005,\n  GAS_PRICE_STEP_AVERAGE: 0.025,\n  GAS_PRICE_STEP_HIGH: 0.08,\n  FEATURES: [\"stargate\", \"ibc-transfer\", \"sophon\"],\n};\n\nexport const CHAIN_ETH = {\n  chainId: \"0x1\",\n  name: \"Ethereum\",\n  logoURI:\n    \"https://assets.trustwalletapp.com/blockchains/smartchain/assets/0x2170Ed0880ac9A755fd29B2688956BD959F933F8/logo.png\",\n  symbol: \"ETH\",\n};\n\nexport const CHAIN_SOP = {\n  chainId: \"sophon\",\n  name: \"Sophon\",\n  logoURI:\n    \"https://assets.trustwalletapp.com/blockchains/smartchain/assets/0xC9849E6fdB743d08fAeE3E34dd2D1bc69EA11a51/logo.png\",\n  symbol: \"sop\",\n};\n","export const DEFAULT_USER_PRECISION = 6;\n\nexport const DEFAULT_PRECISION = 18;\n\nexport const MAX_PRECISION = 28;\n\nexport const REG_NUMBER = new RegExp(\n  \"^[1-9]+[0-9]*(\\\\.\\\\d{0,\" + DEFAULT_PRECISION + \"})?$\"\n);\n\nexport const REG_DECIMAL_SIMPLE = /^\\d*(\\.\\d*)?$/;\n\nexport const REG_DECIMAL = new RegExp(\n  \"^0(\\\\.\\\\d{0,\" + DEFAULT_PRECISION + \"})?$\"\n);\n","export const TICK_SPACINGS = {\n  500: 10,\n  3000: 60,\n  10000: 200,\n};\n\nexport const BASE_UNIT_TICK = 1.0001;\n","import Decimal from \"decimal.js\";\nimport { Decimal as CosmosDecimal } from \"@cosmjs/math\";\nimport {\n  DEFAULT_PRECISION,\n  DEFAULT_USER_PRECISION,\n  MAX_PRECISION,\n} from \"../constants\";\n\nexport function toDecimalPlaces(\n  value: string | number | Decimal,\n  precision: number = DEFAULT_PRECISION\n) {\n  try {\n    return new Decimal(value)\n      .toDecimalPlaces(precision, Decimal.ROUND_UP)\n      .toString();\n  } catch (e) {\n    return String(value || \"-\");\n  }\n}\n\nexport function toAmountString(\n  value: Decimal.Value | undefined = \"\",\n  precision: number = DEFAULT_USER_PRECISION,\n  roundingMode: Decimal.Rounding = Decimal.ROUND_DOWN\n): string {\n  try {\n    return new Decimal(value)\n      .toSignificantDigits(precision, roundingMode)\n      .toString();\n  } catch (e) {\n    return String(value || \"-\");\n  }\n}\n\nexport function toAmountFloor(\n  value: string | number,\n  precision: number = DEFAULT_USER_PRECISION\n): string {\n  return toAmountString(value, precision, Decimal.ROUND_DOWN);\n}\n\nexport function toAmountCeil(\n  value: string | number,\n  precision: number = DEFAULT_USER_PRECISION\n) {\n  return toAmountString(value, precision, Decimal.ROUND_UP);\n}\n\nexport function toAmountFee(\n  value: string | number,\n  precision: number = DEFAULT_PRECISION\n): string {\n  try {\n    return new Decimal(value)\n      .toDecimalPlaces(precision, Decimal.ROUND_DOWN)\n      .toString();\n  } catch (e) {\n    return String(value || \"-\");\n  }\n}\n\nexport function isEmptyAmount(\n  value: Decimal.Value,\n  precision: number = MAX_PRECISION\n): boolean {\n  const _value = new Decimal(value).mul(Math.pow(10, precision)).floor();\n  return _value.isZero();\n}\n\nexport function toExactAmount(\n  value: string,\n  precision = MAX_PRECISION\n): string {\n  try {\n    return CosmosDecimal.fromUserInput(value, precision).toString();\n  } catch (e) {\n    return String(value || \"-\");\n  }\n}\n\nexport const formatNumber = (\n  value: Decimal.Value,\n  seperator: number = 3,\n  fixed: number = 2\n) => {\n  return `${new Decimal(value)\n    .div(new Decimal(10).pow(seperator))\n    .toFixed(fixed)}k`;\n};\n","import { REG_DECIMAL, REG_NUMBER, ZERO } from \"../constants\";\nimport Decimal from \"decimal.js\";\n\nexport function isNumeric(value: string) {\n  return !isNaN(parseFloat(value));\n  // return new Decimal(value).lessThan(ZERO);\n}\n\nexport function checkInputNumber(value: string) {\n  if (REG_NUMBER.test(value) || REG_DECIMAL.test(value) === true) {\n    return true;\n  }\n  return false;\n}\n","import { IToken } from \"../types\";\n\nexport function sortsBefore(baseToken: IToken, quoteToken: IToken) {\n  return baseToken.denom.toLowerCase() < quoteToken.denom.toLowerCase();\n}\n","import moment from \"moment\";\n\nmoment.locale(\"en-ca\");\n\nexport function formatMoment(value: string, pattern = \"YYYY/MM/DD HH:mm:ss\") {\n  return moment(+value).format(pattern);\n}\n\nexport function formatUnixMoment(value: string, pattern = \"MM/DD HH:mm:ss\") {\n  return moment(+value * 1000).format(pattern);\n}\n\nexport const formatTime = (time: string) => {\n  return moment(time).format(\"YYYY-MM-DD HH:mm:ss\");\n};\n\nexport const formatDiffTime = (time: string) => {\n  return moment(time).fromNow();\n};\n","import { IToken } from \"../types\";\nimport { toDecimalPlaces } from \"../utils\";\nimport Decimal from \"decimal.js\";\n\nexport class LiquidityMath {\n  private static getRightSideLiquidity(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount: string\n  ): Decimal {\n    const numerator = new Decimal(amount);\n    const _value1 = new Decimal(1).div(Decimal.sqrt(leftRangeValue));\n    const _value2 = new Decimal(1).div(Decimal.sqrt(rightRangeValue));\n    const denominator = Decimal.sub(_value1, _value2);\n    return numerator.div(denominator);\n  }\n\n  private static getLeftSideLiquidity(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount: string\n  ): Decimal {\n    const numerator = new Decimal(amount);\n    const denominator = Decimal.sub(\n      Decimal.sqrt(rightRangeValue),\n      Decimal.sqrt(leftRangeValue)\n    );\n    return numerator.div(denominator);\n  }\n\n  public static getLiquidityFromAmount0(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount0: string\n  ): Decimal {\n    const pc = new Decimal(priceValue);\n    if (pc.lessThan(leftRangeValue) === true) {\n      return this.getRightSideLiquidity(\n        leftRangeValue,\n        rightRangeValue,\n        priceValue,\n        amount0\n      );\n    } else if (pc.greaterThan(rightRangeValue) === true) {\n      return this.getLeftSideLiquidity(\n        leftRangeValue,\n        rightRangeValue,\n        priceValue,\n        amount0\n      );\n    }\n    const deltaX = new Decimal(amount0);\n    const _value1 = new Decimal(1).div(Decimal.sqrt(priceValue));\n    const _value2 = new Decimal(1).div(Decimal.sqrt(rightRangeValue));\n    const denominator = Decimal.sub(_value1, _value2);\n    return deltaX.div(denominator);\n  }\n\n  private static _getDiverForDeltaX(\n    lower: number | string,\n    upper: number | string\n  ): Decimal {\n    const _value1 = new Decimal(1).div(Decimal.sqrt(lower));\n    const _value2 = new Decimal(1).div(Decimal.sqrt(upper));\n    return Decimal.sub(_value1, _value2);\n  }\n\n  private static _getDiverForDeltaY(\n    lower: number | string,\n    upper: number | string\n  ) {\n    return Decimal.sub(Decimal.sqrt(upper), Decimal.sqrt(lower));\n  }\n\n  public static getLiquidityFromAmount1(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount1: string\n  ): Decimal {\n    const pc = new Decimal(priceValue);\n\n    if (pc.lessThan(leftRangeValue) === true) {\n      return this.getRightSideLiquidity(\n        leftRangeValue,\n        rightRangeValue,\n        priceValue,\n        amount1\n      );\n    } else if (pc.greaterThan(rightRangeValue) === true) {\n      return this.getLeftSideLiquidity(\n        leftRangeValue,\n        rightRangeValue,\n        priceValue,\n        amount1\n      );\n    }\n\n    const deltaY = new Decimal(amount1);\n    const denominator = Decimal.sub(\n      Decimal.sqrt(priceValue),\n      Decimal.sqrt(leftRangeValue)\n    );\n    return deltaY.div(denominator);\n  }\n\n  public static getAmount1FromAmount0(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount0: string,\n    token0: IToken\n  ): string {\n    const liquidity = this.getLiquidityFromAmount0(\n      leftRangeValue,\n      rightRangeValue,\n      priceValue,\n      amount0\n    );\n    console.log(\"liquidity: \" + liquidity);\n\n    const _value1 = new Decimal(liquidity);\n    const _value2 = this._getDiverForDeltaY(leftRangeValue, priceValue);\n    return _value1.mul(_value2).toString();\n  }\n\n  public static getAmount0FromAmount1(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount1: string,\n    token1: IToken\n  ): string {\n    const liquidity = this.getLiquidityFromAmount1(\n      leftRangeValue,\n      rightRangeValue,\n      priceValue,\n      amount1\n    );\n\n    console.log(\"liquidity: \" + liquidity);\n\n    const _value1 = new Decimal(liquidity);\n    const _value2 = this._getDiverForDeltaX(priceValue, rightRangeValue);\n    return _value1.mul(_value2).toString();\n  }\n\n  public static getAmountByLiquidity(\n    leftRangeValue: number | string,\n    rightRangeValue: number | string,\n    priceValue: number | string,\n    liquidity: string,\n    token0: IToken,\n    token1: IToken\n  ): { amount0: string; amount1: string } {\n    const pc = new Decimal(priceValue);\n\n    const _value1 = new Decimal(liquidity);\n\n    if (pc.lessThan(leftRangeValue) === true) {\n      const _value2 = this._getDiverForDeltaX(leftRangeValue, rightRangeValue);\n      return {\n        amount0: toDecimalPlaces(_value1.mul(_value2), token0.decimal),\n        amount1: \"0\",\n      };\n    } else if (pc.greaterThan(rightRangeValue) === true) {\n      const _value2 = this._getDiverForDeltaY(leftRangeValue, rightRangeValue);\n      return {\n        amount0: \"0\",\n        amount1: toDecimalPlaces(_value1.mul(_value2), token1.decimal),\n      };\n    }\n    const deltaXDiver = this._getDiverForDeltaX(priceValue, rightRangeValue);\n    const deltaYDiver = this._getDiverForDeltaY(leftRangeValue, priceValue);\n    return {\n      amount0: toDecimalPlaces(_value1.mul(deltaXDiver), token0.decimal),\n      amount1: toDecimalPlaces(_value1.mul(deltaYDiver), token1.decimal),\n    };\n  }\n}\n","import invariant from \"tiny-invariant\";\nimport Decimal from \"decimal.js\";\nimport { Fee_Amount, TICK_SPACINGS, BASE_UNIT_TICK } from \"../constants\";\nimport { IToken } from \"../types\";\nimport { sortsBefore, toAmountString } from \"../utils\";\n\nexport class TickMath {\n  public static INVALID_TICK = -99999999;\n\n  public static MIN_TICK = -887272;\n\n  public static MIN_TICK_VALUE = \"0\";\n\n  public static MAX_TICK: number = -TickMath.MIN_TICK;\n\n  public static MAX_TICK_VALUE = \"∞\";\n\n  public static nearestUsableTick = (\n    tick: number,\n    tickSpacing: number\n  ): number => {\n    const rounded = Math.round(tick / tickSpacing) * tickSpacing;\n    if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing;\n    else if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing;\n    else return rounded;\n  };\n\n  private static priceToClosestTick(price: string): number {\n    const numerator = Decimal.log2(Decimal.sqrt(price));\n    const denominator = Decimal.log2(Decimal.sqrt(BASE_UNIT_TICK));\n    return numerator.div(denominator).toNumber();\n  }\n\n  /**\n   * Compute nearest tick of price for input\n   * @param feeAmount\n   * @param value\n   */\n  public static getNearestTickByPrice(\n    feeAmount: Fee_Amount,\n    value: string\n  ): number {\n    const _value = value.trim();\n    if (_value === \"\") {\n      return this.INVALID_TICK;\n    }\n    if (value === this.MIN_TICK_VALUE) {\n      return this.MIN_TICK;\n    }\n    if (value === this.MAX_TICK_VALUE) {\n      return this.MAX_TICK;\n    }\n    const tick: number = this.priceToClosestTick(value);\n    // console.log(`[priceToClosestTick]: ` + tick);\n    const result = this.nearestUsableTick(tick, TICK_SPACINGS[feeAmount]);\n    // console.log(`[nearestUsableTick]: ` + result);\n    return result;\n  }\n\n  public static getFormattedPriceByTick(\n    tick: Decimal.Value,\n    fee: Fee_Amount\n  ): string {\n    if (tick === this.INVALID_TICK) {\n      return \"\";\n    }\n    if (this.isLowestTick(tick, fee)) {\n      return this.MIN_TICK_VALUE;\n    }\n    if (this.isHighestTick(tick, fee)) {\n      return this.MAX_TICK_VALUE;\n    }\n    const base = Decimal.pow(Decimal.sqrt(BASE_UNIT_TICK), tick);\n    return Decimal.pow(base, 2).toString();\n  }\n\n  public static getPriceByTick(tick: Decimal.Value): string {\n    if (tick === this.INVALID_TICK) {\n      return \"\";\n    }\n    // if (this.isLowestTick(tick, fee)) {\n    //   return this.MIN_TICK_VALUE;\n    // }\n    // if (this.isHighestTick(tick, fee)) {\n    //   return this.MAX_TICK_VALUE;\n    // }\n    const base = Decimal.pow(Decimal.sqrt(BASE_UNIT_TICK), tick);\n    return Decimal.pow(base, 2).toString();\n  }\n\n  public static getNearestPriceByInput(\n    feeAmount: Fee_Amount,\n    price: string\n  ): string {\n    // console.log('INPUT price: ' + price);\n    const nearestTick = this.getNearestTickByPrice(feeAmount, price);\n    const result = this.getPriceByTick(nearestTick);\n    // console.log('getPriceByTick: ' + result);\n    // console.log('==========');\n    return toAmountString(result);\n  }\n\n  public static getPriceBySqrtPrice(sqrtPrice: string): string {\n    if (!sqrtPrice) {\n      return \"\";\n    }\n    if (sqrtPrice === \"0\") {\n      return \"0\";\n    }\n    return new Decimal(sqrtPrice).pow(2).toString();\n  }\n\n  public static getSqrtPriceByPrice(price: string): string {\n    if (price === \"0\") {\n      return \"0\";\n    }\n    return new Decimal(price).sqrt().toString();\n  }\n\n  public static getBaseTickRange(\n    fromToken: IToken,\n    toToken: IToken,\n    fee: Fee_Amount,\n    leftRange: string,\n    rightRange: string\n  ): { tickLower: number; tickUpper: number } {\n    let tickLower: number;\n    let tickUpper: number;\n    if (sortsBefore(fromToken, toToken)) {\n      tickLower =\n        leftRange === TickMath.MIN_TICK_VALUE\n          ? TickMath.getNearestLowestTick(fee)\n          : TickMath.getNearestTickByPrice(fee, leftRange);\n      tickUpper =\n        rightRange === TickMath.MAX_TICK_VALUE\n          ? TickMath.getNearestHighestTick(fee)\n          : TickMath.getNearestTickByPrice(fee, rightRange);\n    } else {\n      if (leftRange === TickMath.MIN_TICK_VALUE) {\n        tickUpper = TickMath.getNearestHighestTick(fee);\n      } else {\n        tickUpper = TickMath.getNearestTickByPrice(\n          fee,\n          new Decimal(1).div(leftRange).toString()\n        );\n      }\n      if (rightRange === TickMath.MAX_TICK_VALUE) {\n        tickLower = TickMath.getNearestLowestTick(fee);\n      } else {\n        tickLower = TickMath.getNearestTickByPrice(\n          fee,\n          new Decimal(1).div(rightRange).toString()\n        );\n      }\n    }\n    console.log(\"tickLower: \" + tickLower);\n    console.log(\"tickUpper: \" + tickUpper);\n    return {\n      tickLower,\n      tickUpper,\n    };\n  }\n\n  public static getNearestLowestTick(fee: Fee_Amount): number {\n    const tickLower = this.nearestUsableTick(this.MIN_TICK, TICK_SPACINGS[fee]);\n    // console.log('getNearestLowestTick: ' + tickLower);\n    return tickLower;\n  }\n\n  public static getNearestHighestTick(fee: Fee_Amount): number {\n    const tickUpper = this.nearestUsableTick(this.MAX_TICK, TICK_SPACINGS[fee]);\n    // console.log('getNearestHighestTick: ' + tickUpper);\n    return tickUpper;\n  }\n\n  public static getNearestPricesByFullTick(fee: Fee_Amount): {\n    lowestPrice: string;\n    highestPrice: string;\n  } {\n    const tickLower = this.nearestUsableTick(this.MIN_TICK, TICK_SPACINGS[fee]);\n    const tickUpper = this.nearestUsableTick(this.MAX_TICK, TICK_SPACINGS[fee]);\n    const lowestPrice = this.getPriceByTick(tickLower);\n    const highestPrice = this.getPriceByTick(tickUpper);\n    return {\n      lowestPrice,\n      highestPrice,\n    };\n  }\n\n  public static isHighestTick(tick: Decimal.Value, fee: Fee_Amount): boolean {\n    const highestTick = this.getNearestHighestTick(fee);\n    return tick >= highestTick;\n  }\n\n  public static isLowestTick(tick: Decimal.Value, fee: Fee_Amount): boolean {\n    const lowestTick = this.getNearestLowestTick(fee);\n    return tick <= lowestTick;\n  }\n}\n","import { EncodeObject, TxBodyEncodeObject } from \"@cosmjs/proto-signing\";\n\nexport abstract class BaseMsg {\n  constructor() {}\n  public abstract generateMessage(): EncodeObject;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { BrowserHeaders } from \"browser-headers\";\n\nexport const protobufPackage = \"sophonlabs.sophon.swap\";\n\nexport interface MsgCreatePool {\n  creator: string;\n  /** the denom of denom0 in the pool */\n  denom0: string;\n  /** the denom of denom1 in the pool */\n  denom1: string;\n  /** the fee rate for the pool */\n  fee: number;\n  /** the initial square root price of the poo */\n  sqrtPrice: string;\n}\n\nexport interface MsgCreatePoolResponse {}\n\nexport interface MsgCreatePosition {\n  creator: string;\n  /** the denom of token0 in the pool */\n  denom0: string;\n  /** the denom of token1 in the pool */\n  denom1: string;\n  /** the fee rate for the pool */\n  fee: number;\n  /** the price lower bound of the position */\n  tickLower: number;\n  /** the price higher bound of the position */\n  tickUpper: number;\n  /** the desired amount of denom0 in the position */\n  amount0Desired: string;\n  /** the desired amount of denom1 in the position */\n  amount1Desired: string;\n  /** the minimum amount that denom0 needs to add when slippage occurs */\n  amount0Min: string;\n  /** the minimum amount that denom1 needs to add when slippage occurs */\n  amount1Min: string;\n  /** the minted NFT holder address */\n  recipient: string;\n  /** the time by which the transaction must be included to effect the change, unix time */\n  deadline: Long;\n}\n\nexport interface MsgCreatePositionResponse {}\n\nexport interface MsgIncreaseLiquidity {\n  /** the message creator, with tokens paid for the message */\n  creator: string;\n  /** then id of the NFT for which liquidity is being increased */\n  tokenId: string;\n  /** the desired amount of denom0 to be spent */\n  amount0Desired: string;\n  /** the desired amount of denom1 to be spent */\n  amount1Desired: string;\n  /** the minimum amount of denom0 to spend, which serves as a slippage check */\n  amount0Min: string;\n  /** the minimum amount of denom1 to spend, which serves as a slippage check */\n  amount1Min: string;\n  /** the time by which the transaction must be included to effect the change, unix time */\n  deadline: Long;\n}\n\nexport interface MsgIncreaseLiquidityResponse {}\n\nexport interface MsgDecreaseLiquidity {\n  creator: string;\n  /** then id of the NFT for which liquidity is being decreased */\n  tokenId: string;\n  /** the amount by which liquidity will be decreased */\n  liquidity: string;\n  /** the minimum amount of denom0 that should be accounted for the burned liquidity */\n  amount0Min: string;\n  /** the minimum amount of denom1 that should be accounted for the burned liquidity */\n  amount1Min: string;\n  /** the time by which the transaction must be included to effect the change, unix time */\n  deadline: Long;\n}\n\nexport interface MsgDecreaseLiquidityResponse {}\n\nexport interface MsgCollect {\n  creator: string;\n  /** the id of the NFT for which tokens are being collected */\n  tokenId: string;\n  /** the address that should receive the tokens */\n  recipient: string;\n  /** the maximum amount of denom0 to collect */\n  amount0Max: string;\n  /** the maximum amount of denom1 to collect */\n  amount1Max: string;\n  /** whether to get only owed tokens. True means only get the tokens that are owed(less gas), false means trigger settlement first, then collect(more gas) */\n  collectOnly: boolean;\n}\n\nexport interface MsgCollectResponse {}\n\nexport interface MsgSwapExactIn {\n  creator: string;\n  recipient: string;\n  amountIn: string;\n  amountOutMin: string;\n  denoms: string[];\n  fees: number[];\n  deadline: Long;\n}\n\nexport interface MsgSwapExactInResponse {}\n\nexport interface MsgSwapExactOut {\n  creator: string;\n  recipient: string;\n  amountOut: string;\n  amountInMax: string;\n  denoms: string[];\n  fees: number[];\n  deadline: Long;\n}\n\nexport interface MsgSwapExactOutResponse {}\n\nexport interface MsgSetOperator {\n  creator: string;\n  /** the pool address */\n  address: string;\n  /** the index of the reward config, starting at 0 */\n  index: number;\n  /** the new operator address, if empty, remove the operator */\n  operator: string;\n}\n\nexport interface MsgSetOperatorResponse {}\n\nexport interface MsgSetReward {\n  creator: string;\n  address: string;\n  index: number;\n  /** reward denom */\n  denom: string;\n  rewardPerSecond: string;\n  /**\n   * If it is true, it means that the reward will be issued by mint, otherwise the reward will be issued through the vault.\n   *\n   * If the balance of the vault is insufficient, only part of the reward will be issued.\n   */\n  mintable: boolean;\n  /** the reward config effective time */\n  triggerTime: Long;\n}\n\nexport interface MsgSetRewardResponse {}\n\nexport interface MsgCollectReward {\n  creator: string;\n  /** the id of the NFT for which tokens are being collected */\n  tokenId: string;\n  /** the address that should receive the tokens */\n  recipient: string;\n  /** whether to get only owed tokens. True means only get the tokens that are owed(less gas), false means trigger settlement first, then collect(more gas) */\n  collectOnly: boolean;\n}\n\nexport interface MsgCollectRewardResponse {}\n\nexport interface MsgCollectFeeProtocol {\n  creator: string;\n  /** the pool address */\n  address: string;\n}\n\nexport interface MsgCollectFeeProtocolResponse {}\n\nexport interface MsgGovBurn {\n  creator: string;\n  amount: string;\n}\n\nexport interface MsgGovBurnResponse {}\n\nexport interface MsgGovSwapExactIn {\n  creator: string;\n  amountIn: string;\n  amountOutMin: string;\n  denoms: string[];\n  fees: number[];\n  deadline: Long;\n}\n\nexport interface MsgGovSwapExactInResponse {}\n\nfunction createBaseMsgCreatePool(): MsgCreatePool {\n  return { creator: \"\", denom0: \"\", denom1: \"\", fee: 0, sqrtPrice: \"\" };\n}\n\nexport const MsgCreatePool = {\n  encode(\n    message: MsgCreatePool,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.denom0 !== \"\") {\n      writer.uint32(18).string(message.denom0);\n    }\n    if (message.denom1 !== \"\") {\n      writer.uint32(26).string(message.denom1);\n    }\n    if (message.fee !== 0) {\n      writer.uint32(32).int32(message.fee);\n    }\n    if (message.sqrtPrice !== \"\") {\n      writer.uint32(42).string(message.sqrtPrice);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePool {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreatePool();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.denom0 = reader.string();\n          break;\n        case 3:\n          message.denom1 = reader.string();\n          break;\n        case 4:\n          message.fee = reader.int32();\n          break;\n        case 5:\n          message.sqrtPrice = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCreatePool {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      denom0: isSet(object.denom0) ? String(object.denom0) : \"\",\n      denom1: isSet(object.denom1) ? String(object.denom1) : \"\",\n      fee: isSet(object.fee) ? Number(object.fee) : 0,\n      sqrtPrice: isSet(object.sqrtPrice) ? String(object.sqrtPrice) : \"\",\n    };\n  },\n\n  toJSON(message: MsgCreatePool): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.denom0 !== undefined && (obj.denom0 = message.denom0);\n    message.denom1 !== undefined && (obj.denom1 = message.denom1);\n    message.fee !== undefined && (obj.fee = Math.round(message.fee));\n    message.sqrtPrice !== undefined && (obj.sqrtPrice = message.sqrtPrice);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreatePool>, I>>(\n    object: I\n  ): MsgCreatePool {\n    const message = createBaseMsgCreatePool();\n    message.creator = object.creator ?? \"\";\n    message.denom0 = object.denom0 ?? \"\";\n    message.denom1 = object.denom1 ?? \"\";\n    message.fee = object.fee ?? 0;\n    message.sqrtPrice = object.sqrtPrice ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgCreatePoolResponse(): MsgCreatePoolResponse {\n  return {};\n}\n\nexport const MsgCreatePoolResponse = {\n  encode(\n    _: MsgCreatePoolResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreatePoolResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreatePoolResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCreatePoolResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCreatePoolResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreatePoolResponse>, I>>(\n    _: I\n  ): MsgCreatePoolResponse {\n    const message = createBaseMsgCreatePoolResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCreatePosition(): MsgCreatePosition {\n  return {\n    creator: \"\",\n    denom0: \"\",\n    denom1: \"\",\n    fee: 0,\n    tickLower: 0,\n    tickUpper: 0,\n    amount0Desired: \"\",\n    amount1Desired: \"\",\n    amount0Min: \"\",\n    amount1Min: \"\",\n    recipient: \"\",\n    deadline: Long.ZERO,\n  };\n}\n\nexport const MsgCreatePosition = {\n  encode(\n    message: MsgCreatePosition,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.denom0 !== \"\") {\n      writer.uint32(18).string(message.denom0);\n    }\n    if (message.denom1 !== \"\") {\n      writer.uint32(26).string(message.denom1);\n    }\n    if (message.fee !== 0) {\n      writer.uint32(32).int32(message.fee);\n    }\n    if (message.tickLower !== 0) {\n      writer.uint32(40).int32(message.tickLower);\n    }\n    if (message.tickUpper !== 0) {\n      writer.uint32(48).int32(message.tickUpper);\n    }\n    if (message.amount0Desired !== \"\") {\n      writer.uint32(58).string(message.amount0Desired);\n    }\n    if (message.amount1Desired !== \"\") {\n      writer.uint32(66).string(message.amount1Desired);\n    }\n    if (message.amount0Min !== \"\") {\n      writer.uint32(74).string(message.amount0Min);\n    }\n    if (message.amount1Min !== \"\") {\n      writer.uint32(82).string(message.amount1Min);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(90).string(message.recipient);\n    }\n    if (!message.deadline.isZero()) {\n      writer.uint32(96).int64(message.deadline);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePosition {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreatePosition();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.denom0 = reader.string();\n          break;\n        case 3:\n          message.denom1 = reader.string();\n          break;\n        case 4:\n          message.fee = reader.int32();\n          break;\n        case 5:\n          message.tickLower = reader.int32();\n          break;\n        case 6:\n          message.tickUpper = reader.int32();\n          break;\n        case 7:\n          message.amount0Desired = reader.string();\n          break;\n        case 8:\n          message.amount1Desired = reader.string();\n          break;\n        case 9:\n          message.amount0Min = reader.string();\n          break;\n        case 10:\n          message.amount1Min = reader.string();\n          break;\n        case 11:\n          message.recipient = reader.string();\n          break;\n        case 12:\n          message.deadline = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCreatePosition {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      denom0: isSet(object.denom0) ? String(object.denom0) : \"\",\n      denom1: isSet(object.denom1) ? String(object.denom1) : \"\",\n      fee: isSet(object.fee) ? Number(object.fee) : 0,\n      tickLower: isSet(object.tickLower) ? Number(object.tickLower) : 0,\n      tickUpper: isSet(object.tickUpper) ? Number(object.tickUpper) : 0,\n      amount0Desired: isSet(object.amount0Desired)\n        ? String(object.amount0Desired)\n        : \"\",\n      amount1Desired: isSet(object.amount1Desired)\n        ? String(object.amount1Desired)\n        : \"\",\n      amount0Min: isSet(object.amount0Min) ? String(object.amount0Min) : \"\",\n      amount1Min: isSet(object.amount1Min) ? String(object.amount1Min) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      deadline: isSet(object.deadline)\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: MsgCreatePosition): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.denom0 !== undefined && (obj.denom0 = message.denom0);\n    message.denom1 !== undefined && (obj.denom1 = message.denom1);\n    message.fee !== undefined && (obj.fee = Math.round(message.fee));\n    message.tickLower !== undefined &&\n      (obj.tickLower = Math.round(message.tickLower));\n    message.tickUpper !== undefined &&\n      (obj.tickUpper = Math.round(message.tickUpper));\n    message.amount0Desired !== undefined &&\n      (obj.amount0Desired = message.amount0Desired);\n    message.amount1Desired !== undefined &&\n      (obj.amount1Desired = message.amount1Desired);\n    message.amount0Min !== undefined && (obj.amount0Min = message.amount0Min);\n    message.amount1Min !== undefined && (obj.amount1Min = message.amount1Min);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.deadline !== undefined &&\n      (obj.deadline = (message.deadline || Long.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreatePosition>, I>>(\n    object: I\n  ): MsgCreatePosition {\n    const message = createBaseMsgCreatePosition();\n    message.creator = object.creator ?? \"\";\n    message.denom0 = object.denom0 ?? \"\";\n    message.denom1 = object.denom1 ?? \"\";\n    message.fee = object.fee ?? 0;\n    message.tickLower = object.tickLower ?? 0;\n    message.tickUpper = object.tickUpper ?? 0;\n    message.amount0Desired = object.amount0Desired ?? \"\";\n    message.amount1Desired = object.amount1Desired ?? \"\";\n    message.amount0Min = object.amount0Min ?? \"\";\n    message.amount1Min = object.amount1Min ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.deadline =\n      object.deadline !== undefined && object.deadline !== null\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgCreatePositionResponse(): MsgCreatePositionResponse {\n  return {};\n}\n\nexport const MsgCreatePositionResponse = {\n  encode(\n    _: MsgCreatePositionResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreatePositionResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreatePositionResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCreatePositionResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCreatePositionResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreatePositionResponse>, I>>(\n    _: I\n  ): MsgCreatePositionResponse {\n    const message = createBaseMsgCreatePositionResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgIncreaseLiquidity(): MsgIncreaseLiquidity {\n  return {\n    creator: \"\",\n    tokenId: \"\",\n    amount0Desired: \"\",\n    amount1Desired: \"\",\n    amount0Min: \"\",\n    amount1Min: \"\",\n    deadline: Long.ZERO,\n  };\n}\n\nexport const MsgIncreaseLiquidity = {\n  encode(\n    message: MsgIncreaseLiquidity,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.tokenId !== \"\") {\n      writer.uint32(18).string(message.tokenId);\n    }\n    if (message.amount0Desired !== \"\") {\n      writer.uint32(26).string(message.amount0Desired);\n    }\n    if (message.amount1Desired !== \"\") {\n      writer.uint32(34).string(message.amount1Desired);\n    }\n    if (message.amount0Min !== \"\") {\n      writer.uint32(42).string(message.amount0Min);\n    }\n    if (message.amount1Min !== \"\") {\n      writer.uint32(50).string(message.amount1Min);\n    }\n    if (!message.deadline.isZero()) {\n      writer.uint32(56).int64(message.deadline);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgIncreaseLiquidity {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgIncreaseLiquidity();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.tokenId = reader.string();\n          break;\n        case 3:\n          message.amount0Desired = reader.string();\n          break;\n        case 4:\n          message.amount1Desired = reader.string();\n          break;\n        case 5:\n          message.amount0Min = reader.string();\n          break;\n        case 6:\n          message.amount1Min = reader.string();\n          break;\n        case 7:\n          message.deadline = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgIncreaseLiquidity {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      tokenId: isSet(object.tokenId) ? String(object.tokenId) : \"\",\n      amount0Desired: isSet(object.amount0Desired)\n        ? String(object.amount0Desired)\n        : \"\",\n      amount1Desired: isSet(object.amount1Desired)\n        ? String(object.amount1Desired)\n        : \"\",\n      amount0Min: isSet(object.amount0Min) ? String(object.amount0Min) : \"\",\n      amount1Min: isSet(object.amount1Min) ? String(object.amount1Min) : \"\",\n      deadline: isSet(object.deadline)\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: MsgIncreaseLiquidity): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.tokenId !== undefined && (obj.tokenId = message.tokenId);\n    message.amount0Desired !== undefined &&\n      (obj.amount0Desired = message.amount0Desired);\n    message.amount1Desired !== undefined &&\n      (obj.amount1Desired = message.amount1Desired);\n    message.amount0Min !== undefined && (obj.amount0Min = message.amount0Min);\n    message.amount1Min !== undefined && (obj.amount1Min = message.amount1Min);\n    message.deadline !== undefined &&\n      (obj.deadline = (message.deadline || Long.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgIncreaseLiquidity>, I>>(\n    object: I\n  ): MsgIncreaseLiquidity {\n    const message = createBaseMsgIncreaseLiquidity();\n    message.creator = object.creator ?? \"\";\n    message.tokenId = object.tokenId ?? \"\";\n    message.amount0Desired = object.amount0Desired ?? \"\";\n    message.amount1Desired = object.amount1Desired ?? \"\";\n    message.amount0Min = object.amount0Min ?? \"\";\n    message.amount1Min = object.amount1Min ?? \"\";\n    message.deadline =\n      object.deadline !== undefined && object.deadline !== null\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgIncreaseLiquidityResponse(): MsgIncreaseLiquidityResponse {\n  return {};\n}\n\nexport const MsgIncreaseLiquidityResponse = {\n  encode(\n    _: MsgIncreaseLiquidityResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgIncreaseLiquidityResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgIncreaseLiquidityResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgIncreaseLiquidityResponse {\n    return {};\n  },\n\n  toJSON(_: MsgIncreaseLiquidityResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgIncreaseLiquidityResponse>, I>>(\n    _: I\n  ): MsgIncreaseLiquidityResponse {\n    const message = createBaseMsgIncreaseLiquidityResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgDecreaseLiquidity(): MsgDecreaseLiquidity {\n  return {\n    creator: \"\",\n    tokenId: \"\",\n    liquidity: \"\",\n    amount0Min: \"\",\n    amount1Min: \"\",\n    deadline: Long.ZERO,\n  };\n}\n\nexport const MsgDecreaseLiquidity = {\n  encode(\n    message: MsgDecreaseLiquidity,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.tokenId !== \"\") {\n      writer.uint32(18).string(message.tokenId);\n    }\n    if (message.liquidity !== \"\") {\n      writer.uint32(26).string(message.liquidity);\n    }\n    if (message.amount0Min !== \"\") {\n      writer.uint32(34).string(message.amount0Min);\n    }\n    if (message.amount1Min !== \"\") {\n      writer.uint32(42).string(message.amount1Min);\n    }\n    if (!message.deadline.isZero()) {\n      writer.uint32(48).int64(message.deadline);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgDecreaseLiquidity {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgDecreaseLiquidity();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.tokenId = reader.string();\n          break;\n        case 3:\n          message.liquidity = reader.string();\n          break;\n        case 4:\n          message.amount0Min = reader.string();\n          break;\n        case 5:\n          message.amount1Min = reader.string();\n          break;\n        case 6:\n          message.deadline = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgDecreaseLiquidity {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      tokenId: isSet(object.tokenId) ? String(object.tokenId) : \"\",\n      liquidity: isSet(object.liquidity) ? String(object.liquidity) : \"\",\n      amount0Min: isSet(object.amount0Min) ? String(object.amount0Min) : \"\",\n      amount1Min: isSet(object.amount1Min) ? String(object.amount1Min) : \"\",\n      deadline: isSet(object.deadline)\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: MsgDecreaseLiquidity): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.tokenId !== undefined && (obj.tokenId = message.tokenId);\n    message.liquidity !== undefined && (obj.liquidity = message.liquidity);\n    message.amount0Min !== undefined && (obj.amount0Min = message.amount0Min);\n    message.amount1Min !== undefined && (obj.amount1Min = message.amount1Min);\n    message.deadline !== undefined &&\n      (obj.deadline = (message.deadline || Long.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgDecreaseLiquidity>, I>>(\n    object: I\n  ): MsgDecreaseLiquidity {\n    const message = createBaseMsgDecreaseLiquidity();\n    message.creator = object.creator ?? \"\";\n    message.tokenId = object.tokenId ?? \"\";\n    message.liquidity = object.liquidity ?? \"\";\n    message.amount0Min = object.amount0Min ?? \"\";\n    message.amount1Min = object.amount1Min ?? \"\";\n    message.deadline =\n      object.deadline !== undefined && object.deadline !== null\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgDecreaseLiquidityResponse(): MsgDecreaseLiquidityResponse {\n  return {};\n}\n\nexport const MsgDecreaseLiquidityResponse = {\n  encode(\n    _: MsgDecreaseLiquidityResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgDecreaseLiquidityResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgDecreaseLiquidityResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgDecreaseLiquidityResponse {\n    return {};\n  },\n\n  toJSON(_: MsgDecreaseLiquidityResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgDecreaseLiquidityResponse>, I>>(\n    _: I\n  ): MsgDecreaseLiquidityResponse {\n    const message = createBaseMsgDecreaseLiquidityResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCollect(): MsgCollect {\n  return {\n    creator: \"\",\n    tokenId: \"\",\n    recipient: \"\",\n    amount0Max: \"\",\n    amount1Max: \"\",\n    collectOnly: false,\n  };\n}\n\nexport const MsgCollect = {\n  encode(\n    message: MsgCollect,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.tokenId !== \"\") {\n      writer.uint32(18).string(message.tokenId);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(26).string(message.recipient);\n    }\n    if (message.amount0Max !== \"\") {\n      writer.uint32(34).string(message.amount0Max);\n    }\n    if (message.amount1Max !== \"\") {\n      writer.uint32(42).string(message.amount1Max);\n    }\n    if (message.collectOnly === true) {\n      writer.uint32(48).bool(message.collectOnly);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCollect {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollect();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.tokenId = reader.string();\n          break;\n        case 3:\n          message.recipient = reader.string();\n          break;\n        case 4:\n          message.amount0Max = reader.string();\n          break;\n        case 5:\n          message.amount1Max = reader.string();\n          break;\n        case 6:\n          message.collectOnly = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCollect {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      tokenId: isSet(object.tokenId) ? String(object.tokenId) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      amount0Max: isSet(object.amount0Max) ? String(object.amount0Max) : \"\",\n      amount1Max: isSet(object.amount1Max) ? String(object.amount1Max) : \"\",\n      collectOnly: isSet(object.collectOnly)\n        ? Boolean(object.collectOnly)\n        : false,\n    };\n  },\n\n  toJSON(message: MsgCollect): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.tokenId !== undefined && (obj.tokenId = message.tokenId);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.amount0Max !== undefined && (obj.amount0Max = message.amount0Max);\n    message.amount1Max !== undefined && (obj.amount1Max = message.amount1Max);\n    message.collectOnly !== undefined &&\n      (obj.collectOnly = message.collectOnly);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollect>, I>>(\n    object: I\n  ): MsgCollect {\n    const message = createBaseMsgCollect();\n    message.creator = object.creator ?? \"\";\n    message.tokenId = object.tokenId ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.amount0Max = object.amount0Max ?? \"\";\n    message.amount1Max = object.amount1Max ?? \"\";\n    message.collectOnly = object.collectOnly ?? false;\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectResponse(): MsgCollectResponse {\n  return {};\n}\n\nexport const MsgCollectResponse = {\n  encode(\n    _: MsgCollectResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCollectResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCollectResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCollectResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectResponse>, I>>(\n    _: I\n  ): MsgCollectResponse {\n    const message = createBaseMsgCollectResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgSwapExactIn(): MsgSwapExactIn {\n  return {\n    creator: \"\",\n    recipient: \"\",\n    amountIn: \"\",\n    amountOutMin: \"\",\n    denoms: [],\n    fees: [],\n    deadline: Long.ZERO,\n  };\n}\n\nexport const MsgSwapExactIn = {\n  encode(\n    message: MsgSwapExactIn,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(18).string(message.recipient);\n    }\n    if (message.amountIn !== \"\") {\n      writer.uint32(26).string(message.amountIn);\n    }\n    if (message.amountOutMin !== \"\") {\n      writer.uint32(34).string(message.amountOutMin);\n    }\n    for (const v of message.denoms) {\n      writer.uint32(42).string(v!);\n    }\n    writer.uint32(50).fork();\n    for (const v of message.fees) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    if (!message.deadline.isZero()) {\n      writer.uint32(56).int64(message.deadline);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSwapExactIn {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSwapExactIn();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.recipient = reader.string();\n          break;\n        case 3:\n          message.amountIn = reader.string();\n          break;\n        case 4:\n          message.amountOutMin = reader.string();\n          break;\n        case 5:\n          message.denoms.push(reader.string());\n          break;\n        case 6:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.fees.push(reader.int32());\n            }\n          } else {\n            message.fees.push(reader.int32());\n          }\n          break;\n        case 7:\n          message.deadline = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSwapExactIn {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      amountIn: isSet(object.amountIn) ? String(object.amountIn) : \"\",\n      amountOutMin: isSet(object.amountOutMin)\n        ? String(object.amountOutMin)\n        : \"\",\n      denoms: Array.isArray(object?.denoms)\n        ? object.denoms.map((e: any) => String(e))\n        : [],\n      fees: Array.isArray(object?.fees)\n        ? object.fees.map((e: any) => Number(e))\n        : [],\n      deadline: isSet(object.deadline)\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: MsgSwapExactIn): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.amountIn !== undefined && (obj.amountIn = message.amountIn);\n    message.amountOutMin !== undefined &&\n      (obj.amountOutMin = message.amountOutMin);\n    if (message.denoms) {\n      obj.denoms = message.denoms.map((e) => e);\n    } else {\n      obj.denoms = [];\n    }\n    if (message.fees) {\n      obj.fees = message.fees.map((e) => Math.round(e));\n    } else {\n      obj.fees = [];\n    }\n    message.deadline !== undefined &&\n      (obj.deadline = (message.deadline || Long.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSwapExactIn>, I>>(\n    object: I\n  ): MsgSwapExactIn {\n    const message = createBaseMsgSwapExactIn();\n    message.creator = object.creator ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.amountIn = object.amountIn ?? \"\";\n    message.amountOutMin = object.amountOutMin ?? \"\";\n    message.denoms = object.denoms?.map((e) => e) || [];\n    message.fees = object.fees?.map((e) => e) || [];\n    message.deadline =\n      object.deadline !== undefined && object.deadline !== null\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgSwapExactInResponse(): MsgSwapExactInResponse {\n  return {};\n}\n\nexport const MsgSwapExactInResponse = {\n  encode(\n    _: MsgSwapExactInResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSwapExactInResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSwapExactInResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgSwapExactInResponse {\n    return {};\n  },\n\n  toJSON(_: MsgSwapExactInResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSwapExactInResponse>, I>>(\n    _: I\n  ): MsgSwapExactInResponse {\n    const message = createBaseMsgSwapExactInResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgSwapExactOut(): MsgSwapExactOut {\n  return {\n    creator: \"\",\n    recipient: \"\",\n    amountOut: \"\",\n    amountInMax: \"\",\n    denoms: [],\n    fees: [],\n    deadline: Long.ZERO,\n  };\n}\n\nexport const MsgSwapExactOut = {\n  encode(\n    message: MsgSwapExactOut,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(18).string(message.recipient);\n    }\n    if (message.amountOut !== \"\") {\n      writer.uint32(26).string(message.amountOut);\n    }\n    if (message.amountInMax !== \"\") {\n      writer.uint32(34).string(message.amountInMax);\n    }\n    for (const v of message.denoms) {\n      writer.uint32(42).string(v!);\n    }\n    writer.uint32(50).fork();\n    for (const v of message.fees) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    if (!message.deadline.isZero()) {\n      writer.uint32(56).int64(message.deadline);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSwapExactOut {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSwapExactOut();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.recipient = reader.string();\n          break;\n        case 3:\n          message.amountOut = reader.string();\n          break;\n        case 4:\n          message.amountInMax = reader.string();\n          break;\n        case 5:\n          message.denoms.push(reader.string());\n          break;\n        case 6:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.fees.push(reader.int32());\n            }\n          } else {\n            message.fees.push(reader.int32());\n          }\n          break;\n        case 7:\n          message.deadline = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSwapExactOut {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      amountOut: isSet(object.amountOut) ? String(object.amountOut) : \"\",\n      amountInMax: isSet(object.amountInMax) ? String(object.amountInMax) : \"\",\n      denoms: Array.isArray(object?.denoms)\n        ? object.denoms.map((e: any) => String(e))\n        : [],\n      fees: Array.isArray(object?.fees)\n        ? object.fees.map((e: any) => Number(e))\n        : [],\n      deadline: isSet(object.deadline)\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: MsgSwapExactOut): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.amountOut !== undefined && (obj.amountOut = message.amountOut);\n    message.amountInMax !== undefined &&\n      (obj.amountInMax = message.amountInMax);\n    if (message.denoms) {\n      obj.denoms = message.denoms.map((e) => e);\n    } else {\n      obj.denoms = [];\n    }\n    if (message.fees) {\n      obj.fees = message.fees.map((e) => Math.round(e));\n    } else {\n      obj.fees = [];\n    }\n    message.deadline !== undefined &&\n      (obj.deadline = (message.deadline || Long.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSwapExactOut>, I>>(\n    object: I\n  ): MsgSwapExactOut {\n    const message = createBaseMsgSwapExactOut();\n    message.creator = object.creator ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.amountOut = object.amountOut ?? \"\";\n    message.amountInMax = object.amountInMax ?? \"\";\n    message.denoms = object.denoms?.map((e) => e) || [];\n    message.fees = object.fees?.map((e) => e) || [];\n    message.deadline =\n      object.deadline !== undefined && object.deadline !== null\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgSwapExactOutResponse(): MsgSwapExactOutResponse {\n  return {};\n}\n\nexport const MsgSwapExactOutResponse = {\n  encode(\n    _: MsgSwapExactOutResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSwapExactOutResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSwapExactOutResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgSwapExactOutResponse {\n    return {};\n  },\n\n  toJSON(_: MsgSwapExactOutResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSwapExactOutResponse>, I>>(\n    _: I\n  ): MsgSwapExactOutResponse {\n    const message = createBaseMsgSwapExactOutResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgSetOperator(): MsgSetOperator {\n  return { creator: \"\", address: \"\", index: 0, operator: \"\" };\n}\n\nexport const MsgSetOperator = {\n  encode(\n    message: MsgSetOperator,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.address !== \"\") {\n      writer.uint32(18).string(message.address);\n    }\n    if (message.index !== 0) {\n      writer.uint32(24).uint32(message.index);\n    }\n    if (message.operator !== \"\") {\n      writer.uint32(34).string(message.operator);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetOperator {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSetOperator();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.address = reader.string();\n          break;\n        case 3:\n          message.index = reader.uint32();\n          break;\n        case 4:\n          message.operator = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSetOperator {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      address: isSet(object.address) ? String(object.address) : \"\",\n      index: isSet(object.index) ? Number(object.index) : 0,\n      operator: isSet(object.operator) ? String(object.operator) : \"\",\n    };\n  },\n\n  toJSON(message: MsgSetOperator): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.address !== undefined && (obj.address = message.address);\n    message.index !== undefined && (obj.index = Math.round(message.index));\n    message.operator !== undefined && (obj.operator = message.operator);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSetOperator>, I>>(\n    object: I\n  ): MsgSetOperator {\n    const message = createBaseMsgSetOperator();\n    message.creator = object.creator ?? \"\";\n    message.address = object.address ?? \"\";\n    message.index = object.index ?? 0;\n    message.operator = object.operator ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgSetOperatorResponse(): MsgSetOperatorResponse {\n  return {};\n}\n\nexport const MsgSetOperatorResponse = {\n  encode(\n    _: MsgSetOperatorResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSetOperatorResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSetOperatorResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgSetOperatorResponse {\n    return {};\n  },\n\n  toJSON(_: MsgSetOperatorResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSetOperatorResponse>, I>>(\n    _: I\n  ): MsgSetOperatorResponse {\n    const message = createBaseMsgSetOperatorResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgSetReward(): MsgSetReward {\n  return {\n    creator: \"\",\n    address: \"\",\n    index: 0,\n    denom: \"\",\n    rewardPerSecond: \"\",\n    mintable: false,\n    triggerTime: Long.ZERO,\n  };\n}\n\nexport const MsgSetReward = {\n  encode(\n    message: MsgSetReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.address !== \"\") {\n      writer.uint32(18).string(message.address);\n    }\n    if (message.index !== 0) {\n      writer.uint32(24).uint32(message.index);\n    }\n    if (message.denom !== \"\") {\n      writer.uint32(34).string(message.denom);\n    }\n    if (message.rewardPerSecond !== \"\") {\n      writer.uint32(42).string(message.rewardPerSecond);\n    }\n    if (message.mintable === true) {\n      writer.uint32(48).bool(message.mintable);\n    }\n    if (!message.triggerTime.isZero()) {\n      writer.uint32(56).int64(message.triggerTime);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSetReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.address = reader.string();\n          break;\n        case 3:\n          message.index = reader.uint32();\n          break;\n        case 4:\n          message.denom = reader.string();\n          break;\n        case 5:\n          message.rewardPerSecond = reader.string();\n          break;\n        case 6:\n          message.mintable = reader.bool();\n          break;\n        case 7:\n          message.triggerTime = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSetReward {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      address: isSet(object.address) ? String(object.address) : \"\",\n      index: isSet(object.index) ? Number(object.index) : 0,\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      rewardPerSecond: isSet(object.rewardPerSecond)\n        ? String(object.rewardPerSecond)\n        : \"\",\n      mintable: isSet(object.mintable) ? Boolean(object.mintable) : false,\n      triggerTime: isSet(object.triggerTime)\n        ? Long.fromValue(object.triggerTime)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: MsgSetReward): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.address !== undefined && (obj.address = message.address);\n    message.index !== undefined && (obj.index = Math.round(message.index));\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.rewardPerSecond !== undefined &&\n      (obj.rewardPerSecond = message.rewardPerSecond);\n    message.mintable !== undefined && (obj.mintable = message.mintable);\n    message.triggerTime !== undefined &&\n      (obj.triggerTime = (message.triggerTime || Long.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSetReward>, I>>(\n    object: I\n  ): MsgSetReward {\n    const message = createBaseMsgSetReward();\n    message.creator = object.creator ?? \"\";\n    message.address = object.address ?? \"\";\n    message.index = object.index ?? 0;\n    message.denom = object.denom ?? \"\";\n    message.rewardPerSecond = object.rewardPerSecond ?? \"\";\n    message.mintable = object.mintable ?? false;\n    message.triggerTime =\n      object.triggerTime !== undefined && object.triggerTime !== null\n        ? Long.fromValue(object.triggerTime)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgSetRewardResponse(): MsgSetRewardResponse {\n  return {};\n}\n\nexport const MsgSetRewardResponse = {\n  encode(\n    _: MsgSetRewardResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSetRewardResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSetRewardResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgSetRewardResponse {\n    return {};\n  },\n\n  toJSON(_: MsgSetRewardResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSetRewardResponse>, I>>(\n    _: I\n  ): MsgSetRewardResponse {\n    const message = createBaseMsgSetRewardResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectReward(): MsgCollectReward {\n  return { creator: \"\", tokenId: \"\", recipient: \"\", collectOnly: false };\n}\n\nexport const MsgCollectReward = {\n  encode(\n    message: MsgCollectReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.tokenId !== \"\") {\n      writer.uint32(18).string(message.tokenId);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(26).string(message.recipient);\n    }\n    if (message.collectOnly === true) {\n      writer.uint32(32).bool(message.collectOnly);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCollectReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.tokenId = reader.string();\n          break;\n        case 3:\n          message.recipient = reader.string();\n          break;\n        case 4:\n          message.collectOnly = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCollectReward {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      tokenId: isSet(object.tokenId) ? String(object.tokenId) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      collectOnly: isSet(object.collectOnly)\n        ? Boolean(object.collectOnly)\n        : false,\n    };\n  },\n\n  toJSON(message: MsgCollectReward): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.tokenId !== undefined && (obj.tokenId = message.tokenId);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.collectOnly !== undefined &&\n      (obj.collectOnly = message.collectOnly);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectReward>, I>>(\n    object: I\n  ): MsgCollectReward {\n    const message = createBaseMsgCollectReward();\n    message.creator = object.creator ?? \"\";\n    message.tokenId = object.tokenId ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.collectOnly = object.collectOnly ?? false;\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectRewardResponse(): MsgCollectRewardResponse {\n  return {};\n}\n\nexport const MsgCollectRewardResponse = {\n  encode(\n    _: MsgCollectRewardResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCollectRewardResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectRewardResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCollectRewardResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCollectRewardResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectRewardResponse>, I>>(\n    _: I\n  ): MsgCollectRewardResponse {\n    const message = createBaseMsgCollectRewardResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectFeeProtocol(): MsgCollectFeeProtocol {\n  return { creator: \"\", address: \"\" };\n}\n\nexport const MsgCollectFeeProtocol = {\n  encode(\n    message: MsgCollectFeeProtocol,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.address !== \"\") {\n      writer.uint32(18).string(message.address);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCollectFeeProtocol {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectFeeProtocol();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.address = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCollectFeeProtocol {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      address: isSet(object.address) ? String(object.address) : \"\",\n    };\n  },\n\n  toJSON(message: MsgCollectFeeProtocol): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.address !== undefined && (obj.address = message.address);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectFeeProtocol>, I>>(\n    object: I\n  ): MsgCollectFeeProtocol {\n    const message = createBaseMsgCollectFeeProtocol();\n    message.creator = object.creator ?? \"\";\n    message.address = object.address ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectFeeProtocolResponse(): MsgCollectFeeProtocolResponse {\n  return {};\n}\n\nexport const MsgCollectFeeProtocolResponse = {\n  encode(\n    _: MsgCollectFeeProtocolResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCollectFeeProtocolResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectFeeProtocolResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCollectFeeProtocolResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCollectFeeProtocolResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectFeeProtocolResponse>, I>>(\n    _: I\n  ): MsgCollectFeeProtocolResponse {\n    const message = createBaseMsgCollectFeeProtocolResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgGovBurn(): MsgGovBurn {\n  return { creator: \"\", amount: \"\" };\n}\n\nexport const MsgGovBurn = {\n  encode(\n    message: MsgGovBurn,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovBurn {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGovBurn();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.amount = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgGovBurn {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      amount: isSet(object.amount) ? String(object.amount) : \"\",\n    };\n  },\n\n  toJSON(message: MsgGovBurn): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGovBurn>, I>>(\n    object: I\n  ): MsgGovBurn {\n    const message = createBaseMsgGovBurn();\n    message.creator = object.creator ?? \"\";\n    message.amount = object.amount ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgGovBurnResponse(): MsgGovBurnResponse {\n  return {};\n}\n\nexport const MsgGovBurnResponse = {\n  encode(\n    _: MsgGovBurnResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovBurnResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGovBurnResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgGovBurnResponse {\n    return {};\n  },\n\n  toJSON(_: MsgGovBurnResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGovBurnResponse>, I>>(\n    _: I\n  ): MsgGovBurnResponse {\n    const message = createBaseMsgGovBurnResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgGovSwapExactIn(): MsgGovSwapExactIn {\n  return {\n    creator: \"\",\n    amountIn: \"\",\n    amountOutMin: \"\",\n    denoms: [],\n    fees: [],\n    deadline: Long.ZERO,\n  };\n}\n\nexport const MsgGovSwapExactIn = {\n  encode(\n    message: MsgGovSwapExactIn,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.amountIn !== \"\") {\n      writer.uint32(18).string(message.amountIn);\n    }\n    if (message.amountOutMin !== \"\") {\n      writer.uint32(26).string(message.amountOutMin);\n    }\n    for (const v of message.denoms) {\n      writer.uint32(34).string(v!);\n    }\n    writer.uint32(42).fork();\n    for (const v of message.fees) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    if (!message.deadline.isZero()) {\n      writer.uint32(48).int64(message.deadline);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovSwapExactIn {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGovSwapExactIn();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.amountIn = reader.string();\n          break;\n        case 3:\n          message.amountOutMin = reader.string();\n          break;\n        case 4:\n          message.denoms.push(reader.string());\n          break;\n        case 5:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.fees.push(reader.int32());\n            }\n          } else {\n            message.fees.push(reader.int32());\n          }\n          break;\n        case 6:\n          message.deadline = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgGovSwapExactIn {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      amountIn: isSet(object.amountIn) ? String(object.amountIn) : \"\",\n      amountOutMin: isSet(object.amountOutMin)\n        ? String(object.amountOutMin)\n        : \"\",\n      denoms: Array.isArray(object?.denoms)\n        ? object.denoms.map((e: any) => String(e))\n        : [],\n      fees: Array.isArray(object?.fees)\n        ? object.fees.map((e: any) => Number(e))\n        : [],\n      deadline: isSet(object.deadline)\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: MsgGovSwapExactIn): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.amountIn !== undefined && (obj.amountIn = message.amountIn);\n    message.amountOutMin !== undefined &&\n      (obj.amountOutMin = message.amountOutMin);\n    if (message.denoms) {\n      obj.denoms = message.denoms.map((e) => e);\n    } else {\n      obj.denoms = [];\n    }\n    if (message.fees) {\n      obj.fees = message.fees.map((e) => Math.round(e));\n    } else {\n      obj.fees = [];\n    }\n    message.deadline !== undefined &&\n      (obj.deadline = (message.deadline || Long.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGovSwapExactIn>, I>>(\n    object: I\n  ): MsgGovSwapExactIn {\n    const message = createBaseMsgGovSwapExactIn();\n    message.creator = object.creator ?? \"\";\n    message.amountIn = object.amountIn ?? \"\";\n    message.amountOutMin = object.amountOutMin ?? \"\";\n    message.denoms = object.denoms?.map((e) => e) || [];\n    message.fees = object.fees?.map((e) => e) || [];\n    message.deadline =\n      object.deadline !== undefined && object.deadline !== null\n        ? Long.fromValue(object.deadline)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgGovSwapExactInResponse(): MsgGovSwapExactInResponse {\n  return {};\n}\n\nexport const MsgGovSwapExactInResponse = {\n  encode(\n    _: MsgGovSwapExactInResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgGovSwapExactInResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGovSwapExactInResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgGovSwapExactInResponse {\n    return {};\n  },\n\n  toJSON(_: MsgGovSwapExactInResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGovSwapExactInResponse>, I>>(\n    _: I\n  ): MsgGovSwapExactInResponse {\n    const message = createBaseMsgGovSwapExactInResponse();\n    return message;\n  },\n};\n\n/** Msg defines the Msg service. */\nexport interface Msg {\n  CreatePool(\n    request: DeepPartial<MsgCreatePool>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreatePoolResponse>;\n  CreatePosition(\n    request: DeepPartial<MsgCreatePosition>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreatePositionResponse>;\n  IncreaseLiquidity(\n    request: DeepPartial<MsgIncreaseLiquidity>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgIncreaseLiquidityResponse>;\n  DecreaseLiquidity(\n    request: DeepPartial<MsgDecreaseLiquidity>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgDecreaseLiquidityResponse>;\n  Collect(\n    request: DeepPartial<MsgCollect>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectResponse>;\n  SwapExactIn(\n    request: DeepPartial<MsgSwapExactIn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSwapExactInResponse>;\n  SwapExactOut(\n    request: DeepPartial<MsgSwapExactOut>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSwapExactOutResponse>;\n  SetOperator(\n    request: DeepPartial<MsgSetOperator>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSetOperatorResponse>;\n  SetReward(\n    request: DeepPartial<MsgSetReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSetRewardResponse>;\n  CollectReward(\n    request: DeepPartial<MsgCollectReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectRewardResponse>;\n  CollectFeeProtocol(\n    request: DeepPartial<MsgCollectFeeProtocol>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectFeeProtocolResponse>;\n  GovBurn(\n    request: DeepPartial<MsgGovBurn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGovBurnResponse>;\n  /** this line is used by starport scaffolding # proto/tx/rpc */\n  GovSwapExactIn(\n    request: DeepPartial<MsgGovSwapExactIn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGovSwapExactInResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.CreatePool = this.CreatePool.bind(this);\n    this.CreatePosition = this.CreatePosition.bind(this);\n    this.IncreaseLiquidity = this.IncreaseLiquidity.bind(this);\n    this.DecreaseLiquidity = this.DecreaseLiquidity.bind(this);\n    this.Collect = this.Collect.bind(this);\n    this.SwapExactIn = this.SwapExactIn.bind(this);\n    this.SwapExactOut = this.SwapExactOut.bind(this);\n    this.SetOperator = this.SetOperator.bind(this);\n    this.SetReward = this.SetReward.bind(this);\n    this.CollectReward = this.CollectReward.bind(this);\n    this.CollectFeeProtocol = this.CollectFeeProtocol.bind(this);\n    this.GovBurn = this.GovBurn.bind(this);\n    this.GovSwapExactIn = this.GovSwapExactIn.bind(this);\n  }\n\n  CreatePool(\n    request: DeepPartial<MsgCreatePool>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreatePoolResponse> {\n    return this.rpc.unary(\n      MsgCreatePoolDesc,\n      MsgCreatePool.fromPartial(request),\n      metadata\n    );\n  }\n\n  CreatePosition(\n    request: DeepPartial<MsgCreatePosition>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreatePositionResponse> {\n    return this.rpc.unary(\n      MsgCreatePositionDesc,\n      MsgCreatePosition.fromPartial(request),\n      metadata\n    );\n  }\n\n  IncreaseLiquidity(\n    request: DeepPartial<MsgIncreaseLiquidity>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgIncreaseLiquidityResponse> {\n    return this.rpc.unary(\n      MsgIncreaseLiquidityDesc,\n      MsgIncreaseLiquidity.fromPartial(request),\n      metadata\n    );\n  }\n\n  DecreaseLiquidity(\n    request: DeepPartial<MsgDecreaseLiquidity>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgDecreaseLiquidityResponse> {\n    return this.rpc.unary(\n      MsgDecreaseLiquidityDesc,\n      MsgDecreaseLiquidity.fromPartial(request),\n      metadata\n    );\n  }\n\n  Collect(\n    request: DeepPartial<MsgCollect>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectResponse> {\n    return this.rpc.unary(\n      MsgCollectDesc,\n      MsgCollect.fromPartial(request),\n      metadata\n    );\n  }\n\n  SwapExactIn(\n    request: DeepPartial<MsgSwapExactIn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSwapExactInResponse> {\n    return this.rpc.unary(\n      MsgSwapExactInDesc,\n      MsgSwapExactIn.fromPartial(request),\n      metadata\n    );\n  }\n\n  SwapExactOut(\n    request: DeepPartial<MsgSwapExactOut>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSwapExactOutResponse> {\n    return this.rpc.unary(\n      MsgSwapExactOutDesc,\n      MsgSwapExactOut.fromPartial(request),\n      metadata\n    );\n  }\n\n  SetOperator(\n    request: DeepPartial<MsgSetOperator>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSetOperatorResponse> {\n    return this.rpc.unary(\n      MsgSetOperatorDesc,\n      MsgSetOperator.fromPartial(request),\n      metadata\n    );\n  }\n\n  SetReward(\n    request: DeepPartial<MsgSetReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSetRewardResponse> {\n    return this.rpc.unary(\n      MsgSetRewardDesc,\n      MsgSetReward.fromPartial(request),\n      metadata\n    );\n  }\n\n  CollectReward(\n    request: DeepPartial<MsgCollectReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectRewardResponse> {\n    return this.rpc.unary(\n      MsgCollectRewardDesc,\n      MsgCollectReward.fromPartial(request),\n      metadata\n    );\n  }\n\n  CollectFeeProtocol(\n    request: DeepPartial<MsgCollectFeeProtocol>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectFeeProtocolResponse> {\n    return this.rpc.unary(\n      MsgCollectFeeProtocolDesc,\n      MsgCollectFeeProtocol.fromPartial(request),\n      metadata\n    );\n  }\n\n  GovBurn(\n    request: DeepPartial<MsgGovBurn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGovBurnResponse> {\n    return this.rpc.unary(\n      MsgGovBurnDesc,\n      MsgGovBurn.fromPartial(request),\n      metadata\n    );\n  }\n\n  GovSwapExactIn(\n    request: DeepPartial<MsgGovSwapExactIn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGovSwapExactInResponse> {\n    return this.rpc.unary(\n      MsgGovSwapExactInDesc,\n      MsgGovSwapExactIn.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"sophonlabs.sophon.swap.Msg\",\n};\n\nexport const MsgCreatePoolDesc: UnaryMethodDefinitionish = {\n  methodName: \"CreatePool\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCreatePool.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCreatePoolResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCreatePositionDesc: UnaryMethodDefinitionish = {\n  methodName: \"CreatePosition\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCreatePosition.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCreatePositionResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgIncreaseLiquidityDesc: UnaryMethodDefinitionish = {\n  methodName: \"IncreaseLiquidity\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgIncreaseLiquidity.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgIncreaseLiquidityResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgDecreaseLiquidityDesc: UnaryMethodDefinitionish = {\n  methodName: \"DecreaseLiquidity\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgDecreaseLiquidity.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgDecreaseLiquidityResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCollectDesc: UnaryMethodDefinitionish = {\n  methodName: \"Collect\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCollect.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCollectResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgSwapExactInDesc: UnaryMethodDefinitionish = {\n  methodName: \"SwapExactIn\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSwapExactIn.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSwapExactInResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgSwapExactOutDesc: UnaryMethodDefinitionish = {\n  methodName: \"SwapExactOut\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSwapExactOut.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSwapExactOutResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgSetOperatorDesc: UnaryMethodDefinitionish = {\n  methodName: \"SetOperator\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSetOperator.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSetOperatorResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgSetRewardDesc: UnaryMethodDefinitionish = {\n  methodName: \"SetReward\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSetReward.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSetRewardResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCollectRewardDesc: UnaryMethodDefinitionish = {\n  methodName: \"CollectReward\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCollectReward.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCollectRewardResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCollectFeeProtocolDesc: UnaryMethodDefinitionish = {\n  methodName: \"CollectFeeProtocol\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCollectFeeProtocol.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCollectFeeProtocolResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgGovBurnDesc: UnaryMethodDefinitionish = {\n  methodName: \"GovBurn\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgGovBurn.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgGovBurnResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgGovSwapExactInDesc: UnaryMethodDefinitionish = {\n  methodName: \"GovSwapExactIn\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgGovSwapExactIn.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgGovSwapExactInResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import {\n  MsgCollect as MsgCollect_pb,\n  MsgCollectReward as MsgCollectReward_pb,\n  MsgCreatePool as MsgCreatePool_pb,\n  MsgCreatePosition as MsgCreatePosition_pb,\n  MsgDecreaseLiquidity as MsgDecreaseLiquidity_pb,\n  MsgIncreaseLiquidity as MsgIncreaseLiquidity_pb,\n  MsgSwapExactIn as MsgSwapExactIn_pb,\n  MsgSwapExactOut as MsgSwapExactOut_pb,\n  protobufPackage,\n} from \"../proto/swap/tx\";\nimport { BaseMsg } from \"./BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\n\nexport class MsgCollectReward extends BaseMsg {\n  public protoMsg: MsgCollectReward_pb;\n  constructor(msg: MsgCollectReward_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreatePool.typeUrl,\n      value: MsgCollectReward_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCollectReward {\n  export const typeUrl: string = `/${protobufPackage}.MsgCollectReward`;\n  export const Proto = MsgCollectReward_pb;\n  export interface Proto extends MsgCollectReward_pb {}\n}\n\nexport class MsgSwapExactOut extends BaseMsg {\n  public protoMsg: MsgSwapExactOut_pb;\n  constructor(msg: MsgSwapExactOut_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgSwapExactOut.typeUrl,\n      value: MsgSwapExactOut_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgSwapExactOut {\n  export const typeUrl: string = `/${protobufPackage}.MsgSwapExactOut`;\n  export const Proto = MsgSwapExactOut_pb;\n  export interface Proto extends MsgSwapExactOut_pb {}\n}\n\nexport class MsgSwapExactIn extends BaseMsg {\n  public protoMsg: MsgSwapExactIn_pb;\n  constructor(msg: MsgSwapExactIn_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreatePool.typeUrl,\n      value: MsgSwapExactIn_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgSwapExactIn {\n  export const typeUrl: string = `/${protobufPackage}.MsgSwapExactIn`;\n  export const Proto = MsgSwapExactIn_pb;\n  export interface Proto extends MsgSwapExactIn_pb {}\n}\n\nexport class MsgCreatePool extends BaseMsg {\n  public protoMsg: MsgCreatePool_pb;\n  constructor(msg: MsgCreatePool_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreatePool.typeUrl,\n      value: MsgCreatePool_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCreatePool {\n  export const typeUrl: string = `/${protobufPackage}.MsgCreatePool`;\n  export const Proto = MsgCreatePool_pb;\n  export interface Proto extends MsgCreatePool_pb {}\n}\n\nexport class MsgCollect extends BaseMsg {\n  public protoMsg: MsgCollect_pb;\n  constructor(msg: MsgCollect_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCollect.typeUrl,\n      value: MsgCollect_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCollect {\n  export const typeUrl: string = `/${protobufPackage}.MsgCollect`;\n  export const Proto = MsgCollect_pb;\n  export interface Proto extends MsgCollect_pb {}\n}\n\nexport class MsgCreatePosition extends BaseMsg {\n  public protoMsg: MsgCreatePosition_pb;\n  constructor(msg: MsgCreatePosition_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreatePosition.typeUrl,\n      value: MsgCreatePosition_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCreatePosition {\n  export const typeUrl: string = `/${protobufPackage}.MsgCreatePosition`;\n  export const Proto = MsgCreatePosition_pb;\n  export interface Proto extends MsgCreatePosition_pb {}\n}\n\nexport class MsgDecreaseLiquidity extends BaseMsg {\n  public protoMsg: MsgDecreaseLiquidity_pb;\n  constructor(msg: MsgDecreaseLiquidity_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgDecreaseLiquidity.typeUrl,\n      value: MsgDecreaseLiquidity_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgDecreaseLiquidity {\n  export const typeUrl: string = `/${protobufPackage}.MsgDecreaseLiquidity`;\n  export const Proto = MsgDecreaseLiquidity_pb;\n  export interface Proto extends MsgDecreaseLiquidity_pb {}\n}\n\nexport class MsgIncreaseLiquidity extends BaseMsg {\n  public protoMsg: MsgIncreaseLiquidity_pb;\n  constructor(msg: MsgIncreaseLiquidity_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgIncreaseLiquidity.typeUrl,\n      value: MsgIncreaseLiquidity_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgIncreaseLiquidity {\n  export const typeUrl: string = `/${protobufPackage}.MsgIncreaseLiquidity`;\n  export const Proto = MsgIncreaseLiquidity_pb;\n  export interface Proto extends MsgIncreaseLiquidity_pb {}\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"google.protobuf\";\n\n/**\n * `Any` contains an arbitrary serialized protocol buffer message along with a\n * URL that describes the type of the serialized message.\n *\n * Protobuf library provides support to pack/unpack Any values in the form\n * of utility functions or additional generated methods of the Any type.\n *\n * Example 1: Pack and unpack a message in C++.\n *\n *     Foo foo = ...;\n *     Any any;\n *     any.PackFrom(foo);\n *     ...\n *     if (any.UnpackTo(&foo)) {\n *       ...\n *     }\n *\n * Example 2: Pack and unpack a message in Java.\n *\n *     Foo foo = ...;\n *     Any any = Any.pack(foo);\n *     ...\n *     if (any.is(Foo.class)) {\n *       foo = any.unpack(Foo.class);\n *     }\n *\n *  Example 3: Pack and unpack a message in Python.\n *\n *     foo = Foo(...)\n *     any = Any()\n *     any.Pack(foo)\n *     ...\n *     if any.Is(Foo.DESCRIPTOR):\n *       any.Unpack(foo)\n *       ...\n *\n *  Example 4: Pack and unpack a message in Go\n *\n *      foo := &pb.Foo{...}\n *      any, err := ptypes.MarshalAny(foo)\n *      ...\n *      foo := &pb.Foo{}\n *      if err := ptypes.UnmarshalAny(any, foo); err != nil {\n *        ...\n *      }\n *\n * The pack methods provided by protobuf library will by default use\n * 'type.googleapis.com/full.type.name' as the type URL and the unpack\n * methods only use the fully qualified type name after the last '/'\n * in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n * name \"y.z\".\n *\n *\n * JSON\n * ====\n * The JSON representation of an `Any` value uses the regular\n * representation of the deserialized, embedded message, with an\n * additional field `@type` which contains the type URL. Example:\n *\n *     package google.profile;\n *     message Person {\n *       string first_name = 1;\n *       string last_name = 2;\n *     }\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.profile.Person\",\n *       \"firstName\": <string>,\n *       \"lastName\": <string>\n *     }\n *\n * If the embedded message type is well-known and has a custom JSON\n * representation, that representation will be embedded adding a field\n * `value` which holds the custom JSON in addition to the `@type`\n * field. Example (for message [google.protobuf.Duration][]):\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n *       \"value\": \"1.212s\"\n *     }\n */\nexport interface Any {\n  /**\n   * A URL/resource name that uniquely identifies the type of the serialized\n   * protocol buffer message. This string must contain at least\n   * one \"/\" character. The last segment of the URL's path must represent\n   * the fully qualified name of the type (as in\n   * `path/google.protobuf.Duration`). The name should be in a canonical form\n   * (e.g., leading \".\" is not accepted).\n   *\n   * In practice, teams usually precompile into the binary all types that they\n   * expect it to use in the context of Any. However, for URLs which use the\n   * scheme `http`, `https`, or no scheme, one can optionally set up a type\n   * server that maps type URLs to message definitions as follows:\n   *\n   * * If no scheme is provided, `https` is assumed.\n   * * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   *   value in binary format, or produce an error.\n   * * Applications are allowed to cache lookup results based on the\n   *   URL, or have them precompiled into a binary to avoid any\n   *   lookup. Therefore, binary compatibility needs to be preserved\n   *   on changes to types. (Use versioned type names to manage\n   *   breaking changes.)\n   *\n   * Note: this functionality is not currently available in the official\n   * protobuf release, and it is not used for type URLs beginning with\n   * type.googleapis.com.\n   *\n   * Schemes other than `http`, `https` (or the empty scheme) might be\n   * used with implementation specific semantics.\n   */\n  typeUrl: string;\n  /** Must be a valid serialized protocol buffer of the above specified type. */\n  value: Uint8Array;\n}\n\nfunction createBaseAny(): Any {\n  return { typeUrl: \"\", value: new Uint8Array() };\n}\n\nexport const Any = {\n  encode(message: Any, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.typeUrl !== \"\") {\n      writer.uint32(10).string(message.typeUrl);\n    }\n    if (message.value.length !== 0) {\n      writer.uint32(18).bytes(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Any {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAny();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.typeUrl = reader.string();\n          break;\n        case 2:\n          message.value = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Any {\n    return {\n      typeUrl: isSet(object.typeUrl) ? String(object.typeUrl) : \"\",\n      value: isSet(object.value)\n        ? bytesFromBase64(object.value)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: Any): unknown {\n    const obj: any = {};\n    message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);\n    message.value !== undefined &&\n      (obj.value = base64FromBytes(\n        message.value !== undefined ? message.value : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Any>, I>>(object: I): Any {\n    const message = createBaseAny();\n    message.typeUrl = object.typeUrl ?? \"\";\n    message.value = object.value ?? new Uint8Array();\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"cosmos.crypto.secp256k1\";\n\n/**\n * PubKey defines a secp256k1 public key\n * Key is the compressed form of the pubkey. The first byte depends is a 0x02\n * byte if the y-coordinate is the lexicographically largest of the two\n * associated with the x-coordinate. Otherwise the first byte is a 0x03. This\n * prefix is followed with the x-coordinate.\n */\nexport interface PubKey {\n  key: Uint8Array;\n}\n\n/** PrivKey defines a secp256k1 private key. */\nexport interface PrivKey {\n  key: Uint8Array;\n}\n\nfunction createBasePubKey(): PubKey {\n  return { key: new Uint8Array() };\n}\n\nexport const PubKey = {\n  encode(\n    message: PubKey,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): PubKey {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePubKey();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): PubKey {\n    return {\n      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: PubKey): unknown {\n    const obj: any = {};\n    message.key !== undefined &&\n      (obj.key = base64FromBytes(\n        message.key !== undefined ? message.key : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<PubKey>, I>>(object: I): PubKey {\n    const message = createBasePubKey();\n    message.key = object.key ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBasePrivKey(): PrivKey {\n  return { key: new Uint8Array() };\n}\n\nexport const PrivKey = {\n  encode(\n    message: PrivKey,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): PrivKey {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePrivKey();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): PrivKey {\n    return {\n      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: PrivKey): unknown {\n    const obj: any = {};\n    message.key !== undefined &&\n      (obj.key = base64FromBytes(\n        message.key !== undefined ? message.key : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<PrivKey>, I>>(object: I): PrivKey {\n    const message = createBasePrivKey();\n    message.key = object.key ?? new Uint8Array();\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"cosmos.crypto.multisig.v1beta1\";\n\n/**\n * MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.\n * See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers\n * signed and with which modes.\n */\nexport interface MultiSignature {\n  signatures: Uint8Array[];\n}\n\n/**\n * CompactBitArray is an implementation of a space efficient bit array.\n * This is used to ensure that the encoded data takes up a minimal amount of\n * space after proto encoding.\n * This is not thread safe, and is not intended for concurrent usage.\n */\nexport interface CompactBitArray {\n  extraBitsStored: number;\n  elems: Uint8Array;\n}\n\nfunction createBaseMultiSignature(): MultiSignature {\n  return { signatures: [] };\n}\n\nexport const MultiSignature = {\n  encode(\n    message: MultiSignature,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.signatures) {\n      writer.uint32(10).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MultiSignature {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMultiSignature();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MultiSignature {\n    return {\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) => bytesFromBase64(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MultiSignature): unknown {\n    const obj: any = {};\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        base64FromBytes(e !== undefined ? e : new Uint8Array())\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MultiSignature>, I>>(\n    object: I\n  ): MultiSignature {\n    const message = createBaseMultiSignature();\n    message.signatures = object.signatures?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseCompactBitArray(): CompactBitArray {\n  return { extraBitsStored: 0, elems: new Uint8Array() };\n}\n\nexport const CompactBitArray = {\n  encode(\n    message: CompactBitArray,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.extraBitsStored !== 0) {\n      writer.uint32(8).uint32(message.extraBitsStored);\n    }\n    if (message.elems.length !== 0) {\n      writer.uint32(18).bytes(message.elems);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): CompactBitArray {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCompactBitArray();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.extraBitsStored = reader.uint32();\n          break;\n        case 2:\n          message.elems = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): CompactBitArray {\n    return {\n      extraBitsStored: isSet(object.extraBitsStored)\n        ? Number(object.extraBitsStored)\n        : 0,\n      elems: isSet(object.elems)\n        ? bytesFromBase64(object.elems)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: CompactBitArray): unknown {\n    const obj: any = {};\n    message.extraBitsStored !== undefined &&\n      (obj.extraBitsStored = Math.round(message.extraBitsStored));\n    message.elems !== undefined &&\n      (obj.elems = base64FromBytes(\n        message.elems !== undefined ? message.elems : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<CompactBitArray>, I>>(\n    object: I\n  ): CompactBitArray {\n    const message = createBaseCompactBitArray();\n    message.extraBitsStored = object.extraBitsStored ?? 0;\n    message.elems = object.elems ?? new Uint8Array();\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../../google/protobuf/any\";\nimport { CompactBitArray } from \"../../../crypto/multisig/v1beta1/multisig\";\n\nexport const protobufPackage = \"cosmos.tx.signing.v1beta1\";\n\n/** SignMode represents a signing mode with its own security guarantees. */\nexport enum SignMode {\n  /**\n   * SIGN_MODE_UNSPECIFIED - SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\n   * rejected\n   */\n  SIGN_MODE_UNSPECIFIED = 0,\n  /**\n   * SIGN_MODE_DIRECT - SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\n   * verified with raw bytes from Tx\n   */\n  SIGN_MODE_DIRECT = 1,\n  /**\n   * SIGN_MODE_TEXTUAL - SIGN_MODE_TEXTUAL is a future signing mode that will verify some\n   * human-readable textual representation on top of the binary representation\n   * from SIGN_MODE_DIRECT\n   */\n  SIGN_MODE_TEXTUAL = 2,\n  /**\n   * SIGN_MODE_LEGACY_AMINO_JSON - SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\n   * Amino JSON and will be removed in the future\n   */\n  SIGN_MODE_LEGACY_AMINO_JSON = 127,\n  UNRECOGNIZED = -1,\n}\n\nexport function signModeFromJSON(object: any): SignMode {\n  switch (object) {\n    case 0:\n    case \"SIGN_MODE_UNSPECIFIED\":\n      return SignMode.SIGN_MODE_UNSPECIFIED;\n    case 1:\n    case \"SIGN_MODE_DIRECT\":\n      return SignMode.SIGN_MODE_DIRECT;\n    case 2:\n    case \"SIGN_MODE_TEXTUAL\":\n      return SignMode.SIGN_MODE_TEXTUAL;\n    case 127:\n    case \"SIGN_MODE_LEGACY_AMINO_JSON\":\n      return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return SignMode.UNRECOGNIZED;\n  }\n}\n\nexport function signModeToJSON(object: SignMode): string {\n  switch (object) {\n    case SignMode.SIGN_MODE_UNSPECIFIED:\n      return \"SIGN_MODE_UNSPECIFIED\";\n    case SignMode.SIGN_MODE_DIRECT:\n      return \"SIGN_MODE_DIRECT\";\n    case SignMode.SIGN_MODE_TEXTUAL:\n      return \"SIGN_MODE_TEXTUAL\";\n    case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:\n      return \"SIGN_MODE_LEGACY_AMINO_JSON\";\n    case SignMode.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n\n/** SignatureDescriptors wraps multiple SignatureDescriptor's. */\nexport interface SignatureDescriptors {\n  /** signatures are the signature descriptors */\n  signatures: SignatureDescriptor[];\n}\n\n/**\n * SignatureDescriptor is a convenience type which represents the full data for\n * a signature including the public key of the signer, signing modes and the\n * signature itself. It is primarily used for coordinating signatures between\n * clients.\n */\nexport interface SignatureDescriptor {\n  /** public_key is the public key of the signer */\n  publicKey?: Any;\n  data?: SignatureDescriptor_Data;\n  /**\n   * sequence is the sequence of the account, which describes the\n   * number of committed transactions signed by a given address. It is used to\n   * prevent replay attacks.\n   */\n  sequence: Long;\n}\n\n/** Data represents signature data */\nexport interface SignatureDescriptor_Data {\n  /** single represents a single signer */\n  single?: SignatureDescriptor_Data_Single | undefined;\n  /** multi represents a multisig signer */\n  multi?: SignatureDescriptor_Data_Multi | undefined;\n}\n\n/** Single is the signature data for a single signer */\nexport interface SignatureDescriptor_Data_Single {\n  /** mode is the signing mode of the single signer */\n  mode: SignMode;\n  /** signature is the raw signature bytes */\n  signature: Uint8Array;\n}\n\n/** Multi is the signature data for a multisig public key */\nexport interface SignatureDescriptor_Data_Multi {\n  /** bitarray specifies which keys within the multisig are signing */\n  bitarray?: CompactBitArray;\n  /** signatures is the signatures of the multi-signature */\n  signatures: SignatureDescriptor_Data[];\n}\n\nfunction createBaseSignatureDescriptors(): SignatureDescriptors {\n  return { signatures: [] };\n}\n\nexport const SignatureDescriptors = {\n  encode(\n    message: SignatureDescriptors,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.signatures) {\n      SignatureDescriptor.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): SignatureDescriptors {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptors();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signatures.push(\n            SignatureDescriptor.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptors {\n    return {\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) => SignatureDescriptor.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: SignatureDescriptors): unknown {\n    const obj: any = {};\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        e ? SignatureDescriptor.toJSON(e) : undefined\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptors>, I>>(\n    object: I\n  ): SignatureDescriptors {\n    const message = createBaseSignatureDescriptors();\n    message.signatures =\n      object.signatures?.map((e) => SignatureDescriptor.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseSignatureDescriptor(): SignatureDescriptor {\n  return { publicKey: undefined, data: undefined, sequence: Long.UZERO };\n}\n\nexport const SignatureDescriptor = {\n  encode(\n    message: SignatureDescriptor,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.publicKey !== undefined) {\n      Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.data !== undefined) {\n      SignatureDescriptor_Data.encode(\n        message.data,\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SignatureDescriptor {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptor();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.publicKey = Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.data = SignatureDescriptor_Data.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        case 3:\n          message.sequence = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptor {\n    return {\n      publicKey: isSet(object.publicKey)\n        ? Any.fromJSON(object.publicKey)\n        : undefined,\n      data: isSet(object.data)\n        ? SignatureDescriptor_Data.fromJSON(object.data)\n        : undefined,\n      sequence: isSet(object.sequence)\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: SignatureDescriptor): unknown {\n    const obj: any = {};\n    message.publicKey !== undefined &&\n      (obj.publicKey = message.publicKey\n        ? Any.toJSON(message.publicKey)\n        : undefined);\n    message.data !== undefined &&\n      (obj.data = message.data\n        ? SignatureDescriptor_Data.toJSON(message.data)\n        : undefined);\n    message.sequence !== undefined &&\n      (obj.sequence = (message.sequence || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptor>, I>>(\n    object: I\n  ): SignatureDescriptor {\n    const message = createBaseSignatureDescriptor();\n    message.publicKey =\n      object.publicKey !== undefined && object.publicKey !== null\n        ? Any.fromPartial(object.publicKey)\n        : undefined;\n    message.data =\n      object.data !== undefined && object.data !== null\n        ? SignatureDescriptor_Data.fromPartial(object.data)\n        : undefined;\n    message.sequence =\n      object.sequence !== undefined && object.sequence !== null\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseSignatureDescriptor_Data(): SignatureDescriptor_Data {\n  return { single: undefined, multi: undefined };\n}\n\nexport const SignatureDescriptor_Data = {\n  encode(\n    message: SignatureDescriptor_Data,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.single !== undefined) {\n      SignatureDescriptor_Data_Single.encode(\n        message.single,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    if (message.multi !== undefined) {\n      SignatureDescriptor_Data_Multi.encode(\n        message.multi,\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): SignatureDescriptor_Data {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptor_Data();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.single = SignatureDescriptor_Data_Single.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        case 2:\n          message.multi = SignatureDescriptor_Data_Multi.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptor_Data {\n    return {\n      single: isSet(object.single)\n        ? SignatureDescriptor_Data_Single.fromJSON(object.single)\n        : undefined,\n      multi: isSet(object.multi)\n        ? SignatureDescriptor_Data_Multi.fromJSON(object.multi)\n        : undefined,\n    };\n  },\n\n  toJSON(message: SignatureDescriptor_Data): unknown {\n    const obj: any = {};\n    message.single !== undefined &&\n      (obj.single = message.single\n        ? SignatureDescriptor_Data_Single.toJSON(message.single)\n        : undefined);\n    message.multi !== undefined &&\n      (obj.multi = message.multi\n        ? SignatureDescriptor_Data_Multi.toJSON(message.multi)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptor_Data>, I>>(\n    object: I\n  ): SignatureDescriptor_Data {\n    const message = createBaseSignatureDescriptor_Data();\n    message.single =\n      object.single !== undefined && object.single !== null\n        ? SignatureDescriptor_Data_Single.fromPartial(object.single)\n        : undefined;\n    message.multi =\n      object.multi !== undefined && object.multi !== null\n        ? SignatureDescriptor_Data_Multi.fromPartial(object.multi)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseSignatureDescriptor_Data_Single(): SignatureDescriptor_Data_Single {\n  return { mode: 0, signature: new Uint8Array() };\n}\n\nexport const SignatureDescriptor_Data_Single = {\n  encode(\n    message: SignatureDescriptor_Data_Single,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.mode !== 0) {\n      writer.uint32(8).int32(message.mode);\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(18).bytes(message.signature);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): SignatureDescriptor_Data_Single {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptor_Data_Single();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.mode = reader.int32() as any;\n          break;\n        case 2:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptor_Data_Single {\n    return {\n      mode: isSet(object.mode) ? signModeFromJSON(object.mode) : 0,\n      signature: isSet(object.signature)\n        ? bytesFromBase64(object.signature)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: SignatureDescriptor_Data_Single): unknown {\n    const obj: any = {};\n    message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));\n    message.signature !== undefined &&\n      (obj.signature = base64FromBytes(\n        message.signature !== undefined ? message.signature : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptor_Data_Single>, I>>(\n    object: I\n  ): SignatureDescriptor_Data_Single {\n    const message = createBaseSignatureDescriptor_Data_Single();\n    message.mode = object.mode ?? 0;\n    message.signature = object.signature ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseSignatureDescriptor_Data_Multi(): SignatureDescriptor_Data_Multi {\n  return { bitarray: undefined, signatures: [] };\n}\n\nexport const SignatureDescriptor_Data_Multi = {\n  encode(\n    message: SignatureDescriptor_Data_Multi,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.bitarray !== undefined) {\n      CompactBitArray.encode(\n        message.bitarray,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    for (const v of message.signatures) {\n      SignatureDescriptor_Data.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): SignatureDescriptor_Data_Multi {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptor_Data_Multi();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bitarray = CompactBitArray.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.signatures.push(\n            SignatureDescriptor_Data.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptor_Data_Multi {\n    return {\n      bitarray: isSet(object.bitarray)\n        ? CompactBitArray.fromJSON(object.bitarray)\n        : undefined,\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) =>\n            SignatureDescriptor_Data.fromJSON(e)\n          )\n        : [],\n    };\n  },\n\n  toJSON(message: SignatureDescriptor_Data_Multi): unknown {\n    const obj: any = {};\n    message.bitarray !== undefined &&\n      (obj.bitarray = message.bitarray\n        ? CompactBitArray.toJSON(message.bitarray)\n        : undefined);\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        e ? SignatureDescriptor_Data.toJSON(e) : undefined\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptor_Data_Multi>, I>>(\n    object: I\n  ): SignatureDescriptor_Data_Multi {\n    const message = createBaseSignatureDescriptor_Data_Multi();\n    message.bitarray =\n      object.bitarray !== undefined && object.bitarray !== null\n        ? CompactBitArray.fromPartial(object.bitarray)\n        : undefined;\n    message.signatures =\n      object.signatures?.map((e) => SignatureDescriptor_Data.fromPartial(e)) ||\n      [];\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"cosmos.base.v1beta1\";\n\n/**\n * Coin defines a token with a denomination and an amount.\n *\n * NOTE: The amount field is an Int which implements the custom method\n * signatures required by gogoproto.\n */\nexport interface Coin {\n  denom: string;\n  amount: string;\n}\n\n/**\n * DecCoin defines a token with a denomination and a decimal amount.\n *\n * NOTE: The amount field is an Dec which implements the custom method\n * signatures required by gogoproto.\n */\nexport interface DecCoin {\n  denom: string;\n  amount: string;\n}\n\n/** IntProto defines a Protobuf wrapper around an Int object. */\nexport interface IntProto {\n  int: string;\n}\n\n/** DecProto defines a Protobuf wrapper around a Dec object. */\nexport interface DecProto {\n  dec: string;\n}\n\nfunction createBaseCoin(): Coin {\n  return { denom: \"\", amount: \"\" };\n}\n\nexport const Coin = {\n  encode(message: Coin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Coin {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCoin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        case 2:\n          message.amount = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Coin {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      amount: isSet(object.amount) ? String(object.amount) : \"\",\n    };\n  },\n\n  toJSON(message: Coin): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Coin>, I>>(object: I): Coin {\n    const message = createBaseCoin();\n    message.denom = object.denom ?? \"\";\n    message.amount = object.amount ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseDecCoin(): DecCoin {\n  return { denom: \"\", amount: \"\" };\n}\n\nexport const DecCoin = {\n  encode(\n    message: DecCoin,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DecCoin {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDecCoin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        case 2:\n          message.amount = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DecCoin {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      amount: isSet(object.amount) ? String(object.amount) : \"\",\n    };\n  },\n\n  toJSON(message: DecCoin): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DecCoin>, I>>(object: I): DecCoin {\n    const message = createBaseDecCoin();\n    message.denom = object.denom ?? \"\";\n    message.amount = object.amount ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseIntProto(): IntProto {\n  return { int: \"\" };\n}\n\nexport const IntProto = {\n  encode(\n    message: IntProto,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.int !== \"\") {\n      writer.uint32(10).string(message.int);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): IntProto {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseIntProto();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.int = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): IntProto {\n    return {\n      int: isSet(object.int) ? String(object.int) : \"\",\n    };\n  },\n\n  toJSON(message: IntProto): unknown {\n    const obj: any = {};\n    message.int !== undefined && (obj.int = message.int);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<IntProto>, I>>(object: I): IntProto {\n    const message = createBaseIntProto();\n    message.int = object.int ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseDecProto(): DecProto {\n  return { dec: \"\" };\n}\n\nexport const DecProto = {\n  encode(\n    message: DecProto,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.dec !== \"\") {\n      writer.uint32(10).string(message.dec);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DecProto {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDecProto();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.dec = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DecProto {\n    return {\n      dec: isSet(object.dec) ? String(object.dec) : \"\",\n    };\n  },\n\n  toJSON(message: DecProto): unknown {\n    const obj: any = {};\n    message.dec !== undefined && (obj.dec = message.dec);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DecProto>, I>>(object: I): DecProto {\n    const message = createBaseDecProto();\n    message.dec = object.dec ?? \"\";\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport {\n  SignMode,\n  signModeFromJSON,\n  signModeToJSON,\n} from \"../signing/v1beta1/signing\";\nimport { CompactBitArray } from \"../../crypto/multisig/v1beta1/multisig\";\nimport { Coin } from \"../../base/v1beta1/coin\";\n\nexport const protobufPackage = \"cosmos.tx.v1beta1\";\n\n/** Tx is the standard type used for broadcasting transactions. */\nexport interface Tx {\n  /** body is the processable content of the transaction */\n  body?: TxBody;\n  /**\n   * auth_info is the authorization related content of the transaction,\n   * specifically signers, signer modes and fee\n   */\n  authInfo?: AuthInfo;\n  /**\n   * signatures is a list of signatures that matches the length and order of\n   * AuthInfo's signer_infos to allow connecting signature meta information like\n   * public key and signing mode by position.\n   */\n  signatures: Uint8Array[];\n}\n\n/**\n * TxRaw is a variant of Tx that pins the signer's exact binary representation\n * of body and auth_info. This is used for signing, broadcasting and\n * verification. The binary `serialize(tx: TxRaw)` is stored in Tendermint and\n * the hash `sha256(serialize(tx: TxRaw))` becomes the \"txhash\", commonly used\n * as the transaction ID.\n */\nexport interface TxRaw {\n  /**\n   * body_bytes is a protobuf serialization of a TxBody that matches the\n   * representation in SignDoc.\n   */\n  bodyBytes: Uint8Array;\n  /**\n   * auth_info_bytes is a protobuf serialization of an AuthInfo that matches the\n   * representation in SignDoc.\n   */\n  authInfoBytes: Uint8Array;\n  /**\n   * signatures is a list of signatures that matches the length and order of\n   * AuthInfo's signer_infos to allow connecting signature meta information like\n   * public key and signing mode by position.\n   */\n  signatures: Uint8Array[];\n}\n\n/** SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT. */\nexport interface SignDoc {\n  /**\n   * body_bytes is protobuf serialization of a TxBody that matches the\n   * representation in TxRaw.\n   */\n  bodyBytes: Uint8Array;\n  /**\n   * auth_info_bytes is a protobuf serialization of an AuthInfo that matches the\n   * representation in TxRaw.\n   */\n  authInfoBytes: Uint8Array;\n  /**\n   * chain_id is the unique identifier of the chain this transaction targets.\n   * It prevents signed transactions from being used on another chain by an\n   * attacker\n   */\n  chainId: string;\n  /** account_number is the account number of the account in state */\n  accountNumber: Long;\n}\n\n/** TxBody is the body of a transaction that all signers sign over. */\nexport interface TxBody {\n  /**\n   * messages is a list of messages to be executed. The required signers of\n   * those messages define the number and order of elements in AuthInfo's\n   * signer_infos and Tx's signatures. Each required signer address is added to\n   * the list only the first time it occurs.\n   * By convention, the first required signer (usually from the first message)\n   * is referred to as the primary signer and pays the fee for the whole\n   * transaction.\n   */\n  messages: Any[];\n  /**\n   * memo is any arbitrary note/comment to be added to the transaction.\n   * WARNING: in clients, any publicly exposed text should not be called memo,\n   * but should be called `note` instead (see\n   * https://github.com/cosmos/cosmos-sdk/issues/9122).\n   */\n  memo: string;\n  /**\n   * timeout is the block height after which this transaction will not\n   * be processed by the chain\n   */\n  timeoutHeight: Long;\n  /**\n   * extension_options are arbitrary options that can be added by chains\n   * when the default options are not sufficient. If any of these are present\n   * and can't be handled, the transaction will be rejected\n   */\n  extensionOptions: Any[];\n  /**\n   * extension_options are arbitrary options that can be added by chains\n   * when the default options are not sufficient. If any of these are present\n   * and can't be handled, they will be ignored\n   */\n  nonCriticalExtensionOptions: Any[];\n}\n\n/**\n * AuthInfo describes the fee and signer modes that are used to sign a\n * transaction.\n */\nexport interface AuthInfo {\n  /**\n   * signer_infos defines the signing modes for the required signers. The number\n   * and order of elements must match the required signers from TxBody's\n   * messages. The first element is the primary signer and the one which pays\n   * the fee.\n   */\n  signerInfos: SignerInfo[];\n  /**\n   * Fee is the fee and gas limit for the transaction. The first signer is the\n   * primary signer and the one which pays the fee. The fee can be calculated\n   * based on the cost of evaluating the body and doing signature verification\n   * of the signers. This can be estimated via simulation.\n   */\n  fee?: Fee;\n}\n\n/**\n * SignerInfo describes the public key and signing mode of a single top-level\n * signer.\n */\nexport interface SignerInfo {\n  /**\n   * public_key is the public key of the signer. It is optional for accounts\n   * that already exist in state. If unset, the verifier can use the required \\\n   * signer address for this position and lookup the public key.\n   */\n  publicKey?: Any;\n  /**\n   * mode_info describes the signing mode of the signer and is a nested\n   * structure to support nested multisig pubkey's\n   */\n  modeInfo?: ModeInfo;\n  /**\n   * sequence is the sequence of the account, which describes the\n   * number of committed transactions signed by a given address. It is used to\n   * prevent replay attacks.\n   */\n  sequence: Long;\n}\n\n/** ModeInfo describes the signing mode of a single or nested multisig signer. */\nexport interface ModeInfo {\n  /** single represents a single signer */\n  single?: ModeInfo_Single | undefined;\n  /** multi represents a nested multisig signer */\n  multi?: ModeInfo_Multi | undefined;\n}\n\n/**\n * Single is the mode info for a single signer. It is structured as a message\n * to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the\n * future\n */\nexport interface ModeInfo_Single {\n  /** mode is the signing mode of the single signer */\n  mode: SignMode;\n}\n\n/** Multi is the mode info for a multisig public key */\nexport interface ModeInfo_Multi {\n  /** bitarray specifies which keys within the multisig are signing */\n  bitarray?: CompactBitArray;\n  /**\n   * mode_infos is the corresponding modes of the signers of the multisig\n   * which could include nested multisig public keys\n   */\n  modeInfos: ModeInfo[];\n}\n\n/**\n * Fee includes the amount of coins paid in fees and the maximum\n * gas to be used by the transaction. The ratio yields an effective \"gasprice\",\n * which must be above some miminum to be accepted into the mempool.\n */\nexport interface Fee {\n  /** amount is the amount of coins to be paid as a fee */\n  amount: Coin[];\n  /**\n   * gas_limit is the maximum gas that can be used in transaction processing\n   * before an out of gas error occurs\n   */\n  gasLimit: Long;\n  /**\n   * if unset, the first signer is responsible for paying the fees. If set, the\n   * specified account must pay the fees. the payer must be a tx signer (and\n   * thus have signed this field in AuthInfo). setting this field does *not*\n   * change the ordering of required signers for the transaction.\n   */\n  payer: string;\n  /**\n   * if set, the fee payer (either the first signer or the value of the payer\n   * field) requests that a fee grant be used to pay fees instead of the fee\n   * payer's own balance. If an appropriate fee grant does not exist or the\n   * chain does not support fee grants, this will fail\n   */\n  granter: string;\n}\n\nfunction createBaseTx(): Tx {\n  return { body: undefined, authInfo: undefined, signatures: [] };\n}\n\nexport const Tx = {\n  encode(message: Tx, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.body !== undefined) {\n      TxBody.encode(message.body, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.authInfo !== undefined) {\n      AuthInfo.encode(message.authInfo, writer.uint32(18).fork()).ldelim();\n    }\n    for (const v of message.signatures) {\n      writer.uint32(26).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Tx {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTx();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.body = TxBody.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.authInfo = AuthInfo.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Tx {\n    return {\n      body: isSet(object.body) ? TxBody.fromJSON(object.body) : undefined,\n      authInfo: isSet(object.authInfo)\n        ? AuthInfo.fromJSON(object.authInfo)\n        : undefined,\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) => bytesFromBase64(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Tx): unknown {\n    const obj: any = {};\n    message.body !== undefined &&\n      (obj.body = message.body ? TxBody.toJSON(message.body) : undefined);\n    message.authInfo !== undefined &&\n      (obj.authInfo = message.authInfo\n        ? AuthInfo.toJSON(message.authInfo)\n        : undefined);\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        base64FromBytes(e !== undefined ? e : new Uint8Array())\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Tx>, I>>(object: I): Tx {\n    const message = createBaseTx();\n    message.body =\n      object.body !== undefined && object.body !== null\n        ? TxBody.fromPartial(object.body)\n        : undefined;\n    message.authInfo =\n      object.authInfo !== undefined && object.authInfo !== null\n        ? AuthInfo.fromPartial(object.authInfo)\n        : undefined;\n    message.signatures = object.signatures?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseTxRaw(): TxRaw {\n  return {\n    bodyBytes: new Uint8Array(),\n    authInfoBytes: new Uint8Array(),\n    signatures: [],\n  };\n}\n\nexport const TxRaw = {\n  encode(message: TxRaw, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.bodyBytes.length !== 0) {\n      writer.uint32(10).bytes(message.bodyBytes);\n    }\n    if (message.authInfoBytes.length !== 0) {\n      writer.uint32(18).bytes(message.authInfoBytes);\n    }\n    for (const v of message.signatures) {\n      writer.uint32(26).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TxRaw {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTxRaw();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bodyBytes = reader.bytes();\n          break;\n        case 2:\n          message.authInfoBytes = reader.bytes();\n          break;\n        case 3:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TxRaw {\n    return {\n      bodyBytes: isSet(object.bodyBytes)\n        ? bytesFromBase64(object.bodyBytes)\n        : new Uint8Array(),\n      authInfoBytes: isSet(object.authInfoBytes)\n        ? bytesFromBase64(object.authInfoBytes)\n        : new Uint8Array(),\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) => bytesFromBase64(e))\n        : [],\n    };\n  },\n\n  toJSON(message: TxRaw): unknown {\n    const obj: any = {};\n    message.bodyBytes !== undefined &&\n      (obj.bodyBytes = base64FromBytes(\n        message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()\n      ));\n    message.authInfoBytes !== undefined &&\n      (obj.authInfoBytes = base64FromBytes(\n        message.authInfoBytes !== undefined\n          ? message.authInfoBytes\n          : new Uint8Array()\n      ));\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        base64FromBytes(e !== undefined ? e : new Uint8Array())\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TxRaw>, I>>(object: I): TxRaw {\n    const message = createBaseTxRaw();\n    message.bodyBytes = object.bodyBytes ?? new Uint8Array();\n    message.authInfoBytes = object.authInfoBytes ?? new Uint8Array();\n    message.signatures = object.signatures?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseSignDoc(): SignDoc {\n  return {\n    bodyBytes: new Uint8Array(),\n    authInfoBytes: new Uint8Array(),\n    chainId: \"\",\n    accountNumber: Long.UZERO,\n  };\n}\n\nexport const SignDoc = {\n  encode(\n    message: SignDoc,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.bodyBytes.length !== 0) {\n      writer.uint32(10).bytes(message.bodyBytes);\n    }\n    if (message.authInfoBytes.length !== 0) {\n      writer.uint32(18).bytes(message.authInfoBytes);\n    }\n    if (message.chainId !== \"\") {\n      writer.uint32(26).string(message.chainId);\n    }\n    if (!message.accountNumber.isZero()) {\n      writer.uint32(32).uint64(message.accountNumber);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SignDoc {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignDoc();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bodyBytes = reader.bytes();\n          break;\n        case 2:\n          message.authInfoBytes = reader.bytes();\n          break;\n        case 3:\n          message.chainId = reader.string();\n          break;\n        case 4:\n          message.accountNumber = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignDoc {\n    return {\n      bodyBytes: isSet(object.bodyBytes)\n        ? bytesFromBase64(object.bodyBytes)\n        : new Uint8Array(),\n      authInfoBytes: isSet(object.authInfoBytes)\n        ? bytesFromBase64(object.authInfoBytes)\n        : new Uint8Array(),\n      chainId: isSet(object.chainId) ? String(object.chainId) : \"\",\n      accountNumber: isSet(object.accountNumber)\n        ? Long.fromValue(object.accountNumber)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: SignDoc): unknown {\n    const obj: any = {};\n    message.bodyBytes !== undefined &&\n      (obj.bodyBytes = base64FromBytes(\n        message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()\n      ));\n    message.authInfoBytes !== undefined &&\n      (obj.authInfoBytes = base64FromBytes(\n        message.authInfoBytes !== undefined\n          ? message.authInfoBytes\n          : new Uint8Array()\n      ));\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.accountNumber !== undefined &&\n      (obj.accountNumber = (message.accountNumber || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignDoc>, I>>(object: I): SignDoc {\n    const message = createBaseSignDoc();\n    message.bodyBytes = object.bodyBytes ?? new Uint8Array();\n    message.authInfoBytes = object.authInfoBytes ?? new Uint8Array();\n    message.chainId = object.chainId ?? \"\";\n    message.accountNumber =\n      object.accountNumber !== undefined && object.accountNumber !== null\n        ? Long.fromValue(object.accountNumber)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseTxBody(): TxBody {\n  return {\n    messages: [],\n    memo: \"\",\n    timeoutHeight: Long.UZERO,\n    extensionOptions: [],\n    nonCriticalExtensionOptions: [],\n  };\n}\n\nexport const TxBody = {\n  encode(\n    message: TxBody,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.messages) {\n      Any.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.memo !== \"\") {\n      writer.uint32(18).string(message.memo);\n    }\n    if (!message.timeoutHeight.isZero()) {\n      writer.uint32(24).uint64(message.timeoutHeight);\n    }\n    for (const v of message.extensionOptions) {\n      Any.encode(v!, writer.uint32(8186).fork()).ldelim();\n    }\n    for (const v of message.nonCriticalExtensionOptions) {\n      Any.encode(v!, writer.uint32(16378).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TxBody {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTxBody();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.messages.push(Any.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.memo = reader.string();\n          break;\n        case 3:\n          message.timeoutHeight = reader.uint64() as Long;\n          break;\n        case 1023:\n          message.extensionOptions.push(Any.decode(reader, reader.uint32()));\n          break;\n        case 2047:\n          message.nonCriticalExtensionOptions.push(\n            Any.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TxBody {\n    return {\n      messages: Array.isArray(object?.messages)\n        ? object.messages.map((e: any) => Any.fromJSON(e))\n        : [],\n      memo: isSet(object.memo) ? String(object.memo) : \"\",\n      timeoutHeight: isSet(object.timeoutHeight)\n        ? Long.fromValue(object.timeoutHeight)\n        : Long.UZERO,\n      extensionOptions: Array.isArray(object?.extensionOptions)\n        ? object.extensionOptions.map((e: any) => Any.fromJSON(e))\n        : [],\n      nonCriticalExtensionOptions: Array.isArray(\n        object?.nonCriticalExtensionOptions\n      )\n        ? object.nonCriticalExtensionOptions.map((e: any) => Any.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: TxBody): unknown {\n    const obj: any = {};\n    if (message.messages) {\n      obj.messages = message.messages.map((e) =>\n        e ? Any.toJSON(e) : undefined\n      );\n    } else {\n      obj.messages = [];\n    }\n    message.memo !== undefined && (obj.memo = message.memo);\n    message.timeoutHeight !== undefined &&\n      (obj.timeoutHeight = (message.timeoutHeight || Long.UZERO).toString());\n    if (message.extensionOptions) {\n      obj.extensionOptions = message.extensionOptions.map((e) =>\n        e ? Any.toJSON(e) : undefined\n      );\n    } else {\n      obj.extensionOptions = [];\n    }\n    if (message.nonCriticalExtensionOptions) {\n      obj.nonCriticalExtensionOptions = message.nonCriticalExtensionOptions.map(\n        (e) => (e ? Any.toJSON(e) : undefined)\n      );\n    } else {\n      obj.nonCriticalExtensionOptions = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TxBody>, I>>(object: I): TxBody {\n    const message = createBaseTxBody();\n    message.messages = object.messages?.map((e) => Any.fromPartial(e)) || [];\n    message.memo = object.memo ?? \"\";\n    message.timeoutHeight =\n      object.timeoutHeight !== undefined && object.timeoutHeight !== null\n        ? Long.fromValue(object.timeoutHeight)\n        : Long.UZERO;\n    message.extensionOptions =\n      object.extensionOptions?.map((e) => Any.fromPartial(e)) || [];\n    message.nonCriticalExtensionOptions =\n      object.nonCriticalExtensionOptions?.map((e) => Any.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseAuthInfo(): AuthInfo {\n  return { signerInfos: [], fee: undefined };\n}\n\nexport const AuthInfo = {\n  encode(\n    message: AuthInfo,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.signerInfos) {\n      SignerInfo.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.fee !== undefined) {\n      Fee.encode(message.fee, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): AuthInfo {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAuthInfo();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signerInfos.push(SignerInfo.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.fee = Fee.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AuthInfo {\n    return {\n      signerInfos: Array.isArray(object?.signerInfos)\n        ? object.signerInfos.map((e: any) => SignerInfo.fromJSON(e))\n        : [],\n      fee: isSet(object.fee) ? Fee.fromJSON(object.fee) : undefined,\n    };\n  },\n\n  toJSON(message: AuthInfo): unknown {\n    const obj: any = {};\n    if (message.signerInfos) {\n      obj.signerInfos = message.signerInfos.map((e) =>\n        e ? SignerInfo.toJSON(e) : undefined\n      );\n    } else {\n      obj.signerInfos = [];\n    }\n    message.fee !== undefined &&\n      (obj.fee = message.fee ? Fee.toJSON(message.fee) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<AuthInfo>, I>>(object: I): AuthInfo {\n    const message = createBaseAuthInfo();\n    message.signerInfos =\n      object.signerInfos?.map((e) => SignerInfo.fromPartial(e)) || [];\n    message.fee =\n      object.fee !== undefined && object.fee !== null\n        ? Fee.fromPartial(object.fee)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseSignerInfo(): SignerInfo {\n  return { publicKey: undefined, modeInfo: undefined, sequence: Long.UZERO };\n}\n\nexport const SignerInfo = {\n  encode(\n    message: SignerInfo,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.publicKey !== undefined) {\n      Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.modeInfo !== undefined) {\n      ModeInfo.encode(message.modeInfo, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SignerInfo {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignerInfo();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.publicKey = Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.modeInfo = ModeInfo.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.sequence = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignerInfo {\n    return {\n      publicKey: isSet(object.publicKey)\n        ? Any.fromJSON(object.publicKey)\n        : undefined,\n      modeInfo: isSet(object.modeInfo)\n        ? ModeInfo.fromJSON(object.modeInfo)\n        : undefined,\n      sequence: isSet(object.sequence)\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: SignerInfo): unknown {\n    const obj: any = {};\n    message.publicKey !== undefined &&\n      (obj.publicKey = message.publicKey\n        ? Any.toJSON(message.publicKey)\n        : undefined);\n    message.modeInfo !== undefined &&\n      (obj.modeInfo = message.modeInfo\n        ? ModeInfo.toJSON(message.modeInfo)\n        : undefined);\n    message.sequence !== undefined &&\n      (obj.sequence = (message.sequence || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignerInfo>, I>>(\n    object: I\n  ): SignerInfo {\n    const message = createBaseSignerInfo();\n    message.publicKey =\n      object.publicKey !== undefined && object.publicKey !== null\n        ? Any.fromPartial(object.publicKey)\n        : undefined;\n    message.modeInfo =\n      object.modeInfo !== undefined && object.modeInfo !== null\n        ? ModeInfo.fromPartial(object.modeInfo)\n        : undefined;\n    message.sequence =\n      object.sequence !== undefined && object.sequence !== null\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseModeInfo(): ModeInfo {\n  return { single: undefined, multi: undefined };\n}\n\nexport const ModeInfo = {\n  encode(\n    message: ModeInfo,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.single !== undefined) {\n      ModeInfo_Single.encode(message.single, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.multi !== undefined) {\n      ModeInfo_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ModeInfo {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseModeInfo();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.single = ModeInfo_Single.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.multi = ModeInfo_Multi.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ModeInfo {\n    return {\n      single: isSet(object.single)\n        ? ModeInfo_Single.fromJSON(object.single)\n        : undefined,\n      multi: isSet(object.multi)\n        ? ModeInfo_Multi.fromJSON(object.multi)\n        : undefined,\n    };\n  },\n\n  toJSON(message: ModeInfo): unknown {\n    const obj: any = {};\n    message.single !== undefined &&\n      (obj.single = message.single\n        ? ModeInfo_Single.toJSON(message.single)\n        : undefined);\n    message.multi !== undefined &&\n      (obj.multi = message.multi\n        ? ModeInfo_Multi.toJSON(message.multi)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ModeInfo>, I>>(object: I): ModeInfo {\n    const message = createBaseModeInfo();\n    message.single =\n      object.single !== undefined && object.single !== null\n        ? ModeInfo_Single.fromPartial(object.single)\n        : undefined;\n    message.multi =\n      object.multi !== undefined && object.multi !== null\n        ? ModeInfo_Multi.fromPartial(object.multi)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseModeInfo_Single(): ModeInfo_Single {\n  return { mode: 0 };\n}\n\nexport const ModeInfo_Single = {\n  encode(\n    message: ModeInfo_Single,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.mode !== 0) {\n      writer.uint32(8).int32(message.mode);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ModeInfo_Single {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseModeInfo_Single();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.mode = reader.int32() as any;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ModeInfo_Single {\n    return {\n      mode: isSet(object.mode) ? signModeFromJSON(object.mode) : 0,\n    };\n  },\n\n  toJSON(message: ModeInfo_Single): unknown {\n    const obj: any = {};\n    message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ModeInfo_Single>, I>>(\n    object: I\n  ): ModeInfo_Single {\n    const message = createBaseModeInfo_Single();\n    message.mode = object.mode ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseModeInfo_Multi(): ModeInfo_Multi {\n  return { bitarray: undefined, modeInfos: [] };\n}\n\nexport const ModeInfo_Multi = {\n  encode(\n    message: ModeInfo_Multi,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.bitarray !== undefined) {\n      CompactBitArray.encode(\n        message.bitarray,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    for (const v of message.modeInfos) {\n      ModeInfo.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ModeInfo_Multi {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseModeInfo_Multi();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bitarray = CompactBitArray.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.modeInfos.push(ModeInfo.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ModeInfo_Multi {\n    return {\n      bitarray: isSet(object.bitarray)\n        ? CompactBitArray.fromJSON(object.bitarray)\n        : undefined,\n      modeInfos: Array.isArray(object?.modeInfos)\n        ? object.modeInfos.map((e: any) => ModeInfo.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: ModeInfo_Multi): unknown {\n    const obj: any = {};\n    message.bitarray !== undefined &&\n      (obj.bitarray = message.bitarray\n        ? CompactBitArray.toJSON(message.bitarray)\n        : undefined);\n    if (message.modeInfos) {\n      obj.modeInfos = message.modeInfos.map((e) =>\n        e ? ModeInfo.toJSON(e) : undefined\n      );\n    } else {\n      obj.modeInfos = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ModeInfo_Multi>, I>>(\n    object: I\n  ): ModeInfo_Multi {\n    const message = createBaseModeInfo_Multi();\n    message.bitarray =\n      object.bitarray !== undefined && object.bitarray !== null\n        ? CompactBitArray.fromPartial(object.bitarray)\n        : undefined;\n    message.modeInfos =\n      object.modeInfos?.map((e) => ModeInfo.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseFee(): Fee {\n  return { amount: [], gasLimit: Long.UZERO, payer: \"\", granter: \"\" };\n}\n\nexport const Fee = {\n  encode(message: Fee, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.amount) {\n      Coin.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.gasLimit.isZero()) {\n      writer.uint32(16).uint64(message.gasLimit);\n    }\n    if (message.payer !== \"\") {\n      writer.uint32(26).string(message.payer);\n    }\n    if (message.granter !== \"\") {\n      writer.uint32(34).string(message.granter);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Fee {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseFee();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.amount.push(Coin.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.gasLimit = reader.uint64() as Long;\n          break;\n        case 3:\n          message.payer = reader.string();\n          break;\n        case 4:\n          message.granter = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Fee {\n    return {\n      amount: Array.isArray(object?.amount)\n        ? object.amount.map((e: any) => Coin.fromJSON(e))\n        : [],\n      gasLimit: isSet(object.gasLimit)\n        ? Long.fromValue(object.gasLimit)\n        : Long.UZERO,\n      payer: isSet(object.payer) ? String(object.payer) : \"\",\n      granter: isSet(object.granter) ? String(object.granter) : \"\",\n    };\n  },\n\n  toJSON(message: Fee): unknown {\n    const obj: any = {};\n    if (message.amount) {\n      obj.amount = message.amount.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.amount = [];\n    }\n    message.gasLimit !== undefined &&\n      (obj.gasLimit = (message.gasLimit || Long.UZERO).toString());\n    message.payer !== undefined && (obj.payer = message.payer);\n    message.granter !== undefined && (obj.granter = message.granter);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Fee>, I>>(object: I): Fee {\n    const message = createBaseFee();\n    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];\n    message.gasLimit =\n      object.gasLimit !== undefined && object.gasLimit !== null\n        ? Long.fromValue(object.gasLimit)\n        : Long.UZERO;\n    message.payer = object.payer ?? \"\";\n    message.granter = object.granter ?? \"\";\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { Keccak } from \"sha3\";\nimport invariant from \"tiny-invariant\";\nimport { APIClient } from \"../index\";\nimport { Buffer } from \"buffer\";\nimport { CONFIG_CHAIN_SOPHON } from \"../constants\";\nimport {\n  EncodeObject,\n  GeneratedType,\n  OfflineSigner,\n  Registry,\n  TxBodyEncodeObject,\n} from \"@cosmjs/proto-signing\";\nimport { Any } from \"cosmjs-types/google/protobuf/any\";\nimport {\n  BaseMsg,\n  MsgCollect,\n  MsgCollectReward,\n  MsgCreatePool,\n  MsgCreatePosition,\n  MsgDecreaseLiquidity,\n  MsgIncreaseLiquidity,\n  MsgSwapExactIn,\n  MsgSwapExactOut,\n} from \"../msgs\";\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { PubKey } from \"../proto/cosmos/crypto/secp256k1/keys\";\nimport {\n  SignerInfo,\n  ModeInfo,\n  ModeInfo_Single,\n  TxBody,\n  Fee,\n  AuthInfo,\n  SignDoc,\n  TxRaw,\n} from \"../proto/cosmos/tx/v1beta1/tx\";\nimport { SignMode } from \"../proto/cosmos/tx/signing/v1beta1/signing\";\nimport { Coin } from \"../proto/cosmos/base/v1beta1/coin\";\nimport { fromBase64 } from \"@cosmjs/encoding\";\n\nexport interface ISender {\n  address: string;\n  pubkey: string;\n  accountNumber: number;\n  sequence: number;\n}\n\n// FIXME\nexport interface TxGenerated {\n  signDirect: {\n    body: TxBodyEncodeObject;\n    authInfo: AuthInfo;\n    signBytes: string;\n  };\n}\n\nexport const SIGN_DIRECT = SignMode.SIGN_MODE_DIRECT;\n\n// const defaultFee: StdFee = {\n//   amount: [],\n//   gas: CONFIG_CHAIN_SOPHON.DEFAULT_GAS,\n// };\n\nconst defaultFee = {\n  amount: \"\",\n  denom: CONFIG_CHAIN_SOPHON.COIN_DENOM,\n  gas: CONFIG_CHAIN_SOPHON.DEFAULT_GAS as number,\n};\n\nexport class TxClient {\n  public apiClient: APIClient;\n  public rpcUrl: string;\n  public accountAddress: string;\n  public signer: OfflineSigner;\n  public registry: Registry;\n\n  // public walletClient: SigningStargateClient | null = null;\n  // public sender: ISender | null = null;\n\n  constructor(\n    apiClient: APIClient,\n    rpcUrl: string,\n    signer: OfflineSigner,\n    accountAddress: string\n  ) {\n    invariant(!!signer, \"wallet is required!\");\n\n    this.apiClient = apiClient;\n    this.rpcUrl = rpcUrl;\n    this.signer = signer;\n    this.accountAddress = accountAddress;\n\n    const registryTypes = new Map<string, GeneratedType>();\n    registryTypes.set(MsgCollect.typeUrl, MsgCollect.Proto);\n    registryTypes.set(MsgCollectReward.typeUrl, MsgCollectReward.Proto);\n    registryTypes.set(MsgCreatePool.typeUrl, MsgCreatePool.Proto);\n    registryTypes.set(MsgCreatePosition.typeUrl, MsgCreatePosition.Proto);\n    registryTypes.set(MsgDecreaseLiquidity.typeUrl, MsgDecreaseLiquidity.Proto);\n    registryTypes.set(MsgIncreaseLiquidity.typeUrl, MsgIncreaseLiquidity.Proto);\n    registryTypes.set(MsgSwapExactIn.typeUrl, MsgSwapExactIn.Proto);\n    registryTypes.set(MsgSwapExactOut.typeUrl, MsgSwapExactOut.Proto);\n\n    this.registry = new Registry(registryTypes);\n  }\n\n  public async getSender(): Promise<ISender> {\n    const { authAPI } = this.apiClient;\n    const {\n      account: {\n        base_account: {\n          pub_key: { key },\n          account_number,\n          sequence,\n        },\n      },\n    } = await authAPI.apiAccountInfo(this.accountAddress);\n    return {\n      address: this.accountAddress,\n      pubkey: key,\n      accountNumber: parseInt(account_number),\n      sequence: parseInt(sequence),\n    } as ISender;\n  }\n\n  public async sendTransaction(\n    messages: BaseMsg | Array<BaseMsg>,\n    memo: string = \"\"\n    // fee: string,\n    // denom: string,\n    // gasLimit: number,\n  ) {\n    const sender = await this.getSender();\n    const pubKeyDecoded = Buffer.from(sender.pubkey, \"base64\");\n\n    // 1. SignDirect\n    const signInfoDirect = createSignerInfo(\n      new Uint8Array(pubKeyDecoded),\n      sender.sequence,\n      SIGN_DIRECT\n    );\n\n    // 2. Fee\n    const feeMessage = createFee(\n      defaultFee.amount,\n      defaultFee.denom,\n      defaultFee.gas\n    );\n\n    // 3. authInfo\n    const authInfoDirect = createAuthInfo(signInfoDirect, feeMessage);\n\n    // console.log(AuthInfo.encode(authInfoDirect).finish());\n\n    // 4. txbody\n    // const body = createBodyWithMultipleMessages(messages, memo);\n    const _messages = messages instanceof Array ? messages : [messages];\n    const body = createTxBodyEncodeObject(_messages, memo);\n\n    // 5. signDoc\n    const signDocDirect = createSigDoc(\n      this.registry.encode(body),\n      AuthInfo.encode(authInfoDirect).finish(),\n      CONFIG_CHAIN_SOPHON.CHAIN_ID,\n      sender.accountNumber\n    );\n\n    let walletClient;\n    walletClient = await SigningStargateClient.connectWithSigner(\n      this.rpcUrl,\n      this.signer,\n      {\n        registry: this.registry,\n        prefix: CONFIG_CHAIN_SOPHON.COIN_MINIMAL_DENOM.toLowerCase(),\n      }\n    );\n    // @ts-ignore\n    const { signed, signature } = await walletClient.signer.signDirect(\n      this.accountAddress,\n      signDocDirect\n    );\n\n    const txRaw = TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [fromBase64(signature.signature)],\n    });\n    const txBytes = TxRaw.encode(txRaw).finish();\n\n    return walletClient.broadcastTx(txBytes);\n  }\n\n  // public async signTransaction(\n  //   tx: TxGenerated,\n  //   broadcastMode: string = 'BROADCAST_MODE_BLOCK',\n  // ) {\n  //   const dataToSign = `0x${Buffer.from(\n  //     tx.signDirect.signBytes,\n  //     'base64',\n  //   ).toString('hex')}`\n  //\n  //   /* eslint-disable no-underscore-dangle */\n  //   const signatureRaw = wallet._signingKey().signDigest(dataToSign)\n  //   const splitedSignature = splitSignature(signatureRaw)\n  //   const signature = arrayify(concat([splitedSignature.r, splitedSignature.s]))\n  //\n  //   const signedTx = createTxRaw(\n  //     tx.signDirect.body.serializeBinary(),\n  //     tx.signDirect.authInfo.serializeBinary(),\n  //     [signature],\n  //   )\n  //   const body = `{ \"tx_bytes\": [${signedTx.message\n  //     .serializeBinary()\n  //     .toString()}], \"mode\": \"${broadcastMode}\" }`\n  //\n  //   return body\n  // }\n}\n\nexport function createTxBodyEncodeObject(\n  messages: Array<BaseMsg>,\n  memo: string\n): TxBodyEncodeObject {\n  const results = messages.map((item) => {\n    return item.generateMessage();\n  });\n  return {\n    typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n    value: {\n      messages: results,\n      memo: memo,\n    },\n  };\n}\n\nexport function createSigDoc(\n  bodyBytes: Uint8Array,\n  authInfoBytes: Uint8Array,\n  chainId: string,\n  accountNumber: number\n) {\n  return SignDoc.fromPartial({\n    bodyBytes,\n    authInfoBytes,\n    chainId,\n    accountNumber,\n  });\n}\n\nfunction createAuthInfo(signerInfo: SignerInfo, fee: Fee) {\n  return AuthInfo.fromPartial({\n    signerInfos: [signerInfo],\n    fee,\n  });\n}\n\nfunction createFee(fee: string, denom: string, gasLimit: number) {\n  return Fee.fromPartial({\n    amount: [\n      Coin.fromPartial({\n        denom,\n        amount: fee,\n      }),\n    ],\n    gasLimit,\n  });\n}\n\nfunction createSignerInfo(\n  publicKey: Uint8Array,\n  sequence: number,\n  mode: number\n) {\n  const pubkey = Any.fromPartial({\n    typeUrl: \"/ethermint.crypto.v1.ethsecp256k1.PubKey\",\n    value: PubKey.encode({\n      key: publicKey,\n    }).finish(),\n  });\n  const signerInfo = SignerInfo.fromPartial({\n    publicKey: pubkey,\n    modeInfo: ModeInfo.fromPartial({\n      single: ModeInfo_Single.fromPartial({\n        mode,\n      }),\n    }),\n    sequence,\n  });\n\n  return signerInfo;\n}\n","import { APIRequester, TxAPI } from \"../api\";\nimport { BankAPI, AuthAPI, SwapAPI } from \"../api\";\nimport { CONFIG_CHAIN_SOPHON } from \"../constants\";\n\nexport class APIClient {\n  public apiRequester: APIRequester;\n\n  // API access\n  public bankAPI: BankAPI;\n  public authAPI: AuthAPI;\n  public swapAPI: SwapAPI;\n  public txAPI: TxAPI;\n  public nodeUrl: string;\n\n  constructor(URL: string, chainId: string = CONFIG_CHAIN_SOPHON.CHAIN_ID) {\n    this.nodeUrl = URL;\n    this.apiRequester = new APIRequester(URL);\n\n    // instantiate APIs\n    this.bankAPI = new BankAPI(this.apiRequester);\n    this.authAPI = new AuthAPI(this.apiRequester);\n    this.swapAPI = new SwapAPI(this.apiRequester);\n    this.txAPI = new TxAPI(this.apiRequester);\n  }\n}\n","export const ONE_DAY_TO_SECONDS = 86400;\n\nexport const ONE_YEAR_TO_DAYS = 365;\n","import { Transaction_Status } from \"../types\";\n\nexport class TransactionLooper {\n  transactionHash: string;\n  description: string;\n  status: Transaction_Status;\n  counter: number;\n  onTransactionSuccess: Function;\n\n  constructor(\n    txHash: string,\n    description: string,\n    status: Transaction_Status,\n    onTransactionSuccess: Function\n  ) {\n    this.transactionHash = txHash;\n    this.description = description;\n    this.status = status;\n    this.counter = 0;\n    this.onTransactionSuccess = onTransactionSuccess;\n  }\n}\n","export const ZERO = \"0\";\n","export function objectToMap<K, T>(source: Object) {\n  return new Map(Object.entries(source));\n}\n\nexport function arrayToMap<T, K extends keyof T>(array: Array<T>, property: K) {\n  const map = new Map<T[K], T>();\n  for (const item of array) {\n    map.set(item[property], item);\n  }\n  return map;\n}\n","import Decimal from \"decimal.js\";\n\nexport const decimalNumber = (number = \" \") => {\n  const [int = \"\", float = \"\"] = number.toString().replace(\"$\", \"\").split(\".\");\n\n  if (int.length > 10) {\n    return `${new Decimal(int).div(new Decimal(10).pow(10)).toFixed(2)}B`;\n  } else if (int.length > 7) {\n    return `${new Decimal(int).div(new Decimal(10).pow(7)).toFixed(2)}M`;\n  } else if (int.length > 3) {\n    return `${new Decimal(int).div(new Decimal(10).pow(3)).toFixed(2)}K`;\n  } else {\n    return `${Number(int) > 0 ? int : 0}.${\n      float.length > 0 ? float.slice(0, 2) : \"00\"\n    }`;\n  }\n};\n","export function deepCopy(source: Object) {\n  // if (typeof source != \"object\") {\n  //   return source;\n  // }\n  // if (source == null) {\n  //   return source;\n  // }\n  // const newObj = source.constructor === Array ? [] as Array<T> : {};\n  // for (const i in source) {\n  //   newObj[i] = deepCopy(source[i]);\n  // }\n  // return newObj;\n\n  return JSON.parse(JSON.stringify(source));\n}\n","import Decimal from \"decimal.js\";\nimport { DEFAULT_PRECISION } from \"../constants\";\n\nexport function plus(value1: string, value2: string) {\n  return new Decimal(value1).plus(value2).toString();\n}\n\nexport function minus(value1: string | number, value2: string | number) {\n  return new Decimal(value1).minus(value2).toString();\n}\n\nexport function multipliedBy(value1: string | number, value2: string | number) {\n  return new Decimal(value1).mul(value2).toString();\n}\n\nexport function div(value1: string, value2: string): string {\n  return new Decimal(value1).div(value2).toString();\n}\n\nexport function isGreaterThan(value1: string, value2: string) {\n  return new Decimal(value1).greaterThanOrEqualTo(value2);\n}\n\nexport function isLessThan(value1: string, value2: string) {\n  return new Decimal(value1).lessThan(value2);\n}\n\nexport function isEqualTo(value1: string, value2: string) {\n  return new Decimal(value1).equals(value2);\n}\n\nexport function pow18(value: string): string {\n  return new Decimal(value).mul(Math.pow(10, DEFAULT_PRECISION)).toString();\n}\n\nexport function pow(\n  value: string | number | Decimal,\n  precision: number = DEFAULT_PRECISION,\n  round: Decimal.Rounding = Decimal.ROUND_DOWN\n): string {\n  if (value === \"\") {\n    return \"0\";\n  }\n  const _value = new Decimal(value).mul(Math.pow(10, precision));\n  if (round === Decimal.ROUND_UP) {\n    return _value.ceil().toString();\n  }\n  return _value.floor().toString();\n}\n\nexport function powM18(value: string | number) {\n  return new Decimal(value).div(Math.pow(10, DEFAULT_PRECISION)).toString();\n}\n\nexport function shift(value: string, precision: number = DEFAULT_PRECISION) {\n  return new Decimal(value).div(Math.pow(10, precision)).toString();\n}\n\nexport function isPositive(value: string | number) {\n  if (!value) {\n    return false;\n  }\n  return new Decimal(value).greaterThan(0);\n}\n","export function encrypt(value: string, prefix = 6, suffix = 4) {\n  if (value) {\n    return value.substr(0, prefix) + \"...\" + value.substr(-suffix);\n  } else {\n    return value;\n  }\n}\n","import { IToken } from \"../types\";\nimport DEFAULT_TOKEN_LIST from \"../constants/tokenlist.default\";\n\nexport function findTokenByDenom(tokenDenom?: string): IToken {\n  const tokens: Array<IToken> = DEFAULT_TOKEN_LIST;\n  const result = tokens.find((item) => item.denom === tokenDenom);\n  if (result) {\n    return result;\n  } else {\n    return DEFAULT_TOKEN_LIST[0];\n  }\n}\n\nexport function findTokenBySymbol(symbol: string): IToken {\n  const tokens: Array<IToken> = DEFAULT_TOKEN_LIST;\n  const result = tokens.find(\n    (item) => item.symbol.toUpperCase() === symbol.toUpperCase()\n  );\n  if (result) {\n    return result;\n  } else {\n    return DEFAULT_TOKEN_LIST[0];\n  }\n}\n","import { Fee_Amount, FEE_AMOUNT_DETAIL } from \"../constants\";\n\nexport function getPercentByFeeAmount(fee: Fee_Amount | undefined) {\n  if (fee) {\n    return `${FEE_AMOUNT_DETAIL[fee].label}%`;\n  } else {\n    return \"-\";\n  }\n}\n","import { Fee_Amount } from \"../constants\";\nimport { Bech32, toUtf8 } from \"@cosmjs/encoding\";\nimport { sha256 } from \"@cosmjs/crypto\";\n\nexport function getPoolAddress(\n  denom0: string,\n  denom1: string,\n  fee: Fee_Amount\n) {\n  let key;\n  if (denom0 > denom1) {\n    key = `${denom1}-${denom0}-${fee}`;\n  } else {\n    key = `${denom0}-${denom1}-${fee}`;\n  }\n  // console.log('poolAddress: ' + Bech32.encode('sop', sha256(toUtf8(key)).slice(0, 20)));\n  return Bech32.encode(\"sop\", sha256(toUtf8(key)).slice(0, 20));\n}\n","import { DeliverTxResponse } from \"@cosmjs/stargate\";\nimport { Transaction_Status } from \"./ICommon\";\n\nexport type DeepPartial<T> = T extends object\n  ? {\n      [P in keyof T]?: DeepPartial<T[P]>;\n    }\n  : T;\n\nexport type BroadcastResult = DeliverTxResponse;\n\nexport interface ITransaction {\n  transactionHash: string;\n  description: string;\n  status: Transaction_Status;\n}\n\nexport function longToNumber(long: Long): number {\n  if (long.gt(Number.MAX_SAFE_INTEGER)) {\n    throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n  }\n  return long.toNumber();\n}\n","import Decimal from \"decimal.js\";\nimport { isNumeric } from \"./isNumberic\";\n\n// export function toPercent(percent: number, balance: string) {\n//   return new Decimal(percent).div(100).mul(balance).toFixed(2);\n// }\n\nexport function percentage(value: string): string {\n  if (isNumeric(value)) {\n    return `${new Decimal(value).toFixed(2)}%`;\n  } else {\n    return value;\n  }\n}\n\nexport function toPercent(value: Decimal.Value): string {\n  try {\n    return `${new Decimal(value).mul(100).toFixed(2)}%`;\n  } catch (e) {\n    return value.toString();\n  }\n}\n","export function to32(value: string) {\n  const arr = value.split(\",\");\n  const len = 32 - arr.length;\n  const result: Array<number> = [];\n  arr.forEach((item) => {\n    result.push(+item);\n  });\n  for (let i = 0; i < len; i++) {\n    result.unshift(0);\n  }\n  return result;\n}\n","import Decimal from \"decimal.js\";\n\nexport function toUsd(value: string | undefined): string | number {\n  if (!value) {\n    return 0;\n  }\n  return \"$\" + new Decimal(value).toFixed(2);\n}\n"],"names":["Fee_Amount","APIRequester","baseURL","axios","this","Axios","create","headers","Accept","timeout","_proto","get","endpoint","params","then","d","data","post","BaseAPI","request","BankAPI","_inheritsLoose","apiTokenBalance","token","accountAddress","denom","apiAccountBalance","AuthAPI","apiAccountInfo","SwapAPI","apiPoolListByAddresses","addresses","join","apiPoolMetadataByAddress","address","apiPoolMetadataPriceByAddress","apiLiquidityPositionById","tokenId","apiLiquidityRewardsByIds","tokenIds","apiTickImagePath","apiActiveFarmList","apiLiquidityPositionList","TxAPI","txInfo","txHash","_broadcast","tx","mode","broadcast","creator","name","symbol","totalSupply","decimal","logoURI","Bound","Tip_Level","Swap_Direction","Transaction_Status","FEE_AMOUNT_DETAIL","LOW","label","value","description","MEDIUM","HIGH","NETWORK_MAP","networkId","chainId","chainName","providerType","ticker","CONFIG_CHAIN_SOPHON","RPC_URL","REST_URL","EXPLORER_URL","NETWORK_NAME","NETWORK_TYPE","CHAIN_ID","CHAIN_NAME","COIN_DENOM","COIN_MINIMAL_DENOM","COIN_DECIMALS","PREFIX","COIN_TYPE","COINGECKO_ID","DEFAULT_GAS","GAS_PRICE_STEP_LOW","GAS_PRICE_STEP_AVERAGE","GAS_PRICE_STEP_HIGH","FEATURES","REG_NUMBER","RegExp","REG_DECIMAL","TICK_SPACINGS","500","3000","10000","toDecimalPlaces","precision","Decimal","ROUND_UP","toString","e","String","toAmountString","roundingMode","ROUND_DOWN","toSignificantDigits","isNumeric","isNaN","parseFloat","sortsBefore","baseToken","quoteToken","toLowerCase","moment","locale","LiquidityMath","getRightSideLiquidity","leftRangeValue","rightRangeValue","priceValue","amount","numerator","_value1","div","sqrt","_value2","denominator","sub","getLeftSideLiquidity","getLiquidityFromAmount0","amount0","pc","lessThan","greaterThan","deltaX","_getDiverForDeltaX","lower","upper","_getDiverForDeltaY","getLiquidityFromAmount1","amount1","deltaY","getAmount1FromAmount0","token0","liquidity","console","log","mul","getAmount0FromAmount1","token1","getAmountByLiquidity","deltaXDiver","deltaYDiver","TickMath","priceToClosestTick","price","log2","toNumber","getNearestTickByPrice","feeAmount","trim","INVALID_TICK","MIN_TICK_VALUE","MIN_TICK","MAX_TICK_VALUE","MAX_TICK","tick","nearestUsableTick","getFormattedPriceByTick","fee","isLowestTick","isHighestTick","base","pow","getPriceByTick","getNearestPriceByInput","nearestTick","getPriceBySqrtPrice","sqrtPrice","getSqrtPriceByPrice","getBaseTickRange","fromToken","toToken","leftRange","rightRange","tickLower","tickUpper","getNearestLowestTick","getNearestHighestTick","getNearestPricesByFullTick","lowestPrice","highestPrice","tickSpacing","rounded","Math","round","BaseMsg","protobufPackage","MsgCreatePool","encode","message","writer","_m0","uint32","string","denom0","denom1","int32","decode","input","length","reader","end","undefined","len","pos","tag","skipType","fromJSON","object","isSet","Number","toJSON","obj","fromPartial","createBaseMsgCreatePosition","amount0Desired","amount1Desired","amount0Min","amount1Min","recipient","deadline","Long","ZERO","MsgCreatePosition","isZero","int64","fromValue","createBaseMsgIncreaseLiquidity","MsgIncreaseLiquidity","createBaseMsgDecreaseLiquidity","MsgDecreaseLiquidity","MsgCollect","amount0Max","amount1Max","collectOnly","bool","Boolean","createBaseMsgSwapExactIn","amountIn","amountOutMin","denoms","fees","MsgSwapExactIn","v","fork","ldelim","push","end2","Array","isArray","map","createBaseMsgSwapExactOut","amountOut","amountInMax","MsgCollectReward","MsgSwapExactOut","createBaseAny","typeUrl","Uint8Array","msg","_this","protoMsg","generateMessage","MsgCollectReward_pb","_this2","MsgSwapExactOut_pb","_this3","MsgSwapExactIn_pb","_this4","MsgCreatePool_pb","_this5","MsgCollect_pb","_this6","MsgCreatePosition_pb","_this7","MsgDecreaseLiquidity_pb","_this8","MsgIncreaseLiquidity_pb","Any","bytes","bytesFromBase64","globalThis","self","window","global","atob","b64","Buffer","from","bin","arr","i","charCodeAt","btoa","createBaseCompactBitArray","extraBitsStored","elems","CompactBitArray","SignMode","signModeFromJSON","SIGN_MODE_UNSPECIFIED","SIGN_MODE_DIRECT","SIGN_MODE_TEXTUAL","SIGN_MODE_LEGACY_AMINO_JSON","UNRECOGNIZED","Coin","TxRaw","bodyBytes","authInfoBytes","signatures","AuthInfo","signerInfos","SignerInfo","Fee","createBaseSignerInfo","publicKey","modeInfo","sequence","UZERO","ModeInfo","uint64","forEach","byte","fromCharCode","single","ModeInfo_Single","multi","ModeInfo_Multi","signModeToJSON","bitarray","modeInfos","createBaseFee","gasLimit","payer","granter","SIGN_DIRECT","defaultFee","gas","TxClient","apiClient","rpcUrl","signer","registry","invariant","registryTypes","Map","set","Proto","Registry","getSender","authAPI","_context","_yield$authAPI$apiAcc2","account","base_account","pubkey","pub_key","key","accountNumber","parseInt","account_number","sendTransaction","messages","memo","_context2","pubKeyDecoded","sender","PubKey","finish","signerInfo","signInfoDirect","feeMessage","authInfoDirect","createAuthInfo","body","createTxBodyEncodeObject","signDocDirect","createSigDoc","SigningStargateClient","connectWithSigner","prefix","walletClient","signDirect","txRaw","signed","_yield$walletClient$s","fromBase64","signature","txBytes","broadcastTx","item","URL","apiRequester","bankAPI","swapAPI","txAPI","nodeUrl","status","onTransactionSuccess","transactionHash","counter","array","property","test","number","replace","split","int","float","toFixed","slice","source","JSON","parse","stringify","value1","value2","suffix","substr","tokenDenom","DEFAULT_TOKEN_LIST","find","toUpperCase","time","fromNow","pattern","format","seperator","fixed","Bech32","sha256","toUtf8","floor","equals","greaterThanOrEqualTo","long","gt","MAX_SAFE_INTEGER","Error","minus","Object","entries","plus","_value","ceil","result","unshift","CosmosDecimal","fromUserInput"],"mappings":"osQAAYA,ECmBCC,aAGX,WAAYC,QAFJC,aAGNC,KAAKD,MAAQE,EAAMC,OAAO,CACxBJ,QAAAA,EACAK,QAAS,CACPC,OAAQ,oBAEVC,QAAS,MATf,kBAAA,OAAAC,EAaeC,eAbf,kBAaS,WACLC,EACAC,GAFK,6BAAA,OAAA,sBAAA,OAAA,gBAELA,IAAAA,EAAsC,sBAE/BT,KAAKD,MAAMQ,IAAIC,EAAU,CAAEC,OAAAA,IAAUC,MAAK,SAACC,GAAD,OAAOA,EAAEC,SAJrD,OAAA,UAAA,+BAbT,OAAA,cAAA,mCAAAN,EAoBeO,gBApBf,kBAoBS,WAAcL,EAAkBI,GAAhC,6BAAA,OAAA,sBAAA,OAAA,yBACEZ,KAAKD,MAAMc,KAAKL,EAAUI,GAAMF,MAAK,SAACC,GAAD,OAAOA,EAAEC,SADhD,OAAA,UAAA,+BApBT,OAAA,cAAA,wCCjBsBE,EACpB,SAAsBC,QAAAA,eAAAf,aAAAe,GCOXC,cAAb,aAAA,qCAAAC,OAAA,kBAAA,OAAAX,EACeY,2BADf,kBACS,WACLC,EACAC,GAFK,6BAAA,OAAA,sBAAA,OAAA,yBAIEpB,KAAKe,QAAQR,qCACea,cACjC,CACEC,MAAOF,EAAME,SAPZ,OAAA,UAAA,+BADT,OAAA,cAAA,mCAAAf,EAaegB,6BAbf,kBAaS,WACLF,GADK,6BAAA,OAAA,sBAAA,OAAA,yBAGEpB,KAAKe,QAAQR,qCACea,IAJ9B,OAAA,UAAA,+BAbT,OAAA,YAAA,sCAA6BN,GCQhBS,cAAb,aAAA,qCAAA,OAAAN,mBACeO,0BADf,kBACS,WACLJ,GADK,6BAAA,OAAA,sBAAA,OAAA,yBAGEpB,KAAKe,QAAQR,qCACea,IAJ9B,OAAA,UAAA,+BADT,OAAA,YAAA,sCAA6BN,GCUhBW,cAAb,aAAA,qCAAAR,OAAA,kBAAA,OAAAX,EAKeoB,uBALf,WAAA,kBAKS,WACLC,GADK,6BAAA,OAAA,sBAAA,OAAA,yBAGE3B,KAAKe,QAAQR,wDACkCoB,EAAUC,KAAK,OAJhE,OAAA,UAAA,+BALT,OAAA,YAAA,gCAAA,GAAAtB,EAaeuB,oCAbf,kBAaS,WACLC,GADK,6BAAA,OAAA,sBAAA,OAAA,yBAGE9B,KAAKe,QAAQR,sCACgBuB,IAJ/B,OAAA,UAAA,+BAbT,OAAA,YAAA,mCAAAxB,EAqBeyB,yCArBf,kBAqBS,WACLD,GADK,6BAAA,OAAA,sBAAA,OAAA,yBAGE9B,KAAKe,QAAQR,sCACgBuB,aAJ/B,OAAA,UAAA,+BArBT,OAAA,YAAA,mCAAAxB,EA6Be0B,oCA7Bf,kBA6BS,WACLC,GADK,6BAAA,OAAA,sBAAA,OAAA,yBAGEjC,KAAKe,QAAQR,oDAC8B0B,IAJ7C,OAAA,UAAA,+BA7BT,OAAA,YAAA,mCAAA3B,EAqCe4B,oCArCf,kBAqCS,WACLC,GADK,6BAAA,OAAA,sBAAA,OAAA,yBAGEnC,KAAKe,QAAQR,0DACoC4B,EAASP,KAAK,OAJjE,OAAA,UAAA,+BArCT,OAAA,YAAA,mCAAAtB,EA6Ce8B,4BA7Cf,kBA6CS,WAAuBH,GAAvB,6BAAA,OAAA,sBAAA,OAAA,yBACEjC,KAAKe,QAAQR,oDAC8B0B,iBAF7C,OAAA,UAAA,+BA7CT,OAAA,YAAA,mCAAA3B,EAmDe+B,6BAnDf,kBAmDS,aAAA,6BAAA,OAAA,sBAAA,OAAA,yBACErC,KAAKe,QAAQR,kDADf,OAAA,UAAA,+BAnDT,OAAA,WAAA,mCAAAD,EAyDegC,oCAzDf,kBAyDS,WACLlB,GADK,6BAAA,OAAA,sBAAA,OAAA,yBAGEpB,KAAKe,QAAQR,0DACoCa,IAJnD,OAAA,UAAA,+BAzDT,OAAA,YAAA,sCAA6BN,GCpBhByB,cAAb,aAAA,qCAAAtB,OAAA,kBAAA,OAAAX,EACekC,kBADf,kBACS,WAAaC,GAAb,6BAAA,OAAA,sBAAA,OAAA,yBACEzC,KAAKe,QAAQR,8BAA0CkC,IADzD,OAAA,UAAA,+BADT,OAAA,YAAA,mCAAAnC,EAKgBoC,sBALhB,kBAKU,WACNC,EACAC,GAFM,6BAAA,OAAA,sBAAA,OAAA,yBAIC5C,KAAKe,QAAQF,gCAJd,OAAA,UAAA,+BALV,OAAA,cAAA,mCAAAP,EAYeuC,qBAZf,kBAYS,WAAgBF,GAAhB,6BAAA,OAAA,sBAAA,OAAA,yBACE3C,KAAK0C,WAAgCC,EAAI,yBAD3C,OAAA,UAAA,+BAZT,OAAA,YAAA,sCAA2B7B,KCRZ,CACb,CACEO,MAAO,OACPyB,QAAS,GACTC,KAAM,SACNC,OAAQ,MACRC,YAAa,+BACbC,QAAS,GACTC,QAAS,gEAEX,CACE9B,MAAO,QACPyB,QAAS,6CACTC,KAAM,WACNC,OAAQ,MACRC,YAAa,4BACbC,QAAS,GACTC,QAAS,gEAEX,CACE9B,MAAO,SACPyB,QAAS,6CACTC,KAAM,QACNC,OAAQ,QACRC,YAAa,8BACbC,QAAS,EACTC,QAAS,gEAEX,CACE9B,MAAO,SACPyB,QAAS,6CACTC,KAAM,OACNC,OAAQ,OACRC,YAAa,8BACbC,QAAS,EACTC,QAAS,gEAEX,CACE9B,MAAO,iBACPyB,QAAS,6CACTC,KAAM,SACNC,OAAQ,SACRC,YAAa,8BACbC,QAAS,GACTC,QAAS,gEAEX,CACE9B,MAAO,iBACPyB,QAAS,6CACTC,KAAM,SACNC,OAAQ,SACRC,YAAa,8BACbC,QAAS,EACTC,QAAS,kEPrDDvD,EAAAA,qBAAAA,yCAEVA,yBACAA,2BQmBUwD,EAWAC,EAMAC,EAKAC,ERtCCC,UAIV5D,mBAAW6D,KAAM,CAChBC,MAAO,OACPC,MAAO/D,mBAAW6D,IAClBG,YAAa,4BAEdhE,mBAAWiE,QAAS,CACnBH,MAAO,MACPC,MAAO/D,mBAAWiE,OAClBD,YAAa,0BAEdhE,mBAAWkE,MAAO,CACjBJ,MAAO,IACPC,MAAO/D,mBAAWkE,KAClBF,YAAa,6BS0CJG,UAzCiB,GA0CV,CAChBC,UA3C0B,IA4C1BC,QA9BwB,MA+BxBC,UAzD0B,WA0D1BC,aAtEe,MAuEfC,OApBsB,SA1BI,IAgDV,CAChBJ,UAjD0B,KAkD1BC,QApCwB,OAqCxBC,UA/D0B,sBAgE1BC,aA5Ee,MA6EfC,OA1BsB,SA1BS,IAsDV,CACrBJ,UAvD+B,KAwD/BC,QA1C6B,OA2C7BC,UAtE0B,sBAuE1BC,aAnFe,MAoFfC,OAjCsB,SAzBI,IA4DV,CAChBJ,UA7D0B,KA8D1BC,QAhDwB,OAiDxBC,UA5E0B,aA6E1BC,aAzFe,MA0FfC,OAvCsB,SAzBI,IAkEV,CAChBJ,UAnE0B,KAoE1BC,QAtDwB,OAuDxBC,UAlF0B,kBAmF1BC,aA/Fe,MAgGfC,OA7CsB,SAzBK,KAwEV,CACjBJ,UAzE2B,MA0E3BC,QA5DyB,OA6DzBC,UAxF2B,OAyF3BC,aArGgB,OAsGhBC,OAnDuB,UAzBI,KA8EV,CACjBJ,UA/E2B,MAgF3BC,QAlEyB,OAmEzBC,UA9F2B,kBA+F3BC,aA3GgB,OA4GhBC,OAzDqB,QAzBS,KAoFV,CACpBJ,UArF8B,MAsF9BC,QAxE4B,OAyE5BC,UApG8B,UAqG9BC,aAjHmB,UAkHnBC,OA/D0B,WAzBG,KA0FV,CACnBJ,UA3F6B,MA4F7BC,QA9E2B,OA+E3BC,UA1G6B,SA2G7BC,aAvHkB,SAwHlBC,OArEyB,SAzBC,KAgGV,CAChBJ,UAjG0B,MAkG1BC,QApFwB,QAqFxBC,UAhH0B,MAiH1BC,aA7He,MA8HfC,OA3EsB,SAzBU,OAsGV,CACtBJ,UAvGgC,QAwGhCC,QA1F8B,SA2F9BC,UAtHgC,YAuHhCC,aAnIqB,YAoIrBC,OAjF4B,UAxBM,KA2GV,CACxBJ,UA5GkC,MA6GlCC,QAhGgC,iBAiGhCC,UA5HkC,aA6HlCC,aAzIkB,MA0IlBC,OAvFyB,UA2FhBC,EAAsB,CACjCC,QAAS,GACTC,SAAU,GACVC,aAAc,6BACdC,aAAc,iBACdC,aAAc,UACdC,SAAU,iBACVC,WAAY,aACZC,WAAY,OACZC,mBAAoB,MACpBC,cAAe,GACfC,OAAQ,SACRC,UAAW,IACXC,aAAc,SACdC,YAAa,IACbC,mBAAoB,KACpBC,uBAAwB,KACxBC,oBAAqB,IACrBC,SAAU,CAAC,WAAY,eAAgB,WCpK5BC,EAAa,IAAIC,OAC5B,iCAKWC,EAAc,IAAID,OAC7B,sBCbWE,EAAgB,CAC3BC,IAAK,GACLC,IAAM,GACNC,IAAO,cCKOC,EACdpC,EACAqC,YAAAA,IAAAA,EFR+B,IEU/B,IACE,OAAO,IAAIC,EAAQtC,GAChBoC,gBAAgBC,EAAWC,EAAQC,UACnCC,WACH,MAAOC,GACP,OAAOC,OAAO1C,GAAS,MAI3B,SAAgB2C,EACd3C,EACAqC,EACAO,YAFA5C,IAAAA,EAAmC,aACnCqC,IAAAA,EFvBoC,YEwBpCO,IAAAA,EAAiCN,EAAQO,YAEzC,IACE,OAAO,IAAIP,EAAQtC,GAChB8C,oBAAoBT,EAAWO,GAC/BJ,WACH,MAAOC,GACP,OAAOC,OAAO1C,GAAS,eC5BX+C,EAAU/C,GACxB,OAAQgD,MAAMC,WAAWjD,aCFXkD,EAAYC,EAAmBC,GAC7C,OAAOD,EAAUzF,MAAM2F,cAAgBD,EAAW1F,MAAM2F,cCD1DC,EAAOC,OAAO,UPoBF9D,EAAAA,gBAAAA,iCAEVA,iBASUC,EAAAA,oBAAAA,mCAEVA,oBACAA,iBAGUC,EAAAA,yBAAAA,yCAEVA,kBAGUC,EAAAA,6BAAAA,gDAEVA,oBACAA,sBACAA,oBACAA,gBACAA,sBQ9CW4D,aAAb,cAAA,OAAAA,EACiBC,sBAAP,SACNC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAY,IAAIxB,EAAQuB,GACxBE,EAAU,IAAIzB,EAAQ,GAAG0B,IAAI1B,EAAQ2B,KAAKP,IAC1CQ,EAAU,IAAI5B,EAAQ,GAAG0B,IAAI1B,EAAQ2B,KAAKN,IAC1CQ,EAAc7B,EAAQ8B,IAAIL,EAASG,GACzC,OAAOJ,EAAUE,IAAIG,IAXzBX,EAciBa,qBAAP,SACNX,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAY,IAAIxB,EAAQuB,GACxBM,EAAc7B,EAAQ8B,IAC1B9B,EAAQ2B,KAAKN,GACbrB,EAAQ2B,KAAKP,IAEf,OAAOI,EAAUE,IAAIG,IAzBzBX,EA4BgBc,wBAAP,SACLZ,EACAC,EACAC,EACAW,GAEA,IAAMC,EAAK,IAAIlC,EAAQsB,GACvB,IAAoC,IAAhCY,EAAGC,SAASf,GACd,OAAOrH,KAAKoH,sBACVC,EACAC,EACAC,EACAW,GAEG,IAAwC,IAApCC,EAAGE,YAAYf,GACxB,OAAOtH,KAAKgI,qBACVX,EACAC,EACAC,EACAW,GAGJ,IAAMI,EAAS,IAAIrC,EAAQiC,GACrBR,EAAU,IAAIzB,EAAQ,GAAG0B,IAAI1B,EAAQ2B,KAAKL,IAC1CM,EAAU,IAAI5B,EAAQ,GAAG0B,IAAI1B,EAAQ2B,KAAKN,IAC1CQ,EAAc7B,EAAQ8B,IAAIL,EAASG,GACzC,OAAOS,EAAOX,IAAIG,IAtDtBX,EAyDiBoB,mBAAP,SACNC,EACAC,GAEA,IAAMf,EAAU,IAAIzB,EAAQ,GAAG0B,IAAI1B,EAAQ2B,KAAKY,IAC1CX,EAAU,IAAI5B,EAAQ,GAAG0B,IAAI1B,EAAQ2B,KAAKa,IAChD,OAAOxC,EAAQ8B,IAAIL,EAASG,IA/DhCV,EAkEiBuB,mBAAP,SACNF,EACAC,GAEA,OAAOxC,EAAQ8B,IAAI9B,EAAQ2B,KAAKa,GAAQxC,EAAQ2B,KAAKY,KAtEzDrB,EAyEgBwB,wBAAP,SACLtB,EACAC,EACAC,EACAqB,GAEA,IAAMT,EAAK,IAAIlC,EAAQsB,GAEvB,IAAoC,IAAhCY,EAAGC,SAASf,GACd,OAAOrH,KAAKoH,sBACVC,EACAC,EACAC,EACAqB,GAEG,IAAwC,IAApCT,EAAGE,YAAYf,GACxB,OAAOtH,KAAKgI,qBACVX,EACAC,EACAC,EACAqB,GAIJ,IAAMC,EAAS,IAAI5C,EAAQ2C,GACrBd,EAAc7B,EAAQ8B,IAC1B9B,EAAQ2B,KAAKL,GACbtB,EAAQ2B,KAAKP,IAEf,OAAOwB,EAAOlB,IAAIG,IAtGtBX,EAyGgB2B,sBAAP,SACLzB,EACAC,EACAC,EACAW,EACAa,GAEA,IAAMC,EAAYhJ,KAAKiI,wBACrBZ,EACAC,EACAC,EACAW,GAEFe,QAAQC,IAAI,cAAgBF,GAE5B,IAAMtB,EAAU,IAAIzB,EAAQ+C,GACtBnB,EAAU7H,KAAK0I,mBAAmBrB,EAAgBE,GACxD,OAAOG,EAAQyB,IAAItB,GAAS1B,YA1HhCgB,EA6HgBiC,sBAAP,SACL/B,EACAC,EACAC,EACAqB,EACAS,GAEA,IAAML,EAAYhJ,KAAK2I,wBACrBtB,EACAC,EACAC,EACAqB,GAGFK,QAAQC,IAAI,cAAgBF,GAE5B,IAAMtB,EAAU,IAAIzB,EAAQ+C,GACtBnB,EAAU7H,KAAKuI,mBAAmBhB,EAAYD,GACpD,OAAOI,EAAQyB,IAAItB,GAAS1B,YA/IhCgB,EAkJgBmC,qBAAP,SACLjC,EACAC,EACAC,EACAyB,EACAD,EACAM,GAEA,IAAMlB,EAAK,IAAIlC,EAAQsB,GAEjBG,EAAU,IAAIzB,EAAQ+C,GAE5B,IAAoC,IAAhCb,EAAGC,SAASf,GAA0B,CACxC,IAAMQ,EAAU7H,KAAKuI,mBAAmBlB,EAAgBC,GACxD,MAAO,CACLY,QAASnC,EAAgB2B,EAAQyB,IAAItB,GAAUkB,EAAO7F,SACtD0F,QAAS,KAEN,IAAwC,IAApCT,EAAGE,YAAYf,GAA2B,CACnD,IAAMO,EAAU7H,KAAK0I,mBAAmBrB,EAAgBC,GACxD,MAAO,CACLY,QAAS,IACTU,QAAS7C,EAAgB2B,EAAQyB,IAAItB,GAAUwB,EAAOnG,UAG1D,IAAMqG,EAAcvJ,KAAKuI,mBAAmBhB,EAAYD,GAClDkC,EAAcxJ,KAAK0I,mBAAmBrB,EAAgBE,GAC5D,MAAO,CACLW,QAASnC,EAAgB2B,EAAQyB,IAAII,GAAcR,EAAO7F,SAC1D0F,QAAS7C,EAAgB2B,EAAQyB,IAAIK,GAAcH,EAAOnG,gBC7KnDuG,aAAb,cAAA,OAAAA,EAqBiBC,mBAAP,SAA0BC,GAChC,IAAMlC,EAAYxB,EAAQ2D,KAAK3D,EAAQ2B,KAAK+B,IACtC7B,EAAc7B,EAAQ2D,KAAK3D,EAAQ2B,KNvBf,SMwB1B,OAAOH,EAAUE,IAAIG,GAAa+B,YAxBtCJ,EAgCgBK,sBAAP,SACLC,EACApG,GAGA,GAAe,KADAA,EAAMqG,OAEnB,OAAOhK,KAAKiK,aAEd,GAAItG,IAAU3D,KAAKkK,eACjB,OAAOlK,KAAKmK,SAEd,GAAIxG,IAAU3D,KAAKoK,eACjB,OAAOpK,KAAKqK,SAEd,IAAMC,EAAetK,KAAK0J,mBAAmB/F,GAI7C,OAFe3D,KAAKuK,kBAAkBD,EAAM3E,EAAcoE,KAhD9DN,EAqDgBe,wBAAP,SACLF,EACAG,GAEA,GAAIH,IAAStK,KAAKiK,aAChB,MAAO,GAET,GAAIjK,KAAK0K,aAAaJ,EAAMG,GAC1B,OAAOzK,KAAKkK,eAEd,GAAIlK,KAAK2K,cAAcL,EAAMG,GAC3B,OAAOzK,KAAKoK,eAEd,IAAMQ,EAAO3E,EAAQ4E,IAAI5E,EAAQ2B,KNlEP,QMkE6B0C,GACvD,OAAOrE,EAAQ4E,IAAID,EAAM,GAAGzE,YAnEhCsD,EAsEgBqB,eAAP,SAAsBR,GAC3B,GAAIA,IAAStK,KAAKiK,aAChB,MAAO,GAQT,IAAMW,EAAO3E,EAAQ4E,IAAI5E,EAAQ2B,KNhFP,QMgF6B0C,GACvD,OAAOrE,EAAQ4E,IAAID,EAAM,GAAGzE,YAjFhCsD,EAoFgBsB,uBAAP,SACLhB,EACAJ,GAGA,IAAMqB,EAAchL,KAAK8J,sBAAsBC,EAAWJ,GAI1D,OAAOrD,EAHQtG,KAAK8K,eAAeE,KA1FvCvB,EAgGgBwB,oBAAP,SAA2BC,GAChC,OAAKA,EAGa,MAAdA,EACK,IAEF,IAAIjF,EAAQiF,GAAWL,IAAI,GAAG1E,WAL5B,IAlGbsD,EA0GgB0B,oBAAP,SAA2BxB,GAChC,MAAc,MAAVA,EACK,IAEF,IAAI1D,EAAQ0D,GAAO/B,OAAOzB,YA9GrCsD,EAiHgB2B,iBAAP,SACLC,EACAC,EACAb,EACAc,EACAC,GAEA,IAAIC,EACAC,EA8BJ,OA7BI7E,EAAYwE,EAAWC,IACzBG,EACEF,IAAc9B,EAASS,eACnBT,EAASkC,qBAAqBlB,GAC9BhB,EAASK,sBAAsBW,EAAKc,GAC1CG,EACEF,IAAe/B,EAASW,eACpBX,EAASmC,sBAAsBnB,GAC/BhB,EAASK,sBAAsBW,EAAKe,KAGxCE,EADEH,IAAc9B,EAASS,eACbT,EAASmC,sBAAsBnB,GAE/BhB,EAASK,sBACnBW,EACA,IAAIxE,EAAQ,GAAG0B,IAAI4D,GAAWpF,YAIhCsF,EADED,IAAe/B,EAASW,eACdX,EAASkC,qBAAqBlB,GAE9BhB,EAASK,sBACnBW,EACA,IAAIxE,EAAQ,GAAG0B,IAAI6D,GAAYrF,aAIrC8C,QAAQC,IAAI,cAAgBuC,GAC5BxC,QAAQC,IAAI,cAAgBwC,GACrB,CACLD,UAAAA,EACAC,UAAAA,IAzJNjC,EA6JgBkC,qBAAP,SAA4BlB,GAGjC,OAFkBzK,KAAKuK,kBAAkBvK,KAAKmK,SAAUxE,EAAc8E,KA9J1EhB,EAmKgBmC,sBAAP,SAA6BnB,GAGlC,OAFkBzK,KAAKuK,kBAAkBvK,KAAKqK,SAAU1E,EAAc8E,KApK1EhB,EAyKgBoC,2BAAP,SAAkCpB,GAIvC,IAAMgB,EAAYzL,KAAKuK,kBAAkBvK,KAAKmK,SAAUxE,EAAc8E,IAChEiB,EAAY1L,KAAKuK,kBAAkBvK,KAAKqK,SAAU1E,EAAc8E,IAGtE,MAAO,CACLqB,YAHkB9L,KAAK8K,eAAeW,GAItCM,aAHmB/L,KAAK8K,eAAeY,KAhL7CjC,EAuLgBkB,cAAP,SAAqBL,EAAqBG,GAE/C,OAAOH,GADatK,KAAK4L,sBAAsBnB,IAxLnDhB,EA4LgBiB,aAAP,SAAoBJ,EAAqBG,GAE9C,OAAOH,GADYtK,KAAK2L,qBAAqBlB,SA7LpChB,EACGQ,cAAgB,SADnBR,EAGGU,UAAY,OAHfV,EAKGS,eAAiB,IALpBT,EAOGY,UAAoBZ,EAASU,SAPhCV,EASGW,eAAiB,IATpBX,EAWGc,kBAAoB,SAChCD,EACA0B,GAEA,IAAMC,EAAUC,KAAKC,MAAM7B,EAAO0B,GAAeA,EACjD,OAAIC,EAAUxC,EAASU,SAAiB8B,EAAUD,EACzCC,EAAUxC,EAASY,SAAiB4B,EAAUD,EAC3CC,OCtBMG,EACpB,aCGWC,EAAkB,yBAgMlBC,EAAgB,CAC3BC,gBACEC,EACAC,GAiBA,gBAjBAA,IAAAA,EAAqBC,SAAWxM,UAER,KAApBsM,EAAQ1J,SACV2J,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ1J,SAEZ,KAAnB0J,EAAQK,QACVJ,EAAOE,OAAO,IAAIC,OAAOJ,EAAQK,QAEZ,KAAnBL,EAAQM,QACVL,EAAOE,OAAO,IAAIC,OAAOJ,EAAQM,QAEf,IAAhBN,EAAQ/B,KACVgC,EAAOE,OAAO,IAAII,MAAMP,EAAQ/B,KAER,KAAtB+B,EAAQtB,WACVuB,EAAOE,OAAO,IAAIC,OAAOJ,EAAQtB,WAE5BuB,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EA7BD,CAAE1J,QAAS,GAAI+J,OAAQ,GAAIC,OAAQ,GAAIrC,IAAK,EAAGS,UAAW,IA8BxDiC,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ1J,QAAUqK,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQK,OAASM,EAAOP,SACxB,MACF,KAAK,EACHJ,EAAQM,OAASK,EAAOP,SACxB,MACF,KAAK,EACHJ,EAAQ/B,IAAM0C,EAAOJ,QACrB,MACF,KAAK,EACHP,EAAQtB,UAAYiC,EAAOP,SAC3B,MACF,QACEO,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL7K,QAAS8K,GAAMD,EAAO7K,SAAWuD,OAAOsH,EAAO7K,SAAW,GAC1D+J,OAAQe,GAAMD,EAAOd,QAAUxG,OAAOsH,EAAOd,QAAU,GACvDC,OAAQc,GAAMD,EAAOb,QAAUzG,OAAOsH,EAAOb,QAAU,GACvDrC,IAAKmD,GAAMD,EAAOlD,KAAOoD,OAAOF,EAAOlD,KAAO,EAC9CS,UAAW0C,GAAMD,EAAOzC,WAAa7E,OAAOsH,EAAOzC,WAAa,KAIpE4C,gBAAOtB,GACL,IAAMuB,EAAW,GAMjB,YALoBV,IAApBb,EAAQ1J,UAA0BiL,EAAIjL,QAAU0J,EAAQ1J,cACrCuK,IAAnBb,EAAQK,SAAyBkB,EAAIlB,OAASL,EAAQK,aACnCQ,IAAnBb,EAAQM,SAAyBiB,EAAIjB,OAASN,EAAQM,aACtCO,IAAhBb,EAAQ/B,MAAsBsD,EAAItD,IAAMyB,KAAKC,MAAMK,EAAQ/B,WACrC4C,IAAtBb,EAAQtB,YAA4B6C,EAAI7C,UAAYsB,EAAQtB,WACrD6C,GAGTC,qBACEL,iBAEMnB,EA/ED,CAAE1J,QAAS,GAAI+J,OAAQ,GAAIC,OAAQ,GAAIrC,IAAK,EAAGS,UAAW,IAqF/D,OALAsB,EAAQ1J,iBAAU6K,EAAO7K,WAAW,GACpC0J,EAAQK,gBAASc,EAAOd,UAAU,GAClCL,EAAQM,gBAASa,EAAOb,UAAU,GAClCN,EAAQ/B,aAAMkD,EAAOlD,OAAO,EAC5B+B,EAAQtB,mBAAYyC,EAAOzC,aAAa,GACjCsB,IAmDX,SAASyB,IACP,MAAO,CACLnL,QAAS,GACT+J,OAAQ,GACRC,OAAQ,GACRrC,IAAK,EACLgB,UAAW,EACXC,UAAW,EACXwC,eAAgB,GAChBC,eAAgB,GAChBC,WAAY,GACZC,WAAY,GACZC,UAAW,GACXC,SAAUC,EAAKC,MAInB,IAAaC,EAAoB,CAC/BnC,gBACEC,EACAC,GAsCA,gBAtCAA,IAAAA,EAAqBC,SAAWxM,UAER,KAApBsM,EAAQ1J,SACV2J,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ1J,SAEZ,KAAnB0J,EAAQK,QACVJ,EAAOE,OAAO,IAAIC,OAAOJ,EAAQK,QAEZ,KAAnBL,EAAQM,QACVL,EAAOE,OAAO,IAAIC,OAAOJ,EAAQM,QAEf,IAAhBN,EAAQ/B,KACVgC,EAAOE,OAAO,IAAII,MAAMP,EAAQ/B,KAER,IAAtB+B,EAAQf,WACVgB,EAAOE,OAAO,IAAII,MAAMP,EAAQf,WAER,IAAtBe,EAAQd,WACVe,EAAOE,OAAO,IAAII,MAAMP,EAAQd,WAEH,KAA3Bc,EAAQ0B,gBACVzB,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ0B,gBAEJ,KAA3B1B,EAAQ2B,gBACV1B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ2B,gBAER,KAAvB3B,EAAQ4B,YACV3B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ4B,YAER,KAAvB5B,EAAQ6B,YACV5B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ6B,YAET,KAAtB7B,EAAQ8B,WACV7B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ8B,WAE9B9B,EAAQ+B,SAASI,UACpBlC,EAAOE,OAAO,IAAIiC,MAAMpC,EAAQ+B,UAE3B9B,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAAUyB,IACTd,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ1J,QAAUqK,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQK,OAASM,EAAOP,SACxB,MACF,KAAK,EACHJ,EAAQM,OAASK,EAAOP,SACxB,MACF,KAAK,EACHJ,EAAQ/B,IAAM0C,EAAOJ,QACrB,MACF,KAAK,EACHP,EAAQf,UAAY0B,EAAOJ,QAC3B,MACF,KAAK,EACHP,EAAQd,UAAYyB,EAAOJ,QAC3B,MACF,KAAK,EACHP,EAAQ0B,eAAiBf,EAAOP,SAChC,MACF,KAAK,EACHJ,EAAQ2B,eAAiBhB,EAAOP,SAChC,MACF,KAAK,EACHJ,EAAQ4B,WAAajB,EAAOP,SAC5B,MACF,KAAK,GACHJ,EAAQ6B,WAAalB,EAAOP,SAC5B,MACF,KAAK,GACHJ,EAAQ8B,UAAYnB,EAAOP,SAC3B,MACF,KAAK,GACHJ,EAAQ+B,SAAWpB,EAAOyB,QAC1B,MACF,QACEzB,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL7K,QAAS8K,GAAMD,EAAO7K,SAAWuD,OAAOsH,EAAO7K,SAAW,GAC1D+J,OAAQe,GAAMD,EAAOd,QAAUxG,OAAOsH,EAAOd,QAAU,GACvDC,OAAQc,GAAMD,EAAOb,QAAUzG,OAAOsH,EAAOb,QAAU,GACvDrC,IAAKmD,GAAMD,EAAOlD,KAAOoD,OAAOF,EAAOlD,KAAO,EAC9CgB,UAAWmC,GAAMD,EAAOlC,WAAaoC,OAAOF,EAAOlC,WAAa,EAChEC,UAAWkC,GAAMD,EAAOjC,WAAamC,OAAOF,EAAOjC,WAAa,EAChEwC,eAAgBN,GAAMD,EAAOO,gBACzB7H,OAAOsH,EAAOO,gBACd,GACJC,eAAgBP,GAAMD,EAAOQ,gBACzB9H,OAAOsH,EAAOQ,gBACd,GACJC,WAAYR,GAAMD,EAAOS,YAAc/H,OAAOsH,EAAOS,YAAc,GACnEC,WAAYT,GAAMD,EAAOU,YAAchI,OAAOsH,EAAOU,YAAc,GACnEC,UAAWV,GAAMD,EAAOW,WAAajI,OAAOsH,EAAOW,WAAa,GAChEC,SAAUX,GAAMD,EAAOY,UACnBC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,OAIbX,gBAAOtB,GACL,IAAMuB,EAAW,GAkBjB,YAjBoBV,IAApBb,EAAQ1J,UAA0BiL,EAAIjL,QAAU0J,EAAQ1J,cACrCuK,IAAnBb,EAAQK,SAAyBkB,EAAIlB,OAASL,EAAQK,aACnCQ,IAAnBb,EAAQM,SAAyBiB,EAAIjB,OAASN,EAAQM,aACtCO,IAAhBb,EAAQ/B,MAAsBsD,EAAItD,IAAMyB,KAAKC,MAAMK,EAAQ/B,WACrC4C,IAAtBb,EAAQf,YACLsC,EAAItC,UAAYS,KAAKC,MAAMK,EAAQf,iBAChB4B,IAAtBb,EAAQd,YACLqC,EAAIrC,UAAYQ,KAAKC,MAAMK,EAAQd,iBACX2B,IAA3Bb,EAAQ0B,iBACLH,EAAIG,eAAiB1B,EAAQ0B,qBACLb,IAA3Bb,EAAQ2B,iBACLJ,EAAII,eAAiB3B,EAAQ2B,qBACTd,IAAvBb,EAAQ4B,aAA6BL,EAAIK,WAAa5B,EAAQ4B,iBACvCf,IAAvBb,EAAQ6B,aAA6BN,EAAIM,WAAa7B,EAAQ6B,iBACxChB,IAAtBb,EAAQ8B,YAA4BP,EAAIO,UAAY9B,EAAQ8B,gBACvCjB,IAArBb,EAAQ+B,WACLR,EAAIQ,UAAY/B,EAAQ+B,UAAYC,EAAKC,MAAMtI,YAC3C4H,GAGTC,qBACEL,6BAEMnB,EAAUyB,IAgBhB,OAfAzB,EAAQ1J,iBAAU6K,EAAO7K,WAAW,GACpC0J,EAAQK,gBAASc,EAAOd,UAAU,GAClCL,EAAQM,gBAASa,EAAOb,UAAU,GAClCN,EAAQ/B,aAAMkD,EAAOlD,OAAO,EAC5B+B,EAAQf,mBAAYkC,EAAOlC,aAAa,EACxCe,EAAQd,mBAAYiC,EAAOjC,aAAa,EACxCc,EAAQ0B,wBAAiBP,EAAOO,kBAAkB,GAClD1B,EAAQ2B,wBAAiBR,EAAOQ,kBAAkB,GAClD3B,EAAQ4B,oBAAaT,EAAOS,cAAc,GAC1C5B,EAAQ6B,oBAAaV,EAAOU,cAAc,GAC1C7B,EAAQ8B,mBAAYX,EAAOW,aAAa,GACxC9B,EAAQ+B,SACNZ,MAAAA,EAAOY,SACHC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,KACJjC,IAmDX,SAASsC,IACP,MAAO,CACLhM,QAAS,GACTb,QAAS,GACTiM,eAAgB,GAChBC,eAAgB,GAChBC,WAAY,GACZC,WAAY,GACZE,SAAUC,EAAKC,MAInB,IAAaM,EAAuB,CAClCxC,gBACEC,EACAC,GAuBA,gBAvBAA,IAAAA,EAAqBC,SAAWxM,UAER,KAApBsM,EAAQ1J,SACV2J,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ1J,SAEX,KAApB0J,EAAQvK,SACVwK,EAAOE,OAAO,IAAIC,OAAOJ,EAAQvK,SAEJ,KAA3BuK,EAAQ0B,gBACVzB,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ0B,gBAEJ,KAA3B1B,EAAQ2B,gBACV1B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ2B,gBAER,KAAvB3B,EAAQ4B,YACV3B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ4B,YAER,KAAvB5B,EAAQ6B,YACV5B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ6B,YAE9B7B,EAAQ+B,SAASI,UACpBlC,EAAOE,OAAO,IAAIiC,MAAMpC,EAAQ+B,UAE3B9B,GAGTO,gBACEC,EACAC,GAKA,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAAUsC,IACT3B,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ1J,QAAUqK,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQvK,QAAUkL,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQ0B,eAAiBf,EAAOP,SAChC,MACF,KAAK,EACHJ,EAAQ2B,eAAiBhB,EAAOP,SAChC,MACF,KAAK,EACHJ,EAAQ4B,WAAajB,EAAOP,SAC5B,MACF,KAAK,EACHJ,EAAQ6B,WAAalB,EAAOP,SAC5B,MACF,KAAK,EACHJ,EAAQ+B,SAAWpB,EAAOyB,QAC1B,MACF,QACEzB,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL7K,QAAS8K,GAAMD,EAAO7K,SAAWuD,OAAOsH,EAAO7K,SAAW,GAC1Db,QAAS2L,GAAMD,EAAO1L,SAAWoE,OAAOsH,EAAO1L,SAAW,GAC1DiM,eAAgBN,GAAMD,EAAOO,gBACzB7H,OAAOsH,EAAOO,gBACd,GACJC,eAAgBP,GAAMD,EAAOQ,gBACzB9H,OAAOsH,EAAOQ,gBACd,GACJC,WAAYR,GAAMD,EAAOS,YAAc/H,OAAOsH,EAAOS,YAAc,GACnEC,WAAYT,GAAMD,EAAOU,YAAchI,OAAOsH,EAAOU,YAAc,GACnEE,SAAUX,GAAMD,EAAOY,UACnBC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,OAIbX,gBAAOtB,GACL,IAAMuB,EAAW,GAWjB,YAVoBV,IAApBb,EAAQ1J,UAA0BiL,EAAIjL,QAAU0J,EAAQ1J,cACpCuK,IAApBb,EAAQvK,UAA0B8L,EAAI9L,QAAUuK,EAAQvK,cAC7BoL,IAA3Bb,EAAQ0B,iBACLH,EAAIG,eAAiB1B,EAAQ0B,qBACLb,IAA3Bb,EAAQ2B,iBACLJ,EAAII,eAAiB3B,EAAQ2B,qBACTd,IAAvBb,EAAQ4B,aAA6BL,EAAIK,WAAa5B,EAAQ4B,iBACvCf,IAAvBb,EAAQ6B,aAA6BN,EAAIM,WAAa7B,EAAQ6B,iBACzChB,IAArBb,EAAQ+B,WACLR,EAAIQ,UAAY/B,EAAQ+B,UAAYC,EAAKC,MAAMtI,YAC3C4H,GAGTC,qBACEL,mBAEMnB,EAAUsC,IAWhB,OAVAtC,EAAQ1J,iBAAU6K,EAAO7K,WAAW,GACpC0J,EAAQvK,iBAAU0L,EAAO1L,WAAW,GACpCuK,EAAQ0B,wBAAiBP,EAAOO,kBAAkB,GAClD1B,EAAQ2B,wBAAiBR,EAAOQ,kBAAkB,GAClD3B,EAAQ4B,oBAAaT,EAAOS,cAAc,GAC1C5B,EAAQ6B,oBAAaV,EAAOU,cAAc,GAC1C7B,EAAQ+B,SACNZ,MAAAA,EAAOY,SACHC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,KACJjC,IAmDX,SAASwC,IACP,MAAO,CACLlM,QAAS,GACTb,QAAS,GACT+G,UAAW,GACXoF,WAAY,GACZC,WAAY,GACZE,SAAUC,EAAKC,MAInB,IAAaQ,GAAuB,CAClC1C,gBACEC,EACAC,GAoBA,gBApBAA,IAAAA,EAAqBC,SAAWxM,UAER,KAApBsM,EAAQ1J,SACV2J,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ1J,SAEX,KAApB0J,EAAQvK,SACVwK,EAAOE,OAAO,IAAIC,OAAOJ,EAAQvK,SAET,KAAtBuK,EAAQxD,WACVyD,EAAOE,OAAO,IAAIC,OAAOJ,EAAQxD,WAER,KAAvBwD,EAAQ4B,YACV3B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ4B,YAER,KAAvB5B,EAAQ6B,YACV5B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ6B,YAE9B7B,EAAQ+B,SAASI,UACpBlC,EAAOE,OAAO,IAAIiC,MAAMpC,EAAQ+B,UAE3B9B,GAGTO,gBACEC,EACAC,GAKA,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAAUwC,IACT7B,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ1J,QAAUqK,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQvK,QAAUkL,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQxD,UAAYmE,EAAOP,SAC3B,MACF,KAAK,EACHJ,EAAQ4B,WAAajB,EAAOP,SAC5B,MACF,KAAK,EACHJ,EAAQ6B,WAAalB,EAAOP,SAC5B,MACF,KAAK,EACHJ,EAAQ+B,SAAWpB,EAAOyB,QAC1B,MACF,QACEzB,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL7K,QAAS8K,GAAMD,EAAO7K,SAAWuD,OAAOsH,EAAO7K,SAAW,GAC1Db,QAAS2L,GAAMD,EAAO1L,SAAWoE,OAAOsH,EAAO1L,SAAW,GAC1D+G,UAAW4E,GAAMD,EAAO3E,WAAa3C,OAAOsH,EAAO3E,WAAa,GAChEoF,WAAYR,GAAMD,EAAOS,YAAc/H,OAAOsH,EAAOS,YAAc,GACnEC,WAAYT,GAAMD,EAAOU,YAAchI,OAAOsH,EAAOU,YAAc,GACnEE,SAAUX,GAAMD,EAAOY,UACnBC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,OAIbX,gBAAOtB,GACL,IAAMuB,EAAW,GAQjB,YAPoBV,IAApBb,EAAQ1J,UAA0BiL,EAAIjL,QAAU0J,EAAQ1J,cACpCuK,IAApBb,EAAQvK,UAA0B8L,EAAI9L,QAAUuK,EAAQvK,cAClCoL,IAAtBb,EAAQxD,YAA4B+E,EAAI/E,UAAYwD,EAAQxD,gBACrCqE,IAAvBb,EAAQ4B,aAA6BL,EAAIK,WAAa5B,EAAQ4B,iBACvCf,IAAvBb,EAAQ6B,aAA6BN,EAAIM,WAAa7B,EAAQ6B,iBACzChB,IAArBb,EAAQ+B,WACLR,EAAIQ,UAAY/B,EAAQ+B,UAAYC,EAAKC,MAAMtI,YAC3C4H,GAGTC,qBACEL,iBAEMnB,EAAUwC,IAUhB,OATAxC,EAAQ1J,iBAAU6K,EAAO7K,WAAW,GACpC0J,EAAQvK,iBAAU0L,EAAO1L,WAAW,GACpCuK,EAAQxD,mBAAY2E,EAAO3E,aAAa,GACxCwD,EAAQ4B,oBAAaT,EAAOS,cAAc,GAC1C5B,EAAQ6B,oBAAaV,EAAOU,cAAc,GAC1C7B,EAAQ+B,SACNZ,MAAAA,EAAOY,SACHC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,KACJjC,IA8DE0C,GAAa,CACxB3C,gBACEC,EACAC,GAoBA,gBApBAA,IAAAA,EAAqBC,SAAWxM,UAER,KAApBsM,EAAQ1J,SACV2J,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ1J,SAEX,KAApB0J,EAAQvK,SACVwK,EAAOE,OAAO,IAAIC,OAAOJ,EAAQvK,SAET,KAAtBuK,EAAQ8B,WACV7B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ8B,WAER,KAAvB9B,EAAQ2C,YACV1C,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ2C,YAER,KAAvB3C,EAAQ4C,YACV3C,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ4C,aAEP,IAAxB5C,EAAQ6C,aACV5C,EAAOE,OAAO,IAAI2C,KAAK9C,EAAQ6C,aAE1B5C,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAvCD,CACL1J,QAAS,GACTb,QAAS,GACTqM,UAAW,GACXa,WAAY,GACZC,WAAY,GACZC,aAAa,GAkCNlC,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ1J,QAAUqK,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQvK,QAAUkL,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQ8B,UAAYnB,EAAOP,SAC3B,MACF,KAAK,EACHJ,EAAQ2C,WAAahC,EAAOP,SAC5B,MACF,KAAK,EACHJ,EAAQ4C,WAAajC,EAAOP,SAC5B,MACF,KAAK,EACHJ,EAAQ6C,YAAclC,EAAOmC,OAC7B,MACF,QACEnC,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL7K,QAAS8K,GAAMD,EAAO7K,SAAWuD,OAAOsH,EAAO7K,SAAW,GAC1Db,QAAS2L,GAAMD,EAAO1L,SAAWoE,OAAOsH,EAAO1L,SAAW,GAC1DqM,UAAWV,GAAMD,EAAOW,WAAajI,OAAOsH,EAAOW,WAAa,GAChEa,WAAYvB,GAAMD,EAAOwB,YAAc9I,OAAOsH,EAAOwB,YAAc,GACnEC,WAAYxB,GAAMD,EAAOyB,YAAc/I,OAAOsH,EAAOyB,YAAc,GACnEC,cAAazB,GAAMD,EAAO0B,cACtBE,QAAQ5B,EAAO0B,eAKvBvB,gBAAOtB,GACL,IAAMuB,EAAW,GAQjB,YAPoBV,IAApBb,EAAQ1J,UAA0BiL,EAAIjL,QAAU0J,EAAQ1J,cACpCuK,IAApBb,EAAQvK,UAA0B8L,EAAI9L,QAAUuK,EAAQvK,cAClCoL,IAAtBb,EAAQ8B,YAA4BP,EAAIO,UAAY9B,EAAQ8B,gBACrCjB,IAAvBb,EAAQ2C,aAA6BpB,EAAIoB,WAAa3C,EAAQ2C,iBACvC9B,IAAvBb,EAAQ4C,aAA6BrB,EAAIqB,WAAa5C,EAAQ4C,iBACtC/B,IAAxBb,EAAQ6C,cACLtB,EAAIsB,YAAc7C,EAAQ6C,aACtBtB,GAGTC,qBACEL,mBAEMnB,EAjGD,CACL1J,QAAS,GACTb,QAAS,GACTqM,UAAW,GACXa,WAAY,GACZC,WAAY,GACZC,aAAa,GAkGb,OANA7C,EAAQ1J,iBAAU6K,EAAO7K,WAAW,GACpC0J,EAAQvK,iBAAU0L,EAAO1L,WAAW,GACpCuK,EAAQ8B,mBAAYX,EAAOW,aAAa,GACxC9B,EAAQ2C,oBAAaxB,EAAOwB,cAAc,GAC1C3C,EAAQ4C,oBAAazB,EAAOyB,cAAc,GAC1C5C,EAAQ6C,qBAAc1B,EAAO0B,gBACtB7C,IAgDX,SAASgD,KACP,MAAO,CACL1M,QAAS,GACTwL,UAAW,GACXmB,SAAU,GACVC,aAAc,GACdC,OAAQ,GACRC,KAAM,GACNrB,SAAUC,EAAKC,MAInB,IAAaoB,GAAiB,CAC5BtD,gBACEC,EACAC,YAAAA,IAAAA,EAAqBC,SAAWxM,UAER,KAApBsM,EAAQ1J,SACV2J,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ1J,SAET,KAAtB0J,EAAQ8B,WACV7B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ8B,WAEV,KAArB9B,EAAQiD,UACVhD,EAAOE,OAAO,IAAIC,OAAOJ,EAAQiD,UAEN,KAAzBjD,EAAQkD,cACVjD,EAAOE,OAAO,IAAIC,OAAOJ,EAAQkD,cAEnC,cAAgBlD,EAAQmD,uBAAQ,CAAA,IAArBG,UACTrD,EAAOE,OAAO,IAAIC,OAAOkD,GAE3BrD,EAAOE,OAAO,IAAIoD,OAClB,cAAgBvD,EAAQoD,qBACtBnD,EAAOM,eAMT,OAJAN,EAAOuD,SACFxD,EAAQ+B,SAASI,UACpBlC,EAAOE,OAAO,IAAIiC,MAAMpC,EAAQ+B,UAE3B9B,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAAUgD,KACTrC,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ1J,QAAUqK,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQ8B,UAAYnB,EAAOP,SAC3B,MACF,KAAK,EACHJ,EAAQiD,SAAWtC,EAAOP,SAC1B,MACF,KAAK,EACHJ,EAAQkD,aAAevC,EAAOP,SAC9B,MACF,KAAK,EACHJ,EAAQmD,OAAOM,KAAK9C,EAAOP,UAC3B,MACF,KAAK,EACH,GAAkB,IAAP,EAANY,GAEH,IADA,IAAM0C,EAAO/C,EAAOR,SAAWQ,EAAOI,IAC/BJ,EAAOI,IAAM2C,GAClB1D,EAAQoD,KAAKK,KAAK9C,EAAOJ,cAG3BP,EAAQoD,KAAKK,KAAK9C,EAAOJ,SAE3B,MACF,KAAK,EACHP,EAAQ+B,SAAWpB,EAAOyB,QAC1B,MACF,QACEzB,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL7K,QAAS8K,GAAMD,EAAO7K,SAAWuD,OAAOsH,EAAO7K,SAAW,GAC1DwL,UAAWV,GAAMD,EAAOW,WAAajI,OAAOsH,EAAOW,WAAa,GAChEmB,SAAU7B,GAAMD,EAAO8B,UAAYpJ,OAAOsH,EAAO8B,UAAY,GAC7DC,aAAc9B,GAAMD,EAAO+B,cACvBrJ,OAAOsH,EAAO+B,cACd,GACJC,OAAQQ,MAAMC,cAAQzC,SAAAA,EAAQgC,QAC1BhC,EAAOgC,OAAOU,KAAI,SAACjK,GAAD,OAAYC,OAAOD,MACrC,GACJwJ,KAAMO,MAAMC,cAAQzC,SAAAA,EAAQiC,MACxBjC,EAAOiC,KAAKS,KAAI,SAACjK,GAAD,OAAYyH,OAAOzH,MACnC,GACJmI,SAAUX,GAAMD,EAAOY,UACnBC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,OAIbX,gBAAOtB,GACL,IAAMuB,EAAW,GAkBjB,YAjBoBV,IAApBb,EAAQ1J,UAA0BiL,EAAIjL,QAAU0J,EAAQ1J,cAClCuK,IAAtBb,EAAQ8B,YAA4BP,EAAIO,UAAY9B,EAAQ8B,gBACvCjB,IAArBb,EAAQiD,WAA2B1B,EAAI0B,SAAWjD,EAAQiD,eACjCpC,IAAzBb,EAAQkD,eACL3B,EAAI2B,aAAelD,EAAQkD,cAE5B3B,EAAI4B,OADFnD,EAAQmD,OACGnD,EAAQmD,OAAOU,KAAI,SAACjK,GAAD,OAAOA,KAE1B,GAGb2H,EAAI6B,KADFpD,EAAQoD,KACCpD,EAAQoD,KAAKS,KAAI,SAACjK,GAAD,OAAO8F,KAAKC,MAAM/F,MAEnC,QAEQiH,IAArBb,EAAQ+B,WACLR,EAAIQ,UAAY/B,EAAQ+B,UAAYC,EAAKC,MAAMtI,YAC3C4H,GAGTC,qBACEL,mBAEMnB,EAAUgD,KAWhB,OAVAhD,EAAQ1J,iBAAU6K,EAAO7K,WAAW,GACpC0J,EAAQ8B,mBAAYX,EAAOW,aAAa,GACxC9B,EAAQiD,kBAAW9B,EAAO8B,YAAY,GACtCjD,EAAQkD,sBAAe/B,EAAO+B,gBAAgB,GAC9ClD,EAAQmD,iBAAShC,EAAOgC,iBAAQU,KAAI,SAACjK,GAAD,OAAOA,OAAM,GACjDoG,EAAQoD,eAAOjC,EAAOiC,eAAMS,KAAI,SAACjK,GAAD,OAAOA,OAAM,GAC7CoG,EAAQ+B,SACNZ,MAAAA,EAAOY,SACHC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,KACJjC,IAmDX,SAAS8D,KACP,MAAO,CACLxN,QAAS,GACTwL,UAAW,GACXiC,UAAW,GACXC,YAAa,GACbb,OAAQ,GACRC,KAAM,GACNrB,SAAUC,EAAKC,MAInB,IC5sCiBgC,GAoBAC,GAoBAb,GAoBAvD,GAoBA4C,GAoBAR,GAoBAO,GAoBAF,GDgkCJ2B,GAAkB,CAC7BnE,gBACEC,EACAC,YAAAA,IAAAA,EAAqBC,SAAWxM,UAER,KAApBsM,EAAQ1J,SACV2J,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ1J,SAET,KAAtB0J,EAAQ8B,WACV7B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ8B,WAET,KAAtB9B,EAAQ+D,WACV9D,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ+D,WAEP,KAAxB/D,EAAQgE,aACV/D,EAAOE,OAAO,IAAIC,OAAOJ,EAAQgE,aAEnC,cAAgBhE,EAAQmD,uBAAQ,CAAA,IAArBG,UACTrD,EAAOE,OAAO,IAAIC,OAAOkD,GAE3BrD,EAAOE,OAAO,IAAIoD,OAClB,cAAgBvD,EAAQoD,qBACtBnD,EAAOM,eAMT,OAJAN,EAAOuD,SACFxD,EAAQ+B,SAASI,UACpBlC,EAAOE,OAAO,IAAIiC,MAAMpC,EAAQ+B,UAE3B9B,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAAU8D,KACTnD,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ1J,QAAUqK,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQ8B,UAAYnB,EAAOP,SAC3B,MACF,KAAK,EACHJ,EAAQ+D,UAAYpD,EAAOP,SAC3B,MACF,KAAK,EACHJ,EAAQgE,YAAcrD,EAAOP,SAC7B,MACF,KAAK,EACHJ,EAAQmD,OAAOM,KAAK9C,EAAOP,UAC3B,MACF,KAAK,EACH,GAAkB,IAAP,EAANY,GAEH,IADA,IAAM0C,EAAO/C,EAAOR,SAAWQ,EAAOI,IAC/BJ,EAAOI,IAAM2C,GAClB1D,EAAQoD,KAAKK,KAAK9C,EAAOJ,cAG3BP,EAAQoD,KAAKK,KAAK9C,EAAOJ,SAE3B,MACF,KAAK,EACHP,EAAQ+B,SAAWpB,EAAOyB,QAC1B,MACF,QACEzB,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL7K,QAAS8K,GAAMD,EAAO7K,SAAWuD,OAAOsH,EAAO7K,SAAW,GAC1DwL,UAAWV,GAAMD,EAAOW,WAAajI,OAAOsH,EAAOW,WAAa,GAChEiC,UAAW3C,GAAMD,EAAO4C,WAAalK,OAAOsH,EAAO4C,WAAa,GAChEC,YAAa5C,GAAMD,EAAO6C,aAAenK,OAAOsH,EAAO6C,aAAe,GACtEb,OAAQQ,MAAMC,cAAQzC,SAAAA,EAAQgC,QAC1BhC,EAAOgC,OAAOU,KAAI,SAACjK,GAAD,OAAYC,OAAOD,MACrC,GACJwJ,KAAMO,MAAMC,cAAQzC,SAAAA,EAAQiC,MACxBjC,EAAOiC,KAAKS,KAAI,SAACjK,GAAD,OAAYyH,OAAOzH,MACnC,GACJmI,SAAUX,GAAMD,EAAOY,UACnBC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,OAIbX,gBAAOtB,GACL,IAAMuB,EAAW,GAkBjB,YAjBoBV,IAApBb,EAAQ1J,UAA0BiL,EAAIjL,QAAU0J,EAAQ1J,cAClCuK,IAAtBb,EAAQ8B,YAA4BP,EAAIO,UAAY9B,EAAQ8B,gBACtCjB,IAAtBb,EAAQ+D,YAA4BxC,EAAIwC,UAAY/D,EAAQ+D,gBACpClD,IAAxBb,EAAQgE,cACLzC,EAAIyC,YAAchE,EAAQgE,aAE3BzC,EAAI4B,OADFnD,EAAQmD,OACGnD,EAAQmD,OAAOU,KAAI,SAACjK,GAAD,OAAOA,KAE1B,GAGb2H,EAAI6B,KADFpD,EAAQoD,KACCpD,EAAQoD,KAAKS,KAAI,SAACjK,GAAD,OAAO8F,KAAKC,MAAM/F,MAEnC,QAEQiH,IAArBb,EAAQ+B,WACLR,EAAIQ,UAAY/B,EAAQ+B,UAAYC,EAAKC,MAAMtI,YAC3C4H,GAGTC,qBACEL,mBAEMnB,EAAU8D,KAWhB,OAVA9D,EAAQ1J,iBAAU6K,EAAO7K,WAAW,GACpC0J,EAAQ8B,mBAAYX,EAAOW,aAAa,GACxC9B,EAAQ+D,mBAAY5C,EAAO4C,aAAa,GACxC/D,EAAQgE,qBAAc7C,EAAO6C,eAAe,GAC5ChE,EAAQmD,iBAAShC,EAAOgC,iBAAQU,KAAI,SAACjK,GAAD,OAAOA,OAAM,GACjDoG,EAAQoD,eAAOjC,EAAOiC,eAAMS,KAAI,SAACjK,GAAD,OAAOA,OAAM,GAC7CoG,EAAQ+B,SACNZ,MAAAA,EAAOY,SACHC,EAAKK,UAAUlB,EAAOY,UACtBC,EAAKC,KACJjC,IAmWEiE,GAAmB,CAC9BlE,gBACEC,EACAC,GAcA,gBAdAA,IAAAA,EAAqBC,SAAWxM,UAER,KAApBsM,EAAQ1J,SACV2J,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ1J,SAEX,KAApB0J,EAAQvK,SACVwK,EAAOE,OAAO,IAAIC,OAAOJ,EAAQvK,SAET,KAAtBuK,EAAQ8B,WACV7B,EAAOE,OAAO,IAAIC,OAAOJ,EAAQ8B,YAEP,IAAxB9B,EAAQ6C,aACV5C,EAAOE,OAAO,IAAI2C,KAAK9C,EAAQ6C,aAE1B5C,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EA1BD,CAAE1J,QAAS,GAAIb,QAAS,GAAIqM,UAAW,GAAIe,aAAa,GA2BtDlC,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ1J,QAAUqK,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQvK,QAAUkL,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQ8B,UAAYnB,EAAOP,SAC3B,MACF,KAAK,EACHJ,EAAQ6C,YAAclC,EAAOmC,OAC7B,MACF,QACEnC,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL7K,QAAS8K,GAAMD,EAAO7K,SAAWuD,OAAOsH,EAAO7K,SAAW,GAC1Db,QAAS2L,GAAMD,EAAO1L,SAAWoE,OAAOsH,EAAO1L,SAAW,GAC1DqM,UAAWV,GAAMD,EAAOW,WAAajI,OAAOsH,EAAOW,WAAa,GAChEe,cAAazB,GAAMD,EAAO0B,cACtBE,QAAQ5B,EAAO0B,eAKvBvB,gBAAOtB,GACL,IAAMuB,EAAW,GAMjB,YALoBV,IAApBb,EAAQ1J,UAA0BiL,EAAIjL,QAAU0J,EAAQ1J,cACpCuK,IAApBb,EAAQvK,UAA0B8L,EAAI9L,QAAUuK,EAAQvK,cAClCoL,IAAtBb,EAAQ8B,YAA4BP,EAAIO,UAAY9B,EAAQ8B,gBACpCjB,IAAxBb,EAAQ6C,cACLtB,EAAIsB,YAAc7C,EAAQ6C,aACtBtB,GAGTC,qBACEL,eAEMnB,EA1ED,CAAE1J,QAAS,GAAIb,QAAS,GAAIqM,UAAW,GAAIe,aAAa,GA+E7D,OAJA7C,EAAQ1J,iBAAU6K,EAAO7K,WAAW,GACpC0J,EAAQvK,iBAAU0L,EAAO1L,WAAW,GACpCuK,EAAQ8B,mBAAYX,EAAOW,aAAa,GACxC9B,EAAQ6C,qBAAc1B,EAAO0B,gBACtB7C,IAgjCX,SAASoB,GAAMjK,GACb,OAAOA,MAAAA,EE9sFT,SAASgN,KACP,MAAO,CAAEC,QAAS,GAAIjN,MAAO,IAAIkN,YFusF/BnE,OAAS8B,OAASA,IACpB9B,OAAS8B,KAAOA,EAChB9B,eCtzFW+D,qCAEX,WAAYK,gBACVC,sBAFKC,gBAGLD,EAAKC,SAAWF,IAJpB,OAAA7P,mBAMEgQ,gBAAA,WACE,MAAO,CACLL,QAAStE,sBAAcsE,QACvBjN,MAAOuN,GAAoBlD,YAAYhO,KAAKgR,eATZ5E,IAcrBqE,GAAAA,2BAAAA,0CACoBpE,sBACtBoE,SAAQS,GAIVR,oCAEX,WAAYI,gBACVK,sBAFKH,gBAGLG,EAAKH,SAAWF,IAJpB,OAAA7P,mBAMEgQ,gBAAA,WACE,MAAO,CACLL,QAASF,EAAgBE,QACzBjN,MAAOyN,GAAmBpD,YAAYhO,KAAKgR,eATZ5E,IAcpBsE,GAAAA,0BAAAA,yCACoBrE,qBACtBqE,SAAQU,GAIVvB,mCAEX,WAAYiB,gBACVO,sBAFKL,gBAGLK,EAAKL,SAAWF,IAJpB,OAAA7P,mBAMEgQ,gBAAA,WACE,MAAO,CACLL,QAAStE,sBAAcsE,QACvBjN,MAAO2N,GAAkBtD,YAAYhO,KAAKgR,eATZ5E,IAcnByD,GAAAA,yBAAAA,wCACoBxD,oBACtBwD,SAAQyB,GAIVhF,kCAEX,WAAYwE,gBACVS,sBAFKP,gBAGLO,EAAKP,SAAWF,IAJpB,OAAA7P,mBAMEgQ,gBAAA,WACE,MAAO,CACLL,QAAStE,EAAcsE,QACvBjN,MAAO6N,EAAiBxD,YAAYhO,KAAKgR,eATZ5E,IAclBE,GAAAA,wBAAAA,uCACoBD,mBACtBC,SAAQkF,EAIVtC,+BAEX,WAAY4B,gBACVW,sBAFKT,gBAGLS,EAAKT,SAAWF,IAJpB,OAAA7P,mBAMEgQ,gBAAA,WACE,MAAO,CACLL,QAAS1B,EAAW0B,QACpBjN,MAAO+N,GAAc1D,YAAYhO,KAAKgR,eATZ5E,IAcf8C,GAAAA,qBAAAA,oCACoB7C,gBACtB6C,SAAQwC,GAIVhD,sCAEX,WAAYoC,gBACVa,sBAFKX,gBAGLW,EAAKX,SAAWF,IAJpB,OAAA7P,mBAMEgQ,gBAAA,WACE,MAAO,CACLL,QAASlC,EAAkBkC,QAC3BjN,MAAOiO,EAAqB5D,YAAYhO,KAAKgR,eATZ5E,IActBsC,GAAAA,4BAAAA,2CACoBrC,uBACtBqC,SAAQkD,EAIV3C,yCAEX,WAAY6B,gBACVe,sBAFKb,gBAGLa,EAAKb,SAAWF,IAJpB,OAAA7P,mBAMEgQ,gBAAA,WACE,MAAO,CACLL,QAAS3B,EAAqB2B,QAC9BjN,MAAOmO,GAAwB9D,YAAYhO,KAAKgR,eATZ5E,IAczB6C,GAAAA,+BAAAA,8CACoB5C,0BACtB4C,SAAQ6C,GAIV/C,yCAEX,WAAY+B,gBACViB,sBAFKf,gBAGLe,EAAKf,SAAWF,IAJpB,OAAA7P,mBAMEgQ,gBAAA,WACE,MAAO,CACLL,QAAS7B,EAAqB6B,QAC9BjN,MAAOqO,EAAwBhE,YAAYhO,KAAKgR,eATZ5E,IAczB2C,GAAAA,+BAAAA,8CACoB1C,0BACtB0C,SAAQiD,EEyBnBtF,OAAS8B,OAASA,IACpB9B,OAAS8B,KAAOA,EAChB9B,eDvEF,IAAauF,YAWJhF,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAAUmE,KACTxD,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQoE,QAAUzD,EAAOP,SACzB,MACF,KAAK,EACHJ,EAAQ7I,MAAQwJ,EAAO+E,QACvB,MACF,QACE/E,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GA7BEyF,YAgCFtE,GACP,MAAO,CACLiD,QAAShD,GAAMD,EAAOiD,SAAWvK,OAAOsH,EAAOiD,SAAW,GAC1DjN,MAAOiK,GAAMD,EAAOhK,OAChBwO,GAAgBxE,EAAOhK,OACvB,IAAIkN,aAyBVuB,GAAmB,WACrB,QAA0B,IAAfA,GAA4B,OAAOA,GAC9C,GAAoB,oBAATC,KAAsB,OAAOA,KACxC,GAAsB,oBAAXC,OAAwB,OAAOA,OAC1C,GAAsB,oBAAXC,OAAwB,OAAOA,OAC1C,KAAM,iCALe,GAQjBC,GACJJ,GAAWI,MACV,SAACC,GAAD,OAASL,GAAWM,OAAOC,KAAKF,EAAK,UAAUtM,SAAS,WAC3D,SAASgM,GAAgBM,GAGvB,IAFA,IAAMG,EAAMJ,GAAKC,GACXI,EAAM,IAAIhC,WAAW+B,EAAI1F,QACtB4F,EAAI,EAAGA,EAAIF,EAAI1F,SAAU4F,EAChCD,EAAIC,GAAKF,EAAIG,WAAWD,GAE1B,OAAOD,EAGT,IAAMG,GACJZ,GAAWY,MACV,SAACJ,GAAD,OAASR,GAAWM,OAAOC,KAAKC,EAAK,UAAUzM,SAAS,WA2C3D,SAASyH,GAAMjK,GACb,OAAOA,MAAAA,WEtKAsP,KACP,MAAO,CAAEC,gBAAiB,EAAGC,MAAO,IAAItC,YF+JtCnE,OAAS8B,OAASA,IACpB9B,OAAS8B,KAAOA,EAChB9B,eE9JF,IAAa0G,YAcJnG,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAAUyG,KACT9F,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ0G,gBAAkB/F,EAAOR,SACjC,MACF,KAAK,EACHH,EAAQ2G,MAAQhG,EAAO+E,QACvB,MACF,QACE/E,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAhCE4G,YAmCFzF,GACP,MAAO,CACLuF,gBAAiBtF,GAAMD,EAAOuF,iBAC1BrF,OAAOF,EAAOuF,iBACd,EACJC,MAAOvF,GAAMD,EAAOwF,OAChBhB,GAAgBxE,EAAOwF,OACvB,IAAItC,aA4BVuB,GAAmB,WACrB,QAA0B,IAAfA,GAA4B,OAAOA,GAC9C,GAAoB,oBAATC,KAAsB,OAAOA,KACxC,GAAsB,oBAAXC,OAAwB,OAAOA,OAC1C,GAAsB,oBAAXC,OAAwB,OAAOA,OAC1C,KAAM,iCALe,GAQjBC,GACJJ,GAAWI,MACV,SAACC,GAAD,OAASL,GAAWM,OAAOC,KAAKF,EAAK,UAAUtM,SAAS,WAC3D,SAASgM,GAAgBM,GAGvB,IAFA,IAAMG,EAAMJ,GAAKC,GACXI,EAAM,IAAIhC,WAAW+B,EAAI1F,QACtB4F,EAAI,EAAGA,EAAIF,EAAI1F,SAAU4F,EAChCD,EAAIC,GAAKF,EAAIG,WAAWD,GAE1B,OAAOD,EAGT,IC7KYQ,GD6KNL,GACJZ,GAAWY,MACV,SAACJ,GAAD,OAASR,GAAWM,OAAOC,KAAKC,EAAK,UAAUzM,SAAS,WA2C3D,SAASyH,GAAMjK,GACb,OAAOA,MAAAA,WClMO2P,GAAiB3F,GAC/B,OAAQA,GACN,KAAK,EACL,IAAK,wBACH,OAAO0F,GAASE,sBAClB,KAAK,EACL,IAAK,mBACH,OAAOF,GAASG,iBAClB,KAAK,EACL,IAAK,oBACH,OAAOH,GAASI,kBAClB,KAAK,IACL,IAAK,8BACH,OAAOJ,GAASK,4BAClB,KAAM,EACN,IAAK,eACL,QACE,OAAOL,GAASM,cD2KlBjH,OAAS8B,OAASA,IACpB9B,OAAS8B,KAAOA,EAChB9B,eCvNF,SAAY2G,GAKVA,qDAKAA,2CAMAA,6CAKAA,mEACAA,oCAtBF,CAAYA,KAAAA,QAqlBR3G,OAAS8B,OAASA,IACpB9B,OAAS8B,KAAOA,EAChB9B,eCtjBF,IAAakH,YACJpH,EAAeC,GAOpB,gBAPoBA,IAAAA,EAAqBC,SAAWxM,UAC9B,KAAlBsM,EAAQnL,OACVoL,EAAOE,OAAO,IAAIC,OAAOJ,EAAQnL,OAEZ,KAAnBmL,EAAQhF,QACViF,EAAOE,OAAO,IAAIC,OAAOJ,EAAQhF,QAE5BiF,GAREmH,YAWJ3G,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAjBD,CAAEnL,MAAO,GAAImG,OAAQ,IAkBnB2F,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQnL,MAAQ8L,EAAOP,SACvB,MACF,KAAK,EACHJ,EAAQhF,OAAS2F,EAAOP,SACxB,MACF,QACEO,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GA7BEoH,YA8CwCjG,WAC3CnB,EAlDD,CAAEnL,MAAO,GAAImG,OAAQ,IAqD1B,OAFAgF,EAAQnL,eAAQsM,EAAOtM,SAAS,GAChCmL,EAAQhF,gBAASmG,EAAOnG,UAAU,GAC3BgF,GA2MX,SAASoB,GAAMjK,GACb,OAAOA,MAAAA,EANL+I,OAAS8B,OAASA,IACpB9B,OAAS8B,KAAOA,EAChB9B,eCuBF,IAAamH,YACJrH,EAAgBC,YAAAA,IAAAA,EAAqBC,SAAWxM,UACpB,IAA7BsM,EAAQsH,UAAU5G,QACpBT,EAAOE,OAAO,IAAIuF,MAAM1F,EAAQsH,WAEG,IAAjCtH,EAAQuH,cAAc7G,QACxBT,EAAOE,OAAO,IAAIuF,MAAM1F,EAAQuH,eAElC,cAAgBvH,EAAQwH,2BAAY,CAAA,IAAzBlE,UACTrD,EAAOE,OAAO,IAAIuF,MAAMpC,GAE1B,OAAOrD,GAXEoH,YA0EyClG,aAC5CnB,EAlFD,CACLsH,UAAW,IAAIjD,WACfkD,cAAe,IAAIlD,WACnBmD,WAAY,IAmFZ,OAHAxH,EAAQsH,mBAAYnG,EAAOmG,aAAa,IAAIjD,WAC5CrE,EAAQuH,uBAAgBpG,EAAOoG,iBAAiB,IAAIlD,WACpDrE,EAAQwH,qBAAarG,EAAOqG,qBAAY3D,KAAI,SAACjK,GAAD,OAAOA,OAAM,GAClDoG,GAgPEyH,YAETzH,EACAC,YAAAA,IAAAA,EAAqBC,SAAWxM,UAEhC,cAAgBsM,EAAQ0H,4BACtBC,GAAW5H,eAAWE,EAAOE,OAAO,IAAIoD,QAAQC,SAKlD,YAHoB3C,IAAhBb,EAAQ/B,KACV2J,GAAI7H,OAAOC,EAAQ/B,IAAKgC,EAAOE,OAAO,IAAIoD,QAAQC,SAE7CvD,GA2DX,SAAS4H,KACP,MAAO,CAAEC,eAAWjH,EAAWkH,cAAUlH,EAAWmH,SAAUhG,EAAKiG,OAGrE,IAAaN,GAAa,CACxB5H,gBACEC,EACAC,GAWA,gBAXAA,IAAAA,EAAqBC,SAAWxM,eAENmN,IAAtBb,EAAQ8H,oBL1kBP9H,EAAcC,GAOnB,gBAPmBA,IAAAA,EAAqBC,SAAWxM,UAC3B,KAApBsM,EAAQoE,SACVnE,EAAOE,OAAO,IAAIC,OAAOJ,EAAQoE,SAEN,IAAzBpE,EAAQ7I,MAAMuJ,QAChBT,EAAOE,OAAO,IAAIuF,MAAM1F,EAAQ7I,OAE3B8I,EKokBLwF,CAAWzF,EAAQ8H,UAAW7H,EAAOE,OAAO,IAAIoD,QAAQC,cAEjC3C,IAArBb,EAAQ+H,UACVG,GAASnI,OAAOC,EAAQ+H,SAAU9H,EAAOE,OAAO,IAAIoD,QAAQC,SAEzDxD,EAAQgI,SAAS7F,UACpBlC,EAAOE,OAAO,IAAIgI,OAAOnI,EAAQgI,UAE5B/H,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAAU6H,KACTlH,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ8H,UAAYrC,GAAW9E,EAAQA,EAAOR,UAC9C,MACF,KAAK,EACHH,EAAQ+H,SAAWG,GAAS1H,OAAOG,EAAQA,EAAOR,UAClD,MACF,KAAK,EACHH,EAAQgI,SAAWrH,EAAOwH,SAC1B,MACF,QACExH,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL2G,UAAW1G,GAAMD,EAAO2G,WACpBrC,GAAatE,EAAO2G,gBACpBjH,EACJkH,SAAU3G,GAAMD,EAAO4G,UACnBG,GAAShH,SAASC,EAAO4G,eACzBlH,EACJmH,SAAU5G,GAAMD,EAAO6G,UACnBhG,EAAKK,UAAUlB,EAAO6G,UACtBhG,EAAKiG,QAIb3G,gBAAOtB,GACL,IAAMuB,EAAW,GAWjB,YAVsBV,IAAtBb,EAAQ8H,YACLvG,EAAIuG,UAAY9H,EAAQ8H,mBLvlBtB9H,GACL,IA2CqBqG,EACjBD,EA5CE7E,EAAW,GAMjB,YALoBV,IAApBb,EAAQoE,UAA0B7C,EAAI6C,QAAUpE,EAAQoE,cACtCvD,IAAlBb,EAAQ7I,QACLoK,EAAIpK,OAwCckP,OAvCCxF,IAAlBb,EAAQ7I,MAAsB6I,EAAQ7I,MAAQ,IAAIkN,WAwClD+B,EAAgB,GACtBC,EAAI+B,SAAQ,SAACC,GACXjC,EAAI3C,KAAK5J,OAAOyO,aAAaD,OAExB7B,GAAKJ,EAAIhR,KAAK,OA1CZmM,EKilBDkE,CAAWzF,EAAQ8H,gBACnBjH,QACeA,IAArBb,EAAQ+H,WACLxG,EAAIwG,SAAW/H,EAAQ+H,SACpBG,GAAS5G,OAAOtB,EAAQ+H,eACxBlH,QACeA,IAArBb,EAAQgI,WACLzG,EAAIyG,UAAYhI,EAAQgI,UAAYhG,EAAKiG,OAAOtO,YAC5C4H,GAGTC,qBACEL,GAEA,IAAMnB,EAAU6H,KAahB,OAZA7H,EAAQ8H,UACN3G,MAAAA,EAAO2G,mBL9lBuC3G,WAC1CnB,EAAUmE,KAGhB,OAFAnE,EAAQoE,iBAAUjD,EAAOiD,WAAW,GACpCpE,EAAQ7I,eAAQgK,EAAOhK,SAAS,IAAIkN,WAC7BrE,EK2lBDyF,CAAgBtE,EAAO2G,gBACvBjH,EACNb,EAAQ+H,SACN5G,MAAAA,EAAO4G,SACHG,GAAS1G,YAAYL,EAAO4G,eAC5BlH,EACNb,EAAQgI,SACN7G,MAAAA,EAAO6G,SACHhG,EAAKK,UAAUlB,EAAO6G,UACtBhG,EAAKiG,MACJjI,IAQEkI,GAAW,CACtBnI,gBACEC,EACAC,GAQA,gBARAA,IAAAA,EAAqBC,SAAWxM,eAETmN,IAAnBb,EAAQuI,QACVC,GAAgBzI,OAAOC,EAAQuI,OAAQtI,EAAOE,OAAO,IAAIoD,QAAQC,cAE7C3C,IAAlBb,EAAQyI,OACVC,GAAe3I,OAAOC,EAAQyI,MAAOxI,EAAOE,OAAO,IAAIoD,QAAQC,SAE1DvD,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EApBD,CAAEuI,YAAQ1H,EAAW4H,WAAO5H,GAqB1BF,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQuI,OAASC,GAAgBhI,OAAOG,EAAQA,EAAOR,UACvD,MACF,KAAK,EACHH,EAAQyI,MAAQC,GAAelI,OAAOG,EAAQA,EAAOR,UACrD,MACF,QACEQ,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACLoH,OAAQnH,GAAMD,EAAOoH,QACjBC,GAAgBtH,SAASC,EAAOoH,aAChC1H,EACJ4H,MAAOrH,GAAMD,EAAOsH,OAChBC,GAAexH,SAASC,EAAOsH,YAC/B5H,IAIRS,gBAAOtB,GACL,IAAMuB,EAAW,GASjB,YARmBV,IAAnBb,EAAQuI,SACLhH,EAAIgH,OAASvI,EAAQuI,OAClBC,GAAgBlH,OAAOtB,EAAQuI,aAC/B1H,QACYA,IAAlBb,EAAQyI,QACLlH,EAAIkH,MAAQzI,EAAQyI,MACjBC,GAAepH,OAAOtB,EAAQyI,YAC9B5H,GACCU,GAGTC,qBAAuDL,GACrD,IAAMnB,EA/DD,CAAEuI,YAAQ1H,EAAW4H,WAAO5H,GAwEjC,OARAb,EAAQuI,OACNpH,MAAAA,EAAOoH,OACHC,GAAgBhH,YAAYL,EAAOoH,aACnC1H,EACNb,EAAQyI,MACNtH,MAAAA,EAAOsH,MACHC,GAAelH,YAAYL,EAAOsH,YAClC5H,EACCb,IAQEwI,GAAkB,CAC7BzI,gBACEC,EACAC,GAKA,gBALAA,IAAAA,EAAqBC,SAAWxM,UAEX,IAAjBsM,EAAQ5J,MACV6J,EAAOE,OAAO,GAAGI,MAAMP,EAAQ5J,MAE1B6J,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAjBD,CAAE5J,KAAM,GAkBNuK,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ5J,KAAOuK,EAAOJ,QACtB,MACF,QACEI,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACL/K,KAAMgL,GAAMD,EAAO/K,MAAQ0Q,GAAiB3F,EAAO/K,MAAQ,IAI/DkL,gBAAOtB,GACL,IAAMuB,EAAW,GAEjB,YADiBV,IAAjBb,EAAQ5J,OAAuBmL,EAAInL,cF71BR+K,GAC7B,OAAQA,GACN,KAAK0F,GAASE,sBACZ,MAAO,wBACT,KAAKF,GAASG,iBACZ,MAAO,mBACT,KAAKH,GAASI,kBACZ,MAAO,oBACT,KAAKJ,GAASK,4BACZ,MAAO,8BACT,KAAKL,GAASM,aACd,QACE,MAAO,gBEi1BiCwB,CAAe3I,EAAQ5J,OAC1DmL,GAGTC,qBACEL,SAEMnB,EA/CD,CAAE5J,KAAM,GAiDb,OADA4J,EAAQ5J,cAAO+K,EAAO/K,QAAQ,EACvB4J,IAQE0I,GAAiB,CAC5B3I,gBACEC,EACAC,YAAAA,IAAAA,EAAqBC,SAAWxM,eAEPmN,IAArBb,EAAQ4I,mBH50BZ5I,EACAC,GAQA,gBARAA,IAAAA,EAAqBC,SAAWxM,UAEA,IAA5BsM,EAAQ0G,iBACVzG,EAAOE,OAAO,GAAGA,OAAOH,EAAQ0G,iBAEL,IAAzB1G,EAAQ2G,MAAMjG,QAChBT,EAAOE,OAAO,IAAIuF,MAAM1F,EAAQ2G,OAE3B1G,EGo0BL2G,CACE5G,EAAQ4I,SACR3I,EAAOE,OAAO,IAAIoD,QAClBC,SAEJ,cAAgBxD,EAAQ6I,0BACtBX,GAASnI,eAAWE,EAAOE,OAAO,IAAIoD,QAAQC,SAEhD,OAAOvD,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAvBD,CAAE4I,cAAU/H,EAAWgI,UAAW,IAwBhClI,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQ4I,SAAWhC,GAAuBjG,EAAQA,EAAOR,UACzD,MACF,KAAK,EACHH,EAAQ6I,UAAUpF,KAAKyE,GAAS1H,OAAOG,EAAQA,EAAOR,WACtD,MACF,QACEQ,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACLyH,SAAUxH,GAAMD,EAAOyH,UACnBhC,GAAyBzF,EAAOyH,eAChC/H,EACJgI,UAAWlF,MAAMC,cAAQzC,SAAAA,EAAQ0H,WAC7B1H,EAAO0H,UAAUhF,KAAI,SAACjK,GAAD,OAAYsO,GAAShH,SAAStH,MACnD,KAIR0H,gBAAOtB,GACL,IAAMuB,EAAW,GAYjB,YAXqBV,IAArBb,EAAQ4I,WACLrH,EAAIqH,SAAW5I,EAAQ4I,kBH/0BrB5I,GACL,IA8CqBqG,EACjBD,EA/CE7E,EAAW,GAOjB,YAN4BV,IAA5Bb,EAAQ0G,kBACLnF,EAAImF,gBAAkBhH,KAAKC,MAAMK,EAAQ0G,uBAC1B7F,IAAlBb,EAAQ2G,QACLpF,EAAIoF,OA0CcN,OAzCCxF,IAAlBb,EAAQ2G,MAAsB3G,EAAQ2G,MAAQ,IAAItC,WA0ClD+B,EAAgB,GACtBC,EAAI+B,SAAQ,SAACC,GACXjC,EAAI3C,KAAK5J,OAAOyO,aAAaD,OAExB7B,GAAKJ,EAAIhR,KAAK,OA5CZmM,EGw0BDqF,CAAuB5G,EAAQ4I,eAC/B/H,GAEJU,EAAIsH,UADF7I,EAAQ6I,UACM7I,EAAQ6I,UAAUhF,KAAI,SAACjK,GAAD,OACpCA,EAAIsO,GAAS5G,OAAO1H,QAAKiH,KAGX,GAEXU,GAGTC,qBACEL,SAEMnB,EAvED,CAAE4I,cAAU/H,EAAWgI,UAAW,IA8EvC,OANA7I,EAAQ4I,SACNzH,MAAAA,EAAOyH,kBHr1BTzH,WAEMnB,EAAUyG,KAGhB,OAFAzG,EAAQ0G,yBAAkBvF,EAAOuF,mBAAmB,EACpD1G,EAAQ2G,eAAQxF,EAAOwF,SAAS,IAAItC,WAC7BrE,EGi1BD4G,CAA4BzF,EAAOyH,eACnC/H,EACNb,EAAQ6I,oBACN1H,EAAO0H,oBAAWhF,KAAI,SAACjK,GAAD,OAAOsO,GAAS1G,YAAY5H,QAAO,GACpDoG,IAIX,SAAS8I,KACP,MAAO,CAAE9N,OAAQ,GAAI+N,SAAU/G,EAAKiG,MAAOe,MAAO,GAAIC,QAAS,IAGjE,IAAarB,GAAM,CACjB7H,gBAAOC,EAAcC,YAAAA,IAAAA,EAAqBC,SAAWxM,UACnD,cAAgBsM,EAAQhF,uBACtBoM,WAAgBnH,EAAOE,OAAO,IAAIoD,QAAQC,SAW5C,OATKxD,EAAQ+I,SAAS5G,UACpBlC,EAAOE,OAAO,IAAIgI,OAAOnI,EAAQ+I,UAEb,KAAlB/I,EAAQgJ,OACV/I,EAAOE,OAAO,IAAIC,OAAOJ,EAAQgJ,OAEX,KAApBhJ,EAAQiJ,SACVhJ,EAAOE,OAAO,IAAIC,OAAOJ,EAAQiJ,SAE5BhJ,GAGTO,gBAAOC,EAAgCC,GAIrC,IAHA,IAAMC,EAASF,aAAiBP,SAAaO,EAAQ,IAAIP,SAAWO,GAChEG,OAAiBC,IAAXH,EAAuBC,EAAOG,IAAMH,EAAOI,IAAML,EACrDV,EAAU8I,KACTnI,EAAOI,IAAMH,GAAK,CACvB,IAAMI,EAAML,EAAOR,SACnB,OAAQa,IAAQ,GACd,KAAK,EACHhB,EAAQhF,OAAOyI,KAAK2D,GAAYzG,EAAQA,EAAOR,WAC/C,MACF,KAAK,EACHH,EAAQ+I,SAAWpI,EAAOwH,SAC1B,MACF,KAAK,EACHnI,EAAQgJ,MAAQrI,EAAOP,SACvB,MACF,KAAK,EACHJ,EAAQiJ,QAAUtI,EAAOP,SACzB,MACF,QACEO,EAAOM,SAAe,EAAND,IAItB,OAAOhB,GAGTkB,kBAASC,GACP,MAAO,CACLnG,OAAQ2I,MAAMC,cAAQzC,SAAAA,EAAQnG,QAC1BmG,EAAOnG,OAAO6I,KAAI,SAACjK,GAAD,gBD79BjBuH,GACP,MAAO,CACLtM,MAAOuM,GAAMD,EAAOtM,OAASgF,OAAOsH,EAAOtM,OAAS,GACpDmG,OAAQoG,GAAMD,EAAOnG,QAAUnB,OAAOsH,EAAOnG,QAAU,IC09BrBoM,CAAcxN,MAC5C,GACJmP,SAAU3H,GAAMD,EAAO4H,UACnB/G,EAAKK,UAAUlB,EAAO4H,UACtB/G,EAAKiG,MACTe,MAAO5H,GAAMD,EAAO6H,OAASnP,OAAOsH,EAAO6H,OAAS,GACpDC,QAAS7H,GAAMD,EAAO8H,SAAWpP,OAAOsH,EAAO8H,SAAW,KAI9D3H,gBAAOtB,GACL,IAAMuB,EAAW,GAUjB,OAREA,EAAIvG,OADFgF,EAAQhF,OACGgF,EAAQhF,OAAO6I,KAAI,SAACjK,GAAD,OAAQA,WDn+BrCoG,GACL,IAAMuB,EAAW,GAGjB,YAFkBV,IAAlBb,EAAQnL,QAAwB0M,EAAI1M,MAAQmL,EAAQnL,YACjCgM,IAAnBb,EAAQhF,SAAyBuG,EAAIvG,OAASgF,EAAQhF,QAC/CuG,EC+9BuC6F,CAAYxN,QAAKiH,KAEhD,QAEMA,IAArBb,EAAQ+I,WACLxH,EAAIwH,UAAY/I,EAAQ+I,UAAY/G,EAAKiG,OAAOtO,iBACjCkH,IAAlBb,EAAQgJ,QAAwBzH,EAAIyH,MAAQhJ,EAAQgJ,YAChCnI,IAApBb,EAAQiJ,UAA0B1H,EAAI0H,QAAUjJ,EAAQiJ,SACjD1H,GAGTC,qBAAkDL,aAC1CnB,EAAU8I,KAQhB,OAPA9I,EAAQhF,iBAASmG,EAAOnG,iBAAQ6I,KAAI,SAACjK,GAAD,OAAOwN,GAAiBxN,QAAO,GACnEoG,EAAQ+I,SACN5H,MAAAA,EAAO4H,SACH/G,EAAKK,UAAUlB,EAAO4H,UACtB/G,EAAKiG,MACXjI,EAAQgJ,eAAQ7H,EAAO6H,SAAS,GAChChJ,EAAQiJ,iBAAU9H,EAAO8H,WAAW,GAC7BjJ,IAwEX,SAASoB,GAAMjK,GACb,OAAOA,MAAAA,EANL+I,OAAS8B,OAASA,IACpB9B,OAAS8B,KAAOA,EAChB9B,mBCrlCWgJ,GAAcrC,GAASG,iBAO9BmC,GAAa,CACjBnO,OAAQ,GACRnG,MAAOgD,EAAoBQ,WAC3B+Q,IAAKvR,EAAoBc,aAGd0Q,cAUX,WACEC,EACAC,EACAC,EACA5U,QAbK0U,sBACAC,mBACA3U,2BACA4U,mBACAC,gBAWOD,GAAZE,MAEAlW,KAAK8V,UAAYA,EACjB9V,KAAK+V,OAASA,EACd/V,KAAKgW,OAASA,EACdhW,KAAKoB,eAAiBA,EAEtB,IAAM+U,EAAgB,IAAIC,IAC1BD,EAAcE,IAAInH,mBAAW0B,QAAS1B,mBAAWoH,OACjDH,EAAcE,IAAI5F,yBAAiBG,QAASH,yBAAiB6F,OAC7DH,EAAcE,IAAI/J,sBAAcsE,QAAStE,sBAAcgK,OACvDH,EAAcE,IAAI3H,0BAAkBkC,QAASlC,0BAAkB4H,OAC/DH,EAAcE,IAAIpH,6BAAqB2B,QAAS3B,6BAAqBqH,OACrEH,EAAcE,IAAItH,6BAAqB6B,QAAS7B,6BAAqBuH,OACrEH,EAAcE,IAAIxG,uBAAee,QAASf,uBAAeyG,OACzDH,EAAcE,IAAI3F,wBAAgBE,QAASF,wBAAgB4F,OAE3DtW,KAAKiW,SAAW,IAAIM,WAASJ,GAjCjC,kBAAA,OAAA7V,EAoCekW,qBApCf,kBAoCS,aAAA,UAAA,6BAAA,OAAA,sBAAA,OAAA,OACGC,EAAYzW,KAAK8V,UAAjBW,QADHC,SAUKD,EAAQjV,eAAexB,KAAKoB,gBAVjC,OAAA,OAOCoT,GAPDmC,SAGHC,QACEC,cAGErC,2BAIC,CACL1S,QAAS9B,KAAKoB,eACd0V,SARIC,QAAWC,IASfC,cAAeC,WARXC,gBASJ3C,SAAU0C,SAAS1C,KAfhB,OAAA,UAAA,+BApCT,OAAA,WAAA,mCAAAlU,EAuDe8W,2BAvDf,kBAuDS,WACLC,EACAC,GAFK,4BAAA,6BAAA,OAAA,sBAAA,OAAA,gBAELA,IAAAA,EAAe,IAFVC,SAOgBvX,KAAKwW,YAPrB,OAAA,OAQCgB,EAAgB9E,SAAOC,MADvB8E,UACmCX,OAAQ,UAwInDxC,EApII,IAAIzD,WAAW2G,GAqInBhD,EApIIiD,EAAOjD,SAqIX5R,EApII8S,GAsIEoB,EAAS7E,MAAIjE,YAAY,CAC7B4C,QAAS,2CACTjN,OLtPA6I,EKsPqB,CACnBwK,IAAK1C,GLtPP7H,OKqPOiL,WLrPPjL,IAAAA,EAAqBC,SAAWxM,UAEL,IAAvBsM,EAAQwK,IAAI9J,QACdT,EAAOE,OAAO,IAAIuF,MAAM1F,EAAQwK,KAE3BvK,GKkPJkL,WAECC,EAAazD,GAAWnG,YAAY,CACxCsG,UAAWwC,EACXvC,SAAUG,GAAS1G,YAAY,CAC7B+G,OAAQC,GAAgBhH,YAAY,CAClCpL,KAAAA,MAGJ4R,SAAAA,IAtJMqD,EAyJDD,EAjCsCrC,EA9GzCI,GAAWC,IAHPkC,EAkHD1D,GAAIpG,YAAY,CACrBxG,OAAQ,CACNoM,GAAiB,CACfvS,MAnHFsU,GAAWtU,MAoHTmG,OArHFmO,GAAWnO,UAwHb+N,SAAAA,IAlHMwC,EAAiBC,GAAeH,EAAgBC,GAOhDG,EAAOC,GADKb,aAAoBlH,MAAQkH,EAAW,CAACA,GACTC,GAG3Ca,EAAgBC,GACpBpY,KAAKiW,SAAS1J,OAAO0L,GACrBhE,GAAgB8D,GAAgBJ,SAChCtT,EAAoBM,SACpB8S,EAAOR,eAvCJM,UA2CgBc,wBAAsBC,kBACzCtY,KAAK+V,OACL/V,KAAKgW,OACL,CACEC,SAAUjW,KAAKiW,SACfsC,OAAQlU,EAAoBS,mBAAmBkC,gBAhD9C,QAAA,OA2CLwR,SA3CKjB,UAoD+BiB,EAAaxC,OAAOyC,WACtDzY,KAAKoB,eACL+W,GAtDG,QAAA,OAyDCO,EAAQ7E,GAAkB,CAC9BC,WANM6E,GApDHC,UAoDGD,QAMY7E,UAClBC,cAAe4E,EAAO5E,cACtBC,WAAY,CAAC6E,eARCC,UAQoBA,cAE9BC,EAAUlF,GAAa6E,GAAOf,2BAE7Ba,EAAaQ,YAAYD,IAhE3B,QAAA,UAAA,oBLhGLvM,EACAC,EKkO2C8I,EAa7CjB,EACAE,EACA5R,EAEMkU,EAMAc,gBAjNR,OAAA,cAAA,iDAqJgBM,GACdb,EACAC,GAKA,MAAO,CACL1G,QAAS,4BACTjN,MAAO,CACL0T,SANYA,EAAShH,KAAI,SAAC4I,GAC5B,OAAOA,EAAKhI,qBAMVqG,KAAMA,IAKZ,SAAgBc,GACdtE,EACAC,EACA9P,EACAgT,GAEA,ODuPsDtJ,ECvP3B,CACzBmG,UAAAA,EACAC,cAAAA,EACA9P,QAAAA,EACAgT,cAAAA,IDoPMzK,EAzFD,CACLsH,UAAW,IAAIjD,WACfkD,cAAe,IAAIlD,WACnB5M,QAAS,GACTgT,cAAezI,EAAKiG,QAsFZX,mBAAYnG,EAAOmG,aAAa,IAAIjD,WAC5CrE,EAAQuH,uBAAgBpG,EAAOoG,iBAAiB,IAAIlD,WACpDrE,EAAQvI,iBAAU0J,EAAO1J,WAAW,GACpCuI,EAAQyK,cACNtJ,MAAAA,EAAOsJ,cACHzI,EAAKK,UAAUlB,EAAOsJ,eACtBzI,EAAKiG,MACJjI,MAT6CmB,QAC9CnB,EChPV,SAASwL,GAAeJ,EAAwBnN,GAC9C,OD4bQ+B,EA9DD,CAAE0H,YAAa,GAAIzJ,SAAK4C,IA+DrB6G,uBAF6CvG,EC3b3B,CAC1BuG,YAAa,CAAC0D,GACdnN,IAAAA,ID4bSyJ,sBAAa7D,KAAI,SAACjK,GAAD,OAAO+N,GAAWnG,YAAY5H,QAAO,GAC/DoG,EAAQ/B,IACNkD,MAAAA,EAAOlD,IACH2J,GAAIpG,YAAYL,EAAOlD,UACvB4C,EACCb,MAR8CmB,IAC/CnB,oBEvqBR,SAAY0M,EAAajV,QATlBkV,yBAGAC,oBACA3C,oBACA4C,oBACAC,kBACAC,eAGLvZ,KAAKuZ,QAAUL,EACflZ,KAAKmZ,aAAe,IAAItZ,EAAaqZ,GAGrClZ,KAAKoZ,QAAU,IAAIpY,EAAQhB,KAAKmZ,cAChCnZ,KAAKyW,QAAU,IAAIlV,EAAQvB,KAAKmZ,cAChCnZ,KAAKqZ,QAAU,IAAI5X,EAAQzB,KAAKmZ,cAChCnZ,KAAKsZ,MAAQ,IAAI/W,EAAMvC,KAAKmZ,wDnBbP,uCAuCS,sCA3BE,yCAaA,iCA0BJ,gDEtDF,0BF8CJ,kBAnDP,2BAsCS,iCACK,8BA3BH,6CAYA,iCACK,6EAmJV,CACvBlV,QAAS,MACTlB,KAAM,WACNI,QACE,sHACFH,OAAQ,yBAGe,CACvBiB,QAAS,SACTlB,KAAM,SACNI,QACE,sHACFH,OAAQ,+DCxLuB,kCAFK,cDAnB,2BAsCS,6BA1BE,kCAYA,uBA2BJ,kCAhBS,sBA5Bb,iCAuCS,iCA3BE,mCAaA,4BA0BJ,+CArDT,6BAuCS,+BA3BE,0CAaA,kBA3BZ,2BAuCS,8BA3BE,yCAaA,wBA0BJ,wBAED,iBAhDN,2BAuCS,+BA3BE,6BAaA,yBA0BJ,oDCvDG,qCDFV,2BAuCS,8BA3BE,oCAaA,wBA0BJ,iCoBrDQ,+BAEF,oBpBIT,mCAuCS,kCA3BE,qCAaA,6BA0BJ,yDC/CI,2EDAZ,4BAmDO,mCAZO,gDA3BE,4CAcA,kCA2BH,CAvCL,IAYQ,8FqB3BpC,SACEP,EACAmB,EACA4V,EACAC,QAVFC,4BACA9V,wBACA4V,mBACAG,oBACAF,4BAQEzZ,KAAK0Z,gBAAkBjX,EACvBzC,KAAK4D,YAAcA,EACnB5D,KAAKwZ,OAASA,EACdxZ,KAAK2Z,QAAU,EACf3Z,KAAKyZ,qBAAuBA,oDrBfZ,6BAuCS,+BA3BE,+BAaA,0BA0BJ,oBsBvDP,gCCI6BG,EAAiBC,GAEhE,IADA,MAAMxJ,EAAM,IAAI+F,QACGwD,kBAAO,CAAA,IAAfX,UACT5I,EAAIgG,IAAI4C,EAAKY,GAAWZ,GAE1B,OAAO5I,qCnBDwB1M,GAC/B,SAAI6B,EAAWsU,KAAKnW,KAAsC,IAA5B+B,EAAYoU,KAAKnW,uFoBPpB,SAACoW,YAAAA,IAAAA,EAAS,KACrC,MAA+BA,EAAO5T,WAAW6T,QAAQ,IAAK,IAAIC,MAAM,YAAjEC,aAAM,YAAIC,aAAQ,KAEzB,OAAID,EAAIhN,OAAS,GACL,IAAIjH,EAAQiU,GAAKvS,IAAI,IAAI1B,EAAQ,IAAI4E,IAAI,KAAKuP,QAAQ,OACvDF,EAAIhN,OAAS,EACZ,IAAIjH,EAAQiU,GAAKvS,IAAI,IAAI1B,EAAQ,IAAI4E,IAAI,IAAIuP,QAAQ,OACtDF,EAAIhN,OAAS,EACZ,IAAIjH,EAAQiU,GAAKvS,IAAI,IAAI1B,EAAQ,IAAI4E,IAAI,IAAIuP,QAAQ,QAErDvM,OAAOqM,GAAO,EAAIA,EAAM,QAChCC,EAAMjN,OAAS,EAAIiN,EAAME,MAAM,EAAG,GAAK,iCCbpBC,GAavB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,0BCEfI,EAAgBC,GAClC,OAAO,IAAI1U,EAAQyU,GAAQ/S,IAAIgT,GAAQxU,qCChBjBxC,EAAe4U,EAAYqC,GACjD,gBADqCrC,IAAAA,EAAS,YAAGqC,IAAAA,EAAS,GACtDjX,EACKA,EAAMkX,OAAO,EAAGtC,GAAU,MAAQ5U,EAAMkX,QAAQD,GAEhDjX,qCCDsBmX,GAG/B,OAF8BC,EACRC,MAAK,SAAC/B,GAAD,OAAUA,EAAK5X,QAAUyZ,MAI3CC,EAAmB,uCAII/X,GAKhC,OAJ8B+X,EACRC,MACpB,SAAC/B,GAAD,OAAUA,EAAKjW,OAAOiY,gBAAkBjY,EAAOiY,kBAKxCF,EAAmB,2BtBLA,SAACG,GAC7B,OAAOjU,EAAOiU,GAAMC,yCAbOxX,EAAeyX,GAC1C,gBAD0CA,IAAAA,EAAU,uBAC7CnU,GAAQtD,GAAO0X,OAAOD,yBH4EH,SAC1BzX,EACA2X,EACAC,GAEA,gBAHAD,IAAAA,EAAoB,YACpBC,IAAAA,EAAgB,GAEN,IAAItV,EAAQtC,GACnBgE,IAAI,IAAI1B,EAAQ,IAAI4E,IAAIyQ,IACxBlB,QAAQmB,2BG5Ea,SAACL,GACzB,OAAOjU,EAAOiU,GAAMG,OAAO,0DALI1X,EAAeyX,GAC9C,gBAD8CA,IAAAA,EAAU,kBACjDnU,EAAgB,KAARtD,GAAc0X,OAAOD,2CuBPA3Q,GACpC,OAAIA,EACQjH,EAAkBiH,GAAK/G,UAE1B,qCCDTmJ,EACAC,EACArC,GASA,OAAO+Q,SAAOjP,OAAO,MAAOkP,SAAOC,SAN/B7O,EAASC,EACFA,MAAUD,MAAUpC,EAEpBoC,MAAUC,MAAUrC,IAGiB4P,MAAM,EAAG,qC3B+CzD1W,EACAqC,GAGA,gBAHAA,IAAAA,EF5D2B,IE8DZ,IAAIC,EAAQtC,GAAOwF,IAAI+C,KAAKrB,IAAI,GAAI7E,IAAY2V,QACjDhN,qCuBxCU+L,EAAgBC,GACxC,OAAO,IAAI1U,EAAQyU,GAAQkB,OAAOjB,mCATND,EAAgBC,GAC5C,OAAO,IAAI1U,EAAQyU,GAAQmB,qBAAqBlB,gCAGvBD,EAAgBC,GACzC,OAAO,IAAI1U,EAAQyU,GAAQtS,SAASuS,oDAkCXhX,GACzB,QAAKA,GAGE,IAAIsC,EAAQtC,GAAO0E,YAAY,kCK7CXyT,GAC3B,GAAIA,EAAKC,GAAGlO,OAAOmO,kBACjB,MAAM,IAAI5J,WAAW6J,MAAM,gDAE7B,OAAOH,EAAKjS,mCLdQ6Q,EAAyBC,GAC7C,OAAO,IAAI1U,EAAQyU,GAAQwB,MAAMvB,GAAQxU,0CAGduU,EAAyBC,GACpD,OAAO,IAAI1U,EAAQyU,GAAQvR,IAAIwR,GAAQxU,yCHZPmU,GAChC,OAAO,IAAIlE,IAAI+F,OAAOC,QAAQ9B,iCSML3W,GACzB,OAAI+C,EAAU/C,GACF,IAAIsC,EAAQtC,GAAOyW,QAAQ,OAE9BzW,yBNRU+W,EAAgBC,GACnC,OAAO,IAAI1U,EAAQyU,GAAQ2B,KAAK1B,GAAQxU,wBA+B1C,SACExC,EACAqC,EACAmG,GAEA,YAHAnG,IAAAA,EzBnC+B,ayBoC/BmG,IAAAA,EAA0BlG,EAAQO,YAEpB,KAAV7C,EACF,MAAO,IAET,IAAM2Y,EAAS,IAAIrW,EAAQtC,GAAOwF,IAAI+C,KAAKrB,IAAI,GAAI7E,IACnD,OAAImG,IAAUlG,EAAQC,SACboW,EAAOC,OAAOpW,WAEhBmW,EAAOX,QAAQxV,mCAhBFxC,GACpB,OAAO,IAAIsC,EAAQtC,GAAOwF,IAAI+C,KAAKrB,IAAI,GzB9BR,KyB8BgC1E,oCAkB1CxC,GACrB,OAAO,IAAIsC,EAAQtC,GAAOgE,IAAIuE,KAAKrB,IAAI,GzBjDR,KyBiDgC1E,mCAG3CxC,EAAeqC,GACnC,gBADmCA,IAAAA,EzBpDJ,IyBqDxB,IAAIC,EAAQtC,GAAOgE,IAAIuE,KAAKrB,IAAI,GAAI7E,IAAYG,wDOvDpCxC,GACnB,IAAMkP,EAAMlP,EAAMsW,MAAM,KAClB3M,EAAM,GAAKuF,EAAI3F,OACfsP,EAAwB,GAC9B3J,EAAI+B,SAAQ,SAACqE,GACXuD,EAAOvM,MAAMgJ,MAEf,IAAK,IAAInG,EAAI,EAAGA,EAAIxF,EAAKwF,IACvB0J,EAAOC,QAAQ,GAEjB,OAAOD,iC9BiCP7Y,EACAqC,GAEA,gBAFAA,IAAAA,EF5CoC,GE8C7BM,EAAe3C,EAAOqC,EAAWC,EAAQC,wCAIhDvC,EACAqC,YAAAA,IAAAA,EFjD+B,IEmD/B,IACE,OAAO,IAAIC,EAAQtC,GAChBoC,gBAAgBC,EAAWC,EAAQO,YACnCL,WACH,MAAOC,GACP,OAAOC,OAAO1C,GAAS,sCAtBzBA,EACAqC,GAEA,gBAFAA,IAAAA,EFrCoC,GEuC7BM,EAAe3C,EAAOqC,EAAWC,EAAQO,+FAgChD7C,EACAqC,YAAAA,IAAAA,EFpE2B,IEsE3B,IACE,OAAO0W,UAAcC,cAAchZ,EAAOqC,GAAWG,WACrD,MAAOC,GACP,OAAOC,OAAO1C,GAAS,kC6B9DDA,GACxB,IACE,OAAU,IAAIsC,EAAQtC,GAAOwF,IAAI,KAAKiR,QAAQ,OAC9C,MAAOhU,GACP,OAAOzC,EAAMwC,oCEjBKxC,GACpB,OAAKA,EAGE,IAAM,IAAIsC,EAAQtC,GAAOyW,QAAQ,GAF/B"}